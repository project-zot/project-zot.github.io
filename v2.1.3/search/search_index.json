{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"admin-guide/admin-configuration/","title":"Configuring zot","text":"<p> The registry administrator configures zot primarily through settings in the configuration file. </p> <p>Using the information in this guide, you can compose a configuration file with the settings and features you require for your zot registry server.</p> <p> Before launching zot with a new configuration, we recommend that you verify the syntax of your configuration as described in Verifying the configuration file.</p>"},{"location":"admin-guide/admin-configuration/#configuration-file","title":"Configuration file","text":"<p>The configuration file is a JSON or YAML file that contains all configuration settings for zot functions such as:</p> <ul> <li>network</li> <li>storage</li> <li>authentication</li> <li>authorization</li> <li>logging</li> <li>metrics</li> <li>synchronization with other registries</li> <li></li> <li>clustering</li> </ul> <p>The zot service is initiated with the <code>zot serve</code> command followed by the name of a configuration file, as in this example:</p> <p><code>zot serve config.json</code></p> <p> The instructions and examples in this guide use <code>zot</code> as the name of the zot executable file. The examples do not include the path to the executable file.</p> <p>When you first build zot or deploy an image or container from the distribution, a basic configuration file <code>config.json</code> is created. This initial file is similar to the following example:</p> <pre><code>{\n    \"distSpecVersion\": \"1.0.1\",\n    \"storage\": {\n        \"rootDirectory\": \"/tmp/zot\"\n    },\n    \"http\": {\n        \"address\": \"127.0.0.1\",\n        \"port\": \"8080\"\n    },\n    \"log\": {\n        \"level\": \"debug\"\n    }\n}\n</code></pre> <p>The configuration file contains the Distribution Specification version (<code>distSpecVersion</code>). The structure and content of other attributes are described in the later sections of this guide.</p>"},{"location":"admin-guide/admin-configuration/#extensions","title":"Extensions","text":"<p>Additional registry features that are not a part of the Distribution Specification are allowed to be added as Extensions.  </p> <p>With a full (not minimal) zot image, the following extension features can be enabled and configured under an <code>extensions</code> attribute in the configuration file as shown in the following example.</p> <pre><code>{\n  ...\n  \"extensions\": {\n    \"metrics\": {},\n    \"sync\": {},\n    \"search\": {},\n    \"scrub\": {},\n    \"lint\": {},\n    \"trust\": {},\n    \"ui\": {}\n  }\n}\n</code></pre> <p> The extension features are available only with a full zot image. With a minimal zot image, the <code>extensions</code> section is ignored if present.</p> <p>The following features are configured under the <code>extensions</code> attribute.</p> <ul> <li>Metrics</li> <li>Sync</li> <li>Search</li> <li>Scrub</li> <li>Lint</li> <li>ImageTrust</li> <li>UI</li> </ul> <p>An extension feature is usually enabled by the presence of the feature\u2019s attribute under <code>extensions</code>. An extension feature can then be disabled by either omitting the feature attribute or by including an <code>enable</code> attribute with a value of <code>false</code>.</p> <p> Two API-only extensions, User Preferences and Mgmt, are not enabled or configured under the <code>extensions</code> section of the configuration file.  These API-only extensions are enabled as follows:</p> <ul> <li> <p>Mgmt is enabled when the <code>Search</code> extension is enabled.</p> </li> <li> <p>User Preferences is enabled when both the <code>Search</code> and <code>UI</code> extensions are enabled. </p> </li> </ul>"},{"location":"admin-guide/admin-configuration/#enabling-and-disabling-extensions","title":"Enabling and disabling extensions","text":"<p>Following is an example of enabling or disabling a feature in the <code>extensions</code> section. The scrub feature is enabled in these two configurations:</p> <pre><code>\"extensions\": {\n  \"scrub\": {}\n}\n</code></pre> <pre><code>\"extensions\": {\n  \"scrub\": {\n    \"enable\": true\n  }\n}\n</code></pre> <p>The scrub feature is disabled in these two configurations:</p> <pre><code>\"extensions\": {\n}\n</code></pre> <pre><code>\"extensions\": {\n  \"scrub\": {\n    \"enable\": false\n  }\n}\n</code></pre>"},{"location":"admin-guide/admin-configuration/#developing-custom-extensions","title":"Developing custom extensions","text":"<p>New functionality can be added to the zot registry by developing custom extensions for integration into zot. For information about developing extensions, see Developing New Extensions.</p> <p></p>"},{"location":"admin-guide/admin-configuration/#network-configuration","title":"Network configuration","text":"<p>Use the <code>http</code> attribute in the configuration file to configure the zot network settings, as shown in the following example.</p> <pre><code>\"http\": {\n  \"address\":\"127.0.0.1\",\n  \"port\":\"8080\",\n  \"realm\":\"zot\",\n  \"tls\": {\n    \"cert\":\"test/data/server.cert\",\n    \"key\":\"test/data/server.key\"\n  }\n}\n</code></pre> <p>The following table lists the configurable attributes.</p> Attribute Description <code>address</code> The IP address of the zot server. <code>port</code> The port number of the zot server. <code>realm</code> The security policy domain defined for the server. <code>tls</code> The included attributes in this section specify the Transport Layer Security (TLS) settings for the server. <code>cert</code> The path and filename of the server\u2019s SSL/TLS certificate. <code>key</code> The path and filename of the server\u2019s registry key. <p></p>"},{"location":"admin-guide/admin-configuration/#storage","title":"Storage","text":"<p>Exposing flexibility in storage capabilities is a key tenet for catering to the requirements of varied environments ranging from cloud to on-premises to IoT.</p> <p>Filesystem storage is configured with the <code>storage</code> attribute in the zot configuration file, as shown in the following simple example.</p> <pre><code>\"storage\":{\n  \"rootDirectory\":\"/tmp/zot\",\n  \"commit\": true,\n  \"dedupe\": true,\n  \"gc\": true,\n  \"gcDelay\": \"1h\",\n  \"gcInterval\": \"24h\"\n}\n</code></pre> <p>With zot, you have the option to store your registry image files either in local filesystem storage or in cloud storage, such as an Amazon Simple Storage Service (S3) bucket.</p>"},{"location":"admin-guide/admin-configuration/#local-storage","title":"Local storage","text":"<p>zot can store and serve files from one or more local directories (folders). A minimum of one root directory is required for local hosting, but additional hosted directories can be added. When accessed by HTTP APIs, all directories can appear as a single data store.</p> <p> Remote filesystems that are mounted and accessible locally such as <code>NFS</code> or <code>fuse</code> are treated as local filesystems.</p>"},{"location":"admin-guide/admin-configuration/#remote-storage","title":"Remote storage","text":"<p>zot can also store data remotely in the cloud, using the storage APIs of the cloud service. Currently, zot supports only the AWS S3 storage service.</p> <p>For detailed information about configuring S3 storage, see the AWS S3 documentation and Storage Planning with zot.</p>"},{"location":"admin-guide/admin-configuration/#storage-features","title":"Storage features","text":""},{"location":"admin-guide/admin-configuration/#commit","title":"Commit","text":"<p>Most modern filesystems buffer and flush RAM data to disk after a delay. The purpose of this function is to improve performance at the cost of higher disk memory usage. In embedded devices such as Raspberry Pi, for example, where RAM may be very limited and at a premium, it is desirable to flush data to disk more frequently. The zot storage configuration exposes an option called <code>commit</code> which, when enabled, causes data writes to be committed to disk immediately. This option is disabled by default.</p>"},{"location":"admin-guide/admin-configuration/#deduplication","title":"Deduplication","text":"<p>Deduplication is a storage space saving feature wherein only a single copy of specific content is maintained on disk while many different image manifests may hold references to that same content. The deduplication option (<code>dedupe</code>) is also available for supported cloud storage backends.</p> <p>Upon startup, zot enforces the <code>dedupe</code> status on the existing storage. If the <code>dedupe</code> status upon startup is <code>true</code>, zot deduplicates all blobs found in storage, both local and remote.  If the status upon startup is <code>false</code>, zot restores cloud storage blobs to their original state. There is no need for zot to restore local filesystem storage if hard links are used.</p>"},{"location":"admin-guide/admin-configuration/#garbage-collection","title":"Garbage collection","text":"<p>After an image is deleted by deleting an image manifest, the corresponding blobs can be purged to free up space. However, since Distribution Specification APIs are not transactional between blob and manifest lifecycle, care must be taken so as not to put the storage in an inconsistent state. Garbage collection in zot is an inline feature meaning that it is not necessary to take the registry offline. The zot configuration model allows for enabling and disabling garbage collection (<code>gc</code>). The model also allows the configuration of a tunable delay (<code>gcDelay</code>), which can be set depending on client network speeds and the size of blobs.</p>"},{"location":"admin-guide/admin-configuration/#scrub","title":"Scrub","text":"<p>The <code>scrub</code> function, available as an extension, makes it possible to ascertain data validity by computing hashes on blobs periodically and continuously so that any bit rot is caught and reported early.</p>"},{"location":"admin-guide/admin-configuration/#configuring-storage","title":"Configuring storage","text":"<p>For detailed information about configuring local or remote storage and storage features for your zot registry, see Storage Planning with zot.</p> <p></p>"},{"location":"admin-guide/admin-configuration/#security-and-hardening","title":"Security and hardening","text":""},{"location":"admin-guide/admin-configuration/#authentication","title":"Authentication","text":"<p>zot supports authentication by the following methods:</p> <ul> <li> <p>TLS mutual authentication</p> </li> <li> <p>Basic local authentication using an htpasswd file</p> </li> <li> <p>LDAP authentication</p> </li> <li> <p>Bearer (OAuth2) authentication using an HTTP Bearer token</p> </li> </ul> <p>For detailed information about configuring authentication for your zot registry, see User Authentication and Authorization with zot.</p>"},{"location":"admin-guide/admin-configuration/#identity-based-authorization","title":"Identity-based authorization","text":"<p>User identity can be used as an authorization criterion for allowing actions on one or more repository paths. For specific users, you can choose to allow any combination of read, create, update, or delete actions on specific repository paths.</p> <p>For detailed information about configuring access control policies for your zot registry, see User Authentication and Authorization with zot.</p>"},{"location":"admin-guide/admin-configuration/#preventing-automated-attacks-with-failure-delay","title":"Preventing automated attacks with failure delay","text":"<p>Use the <code>auth</code> and <code>failDelay</code> attributes under <code>http</code> in the configuration file to delay the response to an authentication failure. A delayed response helps to prevent automated attacks. The configuration is shown in the following example.</p> <pre><code>\"http\": {\n  \"auth\": {\n    \"failDelay\": 5\n  }\n}\n</code></pre> <p>The <code>failDelay</code> attribute specifies a waiting time, in seconds, before zot sends a failure notification to an authenticating user who has been denied access.</p>"},{"location":"admin-guide/admin-configuration/#rate-limiting","title":"Rate limiting","text":"<p>You can limit the rate of API calls from users by configuring the <code>ratelimit</code> attribute in the configuration file, as shown in the following example:</p> <pre><code>\"http\": {\n    \"address\": \"127.0.0.1\",\n    \"port\": \"8080\",\n    \"ratelimit\": {\n        \"rate\": 10,\n        \"methods\": [\n            {\n                \"method\": \"GET\",\n                \"rate\": 5\n            }\n        ]\n    }\n}\n</code></pre> <p>In this example, the <code>rate</code> attribute directly under <code>ratelimit</code> sets a global rate limit of ten API calls per second. You can optionally override the global limit for specific API <code>Methods</code>. In this example, API <code>GET</code> calls are limited to five per second.</p>"},{"location":"admin-guide/admin-configuration/#additional-security-features","title":"Additional security features","text":"<p>For detailed information about configuring additional security features for your zot registry, see Security Posture.</p> <p></p>"},{"location":"admin-guide/admin-configuration/#monitoring","title":"Monitoring","text":"<p>zot supports a range of monitoring tools including the following:</p> <ul> <li> <p>Logging</p> <p>Logging for zot operations is configured with the <code>log</code> attribute in the configuration file.</p> </li> <li> <p>Metrics</p> <p>Metrics data is available in a Prometheus format. A full zot image with extensions includes a node exporter. A minimal zot image can use an external node exporter such as <code>zxp</code>.</p> </li> <li> <p>Benchmarking</p> <p>The zot project includes the <code>zb</code> tool, which allows you to benchmark a zot registry or any other container image registry that conforms to the OCI Distribution Specification.</p> </li> <li> <p>Performance profiling</p> <p>Performance profiling capabilities within zot allow a zot administrator to collect and export a range of diagnostic performance data such as CPU intensive function calls, memory allocations, and execution traces. The collected data can then be analyzed using Go tools and a variety of available visualization tools.</p> </li> </ul> <p>When zot is deployed in a Kubernetes setup, a site reliability engineering (SRE) operator can monitor service level indicators (SLI) such as metrics and logs. Metrics will appear in Prometheus using the zot <code>metrics</code> extension, while logs will appear in the Elasticsearch stack (ELK stack) using Filebeat.</p> <p>For detailed information about the monitoring tools, see Monitoring the registry.</p> <p>For detailed information about benchmarking, see Benchmarking zot with zb.</p> <p>For detailed information about performance profiling, see Performance Profiling in zot.</p> <p></p>"},{"location":"admin-guide/admin-configuration/#clustering-zot","title":"Clustering zot","text":"<p>To ensure high-availability of the registry, zot supports a clustering scheme with stateless zot instances/replicas fronted by a loadbalancer and a shared remote backend storage. This scheme allows the registry service to remain available even if a few replicas fail or become unavailable. Loadbalancing across many zot replicas can also increase aggregate network throughput.</p> <p>For detailed information about clustering with zot, see zot Clustering.</p> <p></p>"},{"location":"admin-guide/admin-configuration/#syncing-and-mirroring-registries","title":"Syncing and mirroring registries","text":"<p>A zot registry can mirror one or more upstream OCI registries, including popular cloud registries such as Docker Hub and Google Container Registry.  If an upstream registry is OCI distribution-spec conformant for pulling images, you can use zot's <code>sync</code> extension feature to implement a downstream mirror, synchronizing OCI images and corresponding artifacts. Synchronization between registries can be implemented by periodic polling of the upstream registry or synchronization can occur on demand, when a user pulls an image from the downstream registry.</p> <p>As with git, wherein every clone is a full repository, you can configure a local zot instance to be a full OCI mirror registry. This allows for a fully distributed disconnected container image build pipeline.</p> <p>For detailed information about syncing and mirroring, see OCI Registry Mirroring With zot.</p> <p></p>"},{"location":"admin-guide/admin-configuration/#linting-uploaded-images","title":"Linting uploaded images","text":"<p>The lint extension can check an uploaded image to enforce the presence of required annotations such as the author or the license.</p> <p>To configure linting, add the <code>lint</code> attribute under <code>extensions</code> in the configuration file, as shown in the following example:</p> <pre><code>\"extensions\": {\n    \"lint\": {\n      \"enable\": true,\n      \"mandatoryAnnotations\": [\"annot1\", \"annot2\", \"annot3\"]\n      }\n  }\n</code></pre> <p>The following table lists the configurable attributes of the <code>lint</code> extension.</p> Attribute Description <code>enable</code> If this attribute is missing, incoming image linting is disabled by default. Linting can be enabled by including this attribute and setting it to <code>true</code>. <code>mandatoryAnnotations</code> A list of annotations that are required to be present in the image being pushed to the repository. <p>If the mandatory annotations option is configured when you push an image, linter will verify that the mandatory annotations list present in the configuration is also found in the manifest's annotations list. If any annotations are missing, the push is denied.</p> <p></p>"},{"location":"admin-guide/admin-configuration/#compatibility-with-other-image-schema-types","title":"Compatibility with other image schema types","text":"<p>As an option, zot can be configured to store images using the schema Docker Manifest v2 Schema v2. In this case, a Docker image can be copied to zot without modifications to the image's manifest or digest. Such modifications would otherwise break the image's signature and attestations.</p> <p>To enable this compatibility, configure the <code>compat</code> attribute under <code>http</code> in the zot configuration file. Set the <code>compat</code> value to <code>docker2s2</code> as shown in the following example:</p> <pre><code>\"http\": {\n    \"address\": \"127.0.0.1\",\n    \"port\": \"8080\",\n    \"compat\": [\"docker2s2\"]\n}\n</code></pre> <p></p>"},{"location":"admin-guide/admin-configuration/#verifying-the-signatures-of-uploaded-images","title":"Verifying the signatures of uploaded images","text":"<p>The <code>trust</code> extension provides a mechanism to verify image signatures using certificates and public keys.</p> <p>To enable image signature verification, you must add the <code>trust</code> attribute under <code>extensions</code> in the zot configuration file and enable one or more verification tools, as shown in the following example:</p> <pre><code>\"extensions\": {\n  \"trust\": {\n    \"enable\": true,\n    \"cosign\": true,\n    \"notation\": true\n  }\n}\n</code></pre> <p>You must also upload public keys (for <code>cosign</code>) or certificates (for <code>notation</code>) that can be used to verify the image signatures.  </p> <p>For detailed information about configuring image signature verification, see Verifying image signatures.</p> <p></p>"},{"location":"admin-guide/admin-configuration/#enabling-the-registrys-graphical-user-interface","title":"Enabling the registry's graphical user interface","text":"<p>Using the zot graphical user interface (GUI), a user can browse a zot registry for container images and artifacts.</p> <p>To configure zot's GUI, add the <code>ui</code> attribute under <code>extensions</code> in the configuration file, as shown in the following example:</p> <pre><code>\"extensions\": {\n  \"ui\": {\n    \"enable\": true\n  }\n}\n</code></pre> <p>The following table lists the configurable attributes of the <code>ui</code> extension.</p> Attribute Description <code>enable</code> If this attribute is missing, the zot GUI is disabled by default. The GUI can be enabled by including this attribute and setting it to <code>true</code>. <p></p>"},{"location":"admin-guide/admin-configuration/#scrubbing-the-image-registry","title":"Scrubbing the image registry","text":"<p>To check the integrity of the filesystem and the data in the registry, you can schedule a periodic scrub operation. The scrub process traverses the filesystem, verifying that all data blocks are readable. While running, the process may slightly reduce the registry performance.</p> <p>To enable scrubbing, add the <code>scrub</code> attribute under <code>extensions</code> in the configuration file, as shown in the following example:</p> <pre><code>\"extensions\": {\n  \"scrub\": {\n    \"enable\": true,\n    \"interval\": \"24h\"\n  }\n}\n</code></pre> <p>The following table lists the configurable attributes for scrubbing the registry.</p> Attribute Description <code>enable</code> If this attribute is missing, registry scrubbing is enabled by default. Scrubbing can be disabled by setting this attribute to <code>false</code>. <code>interval</code> The time interval between periodic scrub operations. This value must be at least two hours (<code>2h</code>). <p></p>"},{"location":"admin-guide/admin-configuration/#scheduling-background-tasks","title":"Scheduling background tasks","text":"<p>Some zot functions, such as garbage collection and registry synchronization, run as background tasks. These tasks are queued and executed by the scheduler. </p> <p>The scheduler is by default allowed to simultaneously run a maximum number of tasks equal to four times the number of CPUs available to the zot process. For most users, there should be no need to modify this maximum number. If such a need arises, you can configure a new maximum number of simultaneous tasks in the <code>numWorkers</code> property of the <code>scheduler</code> attribute in the configuration file, as shown in the following example.</p> <pre><code>{\n  \"distSpecVersion\": \"1.1.0-dev\",\n  \"scheduler\": {\n    \"numWorkers\": 3\n  },\n...\n}\n</code></pre> <p></p>"},{"location":"admin-guide/admin-configuration/#enhanced-searching-and-querying-images","title":"Enhanced searching and querying images","text":"<p>While basic searching is always enabled for images in the zot registry, you can enable enhanced registry searching and filtering using graphQL.</p> <p>Add the <code>search</code> attribute under <code>extensions</code> in the configuration file to enable and configure the enhanced search extension, as shown in the following example.</p> <pre><code>\"extensions\": {\n  \"search\": {\n    \"enable\": true,\n    \"cve\": {\n      \"updateInterval\": \"2h\"\n    }\n  }\n}\n</code></pre> <p>The following table lists the configurable attributes for enhanced search.</p> Attribute Description <code>enable</code> If this attribute is missing, enhanced search is enabled by default. Enhanced search can be disabled by setting this attribute to <code>false</code>. <code>cve</code> Extends enhanced search to allow searching of Common Vulnerabilities and Exposures (CVE). <code>updateInterval</code> Sets the interval at which the searchable database of CVE items is refreshed. <p></p>"},{"location":"admin-guide/admin-configuration/#setting-user-preferences","title":"Setting user preferences","text":"<p>The user preferences extension provides an API endpoint for adding configurable user preferences for a repository. This custom extension, not a part of the OCI distribution, is accessible only by authenticated users of the registry. Unauthenticated users are denied access.</p> <p>The user preferences extension is enabled by default when the <code>search</code> and <code>ui</code> extensions are enabled. There are no other configuration file fields for this extension.</p> <p>A <code>userprefs</code> API endpoint accepts as a query parameter an <code>action</code> to perform along with any other required parameters for the specified action. The actions currently implemented do not require an HTTP payload, nor do they return any related data other than an HTTP response code.</p>"},{"location":"admin-guide/admin-configuration/#current-functionality","title":"Current functionality","text":"<p>The current functions implemented by this extension include:</p> <ul> <li>Toggling the star (favorites) icon for a repository.</li> <li>Toggling the bookmark icon for a repository.</li> </ul>"},{"location":"admin-guide/admin-configuration/#toggle-repository-star","title":"Toggle repository star","text":"<p>This action sets the repository star property to <code>true</code> if it is <code>false</code>, and to <code>false</code> if it is <code>true</code>.</p> Action Parameter Parameter Description toggleStar repo The name of the repository whose star is to be changed <p>This example toggles a star on a repository named repoName:</p> <pre><code>PUT\nhttp://localhost:5000/v2/_zot/ext/userprefs?\naction=toggleStar&amp;repo=repoName\n</code></pre>"},{"location":"admin-guide/admin-configuration/#toggle-repository-bookmark","title":"Toggle repository bookmark","text":"<p>This action sets the repository bookmark property to <code>true</code> if it is <code>false</code>, and to <code>false</code> if it is <code>true</code>.</p> Action Parameter Parameter Description toggleBookmark repo The name of the repository whose bookmark is to be changed <p>This example toggles a bookmark on a repository named repoName:</p> <pre><code>PUT\nhttp://localhost:5000/v2/_zot/ext/userprefs?\naction=toggleBookmark&amp;repo=repoName\n</code></pre> <p></p>"},{"location":"admin-guide/admin-configuration/#verifying-the-configuration-file","title":"Verifying the configuration file","text":"<p>Before launching zot, verify the syntax of your configuration file using the following command:</p> <p><code>zot verify &lt;configfile&gt;</code></p> <p> Verifying the configuration file protects against operator errors and any conflicts arising from zot release version changes.</p> <p>After verifying your configuration file, you can launch zot with the following command:</p> <p><code>zot serve &lt;configfile&gt;</code></p>"},{"location":"admin-guide/admin-getting-started/","title":"Getting Started with zot Administration","text":"<p> This document helps you to deploy an appropriate zot image or to build zot if desired.</p> <p>After deploying zot, proceed to Configuring zot to choose and configure the features you need.</p>"},{"location":"admin-guide/admin-getting-started/#installing-zot","title":"Installing zot","text":""},{"location":"admin-guide/admin-getting-started/#how-to-get-zot","title":"How to get zot","text":"<p>The zot project is hosted on GitHub at project-zot. From GitHub, you can download zot executable binary images or full source code.</p> <p></p>"},{"location":"admin-guide/admin-getting-started/#supported-platforms","title":"Supported platforms","text":"<p>zot is officially supported on Linux and Apple MacOS platforms, using Intel or ARM processors. However, development should be possible on any platform that supports the <code>golang</code> toolchain.</p> OS ARCH Platform linux amd64 Intel-based Linux servers linux arm64 ARM-based servers and Raspberry Pi4 darwin amd64 Intel-based MacOS darwin arm64 ARM-based MacOS freebsd amd64 Intel-based FreeBSD<sup>*</sup> freebsd arm64 ARM-based FreeBSD<sup>*</sup> <p><sup>*</sup> NOTE: While binary images are available for FreeBSD, building container images is not supported at this time.</p>"},{"location":"admin-guide/admin-getting-started/#about-binary-images","title":"About binary images","text":"<p>Executable binary zot images are available for multiple platforms and architectures and with full or minimal implementations.</p> <p>Refer to Released Images for zot for information about available zot images along with information about image variations, image locations, and image naming formats.</p>"},{"location":"admin-guide/admin-getting-started/#deployment-methods","title":"Deployment methods","text":"<p>Several options exist for deploying zot:</p> <ul> <li> <p>You can launch a zot binary as a container service using     a container management tool such as Podman, Docker, or Helm.</p> </li> <li> <p>You can launch zot as a host-level service by downloading     a binary image and running it as a systemd service.</p> </li> <li> <p>You can copy or clone the full zot source code and build     an image with custom build flags.</p> </li> </ul>"},{"location":"admin-guide/admin-getting-started/#deploying-a-zot-binary-image","title":"Deploying a zot binary image","text":"<p>Executable binary images for supported server platforms and architectures are available from the zot package repository in GitHub.</p> <p>You can download the appropriate binary image and run it directly on your server, or you can use a container management tool such as Podman, runc, Helm, or Docker to fetch and deploy the image in a container on your server.</p> <p> For convenience, you can rename the binary image file to simply <code>zot</code>.</p>"},{"location":"admin-guide/admin-getting-started/#example-deploying-with-a-container-manager","title":"Example: Deploying with a container manager","text":"<p>Using a container manager such as Podman, runc, Helm, or Docker, you can install a zot binary image, as in the following examples.</p> <p>Using podman</p> <pre><code>podman run -p 5000:5000 ghcr.io/project-zot/zot-linux-amd64:latest\n\npodman run -p 5000:5000 ghcr.io/project-zot/zot-minimal-linux-amd64:latest\n</code></pre> Click here to view an example of deploying using podman. <p> </p> <p>Using docker</p> <pre><code>docker run -p 5000:5000 ghcr.io/project-zot/zot-linux-amd64:latest\n</code></pre> <p>Each of these example commands pulls a zot binary image from the GitHub Container Registry (ghcr.io) and launches a zot image registry at <code>http://localhost:5000</code>.</p> Click here to view an example of deploying using docker. <p> </p>"},{"location":"admin-guide/admin-getting-started/#building-zot-from-source","title":"Building zot from source","text":""},{"location":"admin-guide/admin-getting-started/#prerequisites","title":"Prerequisites","text":""},{"location":"admin-guide/admin-getting-started/#install-golang","title":"Install golang","text":"<p>Follow the golang instructions to install the <code>golang</code> toolchain. After installation, make sure that the <code>path</code> environment variable or your IDE can find the toolchain.</p> <p> You must use a golang version of at least the minimum specified in go.mod or the build will fail.</p>"},{"location":"admin-guide/admin-getting-started/#building-an-executable-binary-from-source","title":"Building an executable binary from source","text":"<p>Download or clone the full zot project from GitHub at project-zot. To clone the zot project from GitHub, use this command:</p> <pre><code>git clone https://github.com/project-zot/zot.git\n</code></pre> <p>To build zot, execute the <code>make</code> command in the <code>zot</code> directory using the following general syntax:</p> <p><code>make OS=os ARCH=architecture {binary | binary-minimal}</code></p> <ul> <li> <p>The operating system and architecture options are listed in the     Supported platforms and     architectures     table. If an option is not specified, the defaults are <code>linux</code> and     <code>amd64</code>.</p> </li> <li> <p>The <code>binary</code> option builds the full zot binary image with     all extensions.</p> </li> <li> <p>The <code>binary-minimal</code> option builds the minimal distribution-spec     conformant zot binary image without extensions, reducing     the attack surface.</p> </li> </ul> <p>For example, to build a zot image with extensions for an Intel-based linux server, use the following command:</p> <pre><code>make OS=linux ARCH=amd64 binary\n</code></pre> <p>The <code>make</code> command builds an executable image in the <code>zot/bin</code> directory. The original filename of the zot executable image will indicate the build options. For example, the filename of an Intel-based linux minimal image is <code>zot-linux-amd64-minimal</code>.</p> <p> For convenience, you can rename the binary image file to simply <code>zot</code>.</p>"},{"location":"admin-guide/admin-getting-started/#building-a-zot-container-image-from-source","title":"Building a zot container image from source","text":"<p>with Stacker</p> <p>Using the settings in stacker.yaml, you can build a container image that runs the latest zot by running the following command:</p> <pre><code>make binary-stacker\n</code></pre> <p>with Docker</p> <p>A sample Dockerfile  is provided on the zot project page in GitHub. You can edit the sample file with your specific values, such as the desired operating system, hardware architecture, and full or minimal build, as in this example:</p> <pre><code>ARG OS=linux\nARG ARCH=amd64\n\nRUN make COMMIT=$COMMIT OS=$OS ARCH=$ARCH clean binary-minimal\n</code></pre> <p>Using your edited Dockerfile, you can build a container image that runs the latest zot by running the following command:</p> <pre><code>make image\n</code></pre>"},{"location":"admin-guide/admin-getting-started/#deploying-the-container-image","title":"Deploying the container image","text":"<p>Deploy the image using your container manager, such as Podman, runc, Helm, or Docker, as in these examples:</p> <p>with Podman</p> <pre><code>podman run --rm -it -p 5000:5000 -v $(pwd)/registry:/var/lib/registry zot:latest\n</code></pre> <p>with Docker</p> <pre><code>docker run --rm -it -p 5000:5000 -v $(pwd)/registry:/var/lib/registry zot:latest\n</code></pre> <p>A container image built with the sample Dockerfile and deployed with the example command results in a running registry at <code>http://localhost:5000</code>. Registry content is stored at <code>.registry</code>, which is bind mounted to <code>/var/lib/registry</code> in the container. By default, auth is disabled. As part of the build, a YAML configuration file is created at <code>/etc/zot/config.yml</code> in the container.</p> <p>You can override the configuration file with custom configuration settings in the deployment command and in a local configuration file as shown in this example:</p> <pre><code>podman run --rm -p 8080:8080 \\\n  -v $(pwd)/custom-config.yml:/etc/zot/config.yml \\\n  -v $(pwd)/registry:/tmp/zot \\\n  zot:latest\n</code></pre> <p>This command causes the registry to listen on port 8080 and to use <code>/tmp/zot</code> for content storage.</p>"},{"location":"admin-guide/admin-getting-started/#additional-recommended-steps","title":"Additional recommended steps","text":"<p>We recommend that, when deploying zot, you also install the command line (zli) and benchmarking (zb) packages.</p>"},{"location":"admin-guide/admin-getting-started/#launching-zot","title":"Launching zot","text":"<p>The zot service is initiated with the <code>zot serve</code> command followed by the name of a configuration file, as in this example:</p> <p><code>zot serve config.yml</code></p> <p> For convenience, you can rename the binary image file to simply <code>zot</code>.The instructions and examples in this guide use <code>zot</code> as the name of the zot executable file and do not include the path to the executable file.</p>"},{"location":"admin-guide/admin-getting-started/#next-steps","title":"Next Steps","text":""},{"location":"admin-guide/admin-getting-started/#configuring-zot","title":"Configuring zot","text":"<p>You configure zot primarily through adding and modifying settings in the zot configuration file. The configuration file is a JSON or YAML file that contains all configuration settings for zot functions. </p> <p>When you first build zot or deploy an image or container from the distribution, a basic configuration file <code>config.json</code> is created. You can modify the initial file or you can create a new file.</p> <p>Follow the instructions in Configuring zot, to compose a configuration file with the settings and features you require for your zot registry server.</p>"},{"location":"articles/authn-authz/","title":"User Authentication and Authorization with zot","text":"<p> A robust set of authentication/authorization options are supported:</p> <ul> <li> <p>Authentication</p> <ul> <li>TLS, including mTLS</li> <li>Username/password or token-based user authentication</li> <li>LDAP</li> <li>htpasswd</li> <li>OAuth2 with bearer token</li> </ul> </li> <li> <p>Authorization</p> <ul> <li>Powerful identity-based access controls for repositories or specific repository paths</li> <li>OpenID/OAuth2 social login with Google, GitHub, GitLab, and dex</li> </ul> </li> </ul> <p>The zot configuration model supports both authentication and authorization. Authentication credentials allow access to zot HTTP APIs. Authorization policies provide fine-grained control of the actions each authenticated user can perform in the registry.</p>"},{"location":"articles/authn-authz/#authentication","title":"Authentication","text":""},{"location":"articles/authn-authz/#tls-authentication","title":"TLS authentication","text":"<p>Because authentication credentials are passed over HTTP, it is imperative that TLS be enabled. You can enable and configure TLS authentication in the zot configuration file, as shown in the following example.</p> <pre><code>\"http\": {\n...\n  \"tls\": {\n    \"cert\": \"/etc/zot/certs/server.cert\",\n    \"key\": \"/etc/zot/certs/server.key\"\n  }\n</code></pre> <p>See Mutual TLS authentication for additional information about TLS.</p>"},{"location":"articles/authn-authz/#http-basic-authentication","title":"HTTP basic authentication","text":"<p>When basic HTTP authentication is used, the username and password credentials are joined by a colon (<code>:</code>), base64 encoded, and passed in the HTTP Authorization header.</p>"},{"location":"articles/authn-authz/#http-bearer-authentication","title":"HTTP bearer authentication","text":"<p>To avoid passing the username and password credentials for every HTTP request, a zot client can use bearer token-based authentication. In this method, the client first authenticates with a token server and receives a short-lived token. The client then passes this token in the HTTP Authorization header, specifying <code>Bearer</code> as the authentication scheme.</p> <p>Configure bearer authentication in the zot configuration file as shown in this example.</p> <pre><code>\"http\": {\n...\n  \"auth\": {\n    \"bearer\": {\n      \"realm\": \"https://auth.myreg.io/auth/token\",\n        \"service\": \"myauth\",\n        \"cert\": \"/etc/zot/auth.crt\"\n    }\n  }\n</code></pre> <p>The following table lists the configurable attributes.</p> Attribute Description <code>realm</code> A string typically related to the authentication scheme (BASIC and BEARER). <code>service</code> The name of the authentication service. <code>cert</code> The path and filename of the server\u2019s SSL/TLS certificate. <p></p>"},{"location":"articles/authn-authz/#mutual-tls-authentication","title":"Mutual TLS authentication","text":"<p>zot supports basic TLS and password-less mutual TLS authentication (mTLS). Specifying a <code>cacert</code> file in the TLS section of the zot configuration file enables mTLS. The <code>cacert</code> parameter is used to validate the client-side TLS certificates.</p> <pre><code>\"http\": {\n...\n  \"tls\": {\n    \"cert\": \"/etc/zot/certs/server.cert\",\n    \"key\": \"/etc/zot/certs/server.key\",\n    \"cacert\": \"/etc/zot/certs/ca.cert\"\n  }\n</code></pre> <p>The following table lists the configurable attributes.</p> Attribute Description <code>cert</code> The path and filename of the server\u2019s SSL/TLS certificate. <code>key</code> The path and filename of the server\u2019s registry key. <code>cacert</code> The path and filename of the server\u2019s <code>cacerts</code> file, which contains trusted certificate authority (CA) certificates."},{"location":"articles/authn-authz/#preventing-automated-attacks-with-failure-delay","title":"Preventing automated attacks with failure delay","text":"<p>To help prevent automated attacks, you can add a delayed response to an authentication failure. Configure the <code>failDelay</code> attribute in the configuration file as shown in the following example.</p> <pre><code>\"http\": {\n  \"auth\": {\n    \"failDelay\": 5\n  }\n}\n</code></pre> <p>The <code>failDelay</code> attribute specifies a waiting time, in seconds, before zot sends a failure notification to an authenticating user who has been denied access.</p>"},{"location":"articles/authn-authz/#server-side-authentication","title":"Server-side authentication","text":"<p>You can implement server-side authentication for zot using <code>htpasswd</code> or LDAP or both.</p> <p>  When both <code>htpasswd</code> and LDAP configuration are specified, LDAP authentication is given preference. Because <code>htpasswd</code> authentication is strictly local and requires no remote service, <code>htpasswd</code> serves as a fail-safe authentication mechanism should LDAP become unavailable.</p>"},{"location":"articles/authn-authz/#ldap","title":"LDAP","text":"<p>zot supports integration with an LDAP-based authentication service such as Microsoft Windows Active Directory (AD). Enable and configure LDAP authentication in the zot configuration file, as shown in the following example.</p> <pre><code>\"http\": {\n...\n  \"auth\": {\n    \"ldap\": {\n      \"credentialsFile\": \"examples/config-ldap-credentials.json\",\n      \"address\": \"ldap.example.org\",\n      \"port\": 389,\n      \"startTLS\": false,\n      \"baseDN\": \"ou=Users,dc=example,dc=org\",\n      \"userAttribute\": \"uid\",\n      \"userFilter\": \"(!(nsaccountlock=TRUE))\",\n      \"userGroupAttribute\": \"memberOf\",\n      \"skipVerify\": false,\n      \"subtreeSearch\": true\n    }\n  }\n}\n</code></pre> <p>The following table lists the configurable attributes for LDAP authentication.</p> Attribute Description <code>credentialsFile</code> The path to a file containing the bind credentials for LDAP. <code>address</code> The IP address or hostname of the LDAP server. <code>port</code> The port number used by the LDAP service. <code>startTLS</code> Set to <code>true</code> to enable TLS communication with the LDAP server. <code>baseDN</code> Starting location within the LDAP directory for performing user searches. <code>userAttribute</code> Attribute name used to obtain the username. <code>userFilter</code> Optional user filter, which would be used in addition to <code>userAttribute</code> <code>userGroupAttribute</code> Attribute name used to obtain groups to which a user belongs. <code>skipVerify</code> Skip TLS verification. <code>subtreeSearch</code> Set to <code>true</code> to expand the scope for search to include subtrees of the base DN. <p>To allow for separation of configuration and credentials, the credentials for the LDAP server are specified in a separate file, as shown in the following example. </p> <pre><code>{\n  \"bindDN\":\"cn=ldap-searcher,ou=Users,dc=example,dc=org\",\n  \"bindPassword\":\"ldap-searcher-password\"\n}\n</code></pre> <p>The following table lists the configurable attributes of the LDAP credentials file.</p> Attribute Description <code>bindDN</code> Base Distinguished Name for the LDAP search. <code>bindPassword</code> Password of the bind LDAP user."},{"location":"articles/authn-authz/#htpasswd","title":"htpasswd","text":"<p>Enable and configure <code>htpasswd</code> authentication in the zot configuration file, as shown in the following example.</p> <ol> <li> <p>Create and store an <code>htpasswd</code> file on the server.</p> <pre><code>$ htpasswd -bBn &lt;username&gt; &lt;password&gt; &gt;&gt; /etc/zot/htpasswd\n</code></pre> <p> For strong security, make sure to use the -B option, specifying the bcrypt hashing algorithm. This is the only algorithm supported by zot for <code>htpasswd</code>.</p> </li> <li> <p>Enable <code>htpasswd</code> authentication and configure the path to the     <code>htpasswd</code> authentication in the zot configuration file.</p> <pre><code>\"http\": {\n...\n  \"auth\": {\n      \"htpasswd\": {\n        \"path\": \"/etc/zot/htpasswd\"\n      },\n</code></pre> <p>The <code>path</code> attribute specifies the path and filename of the <code>htpasswd</code> file, which contains user names and hashed passwords. </p> </li> </ol>"},{"location":"articles/authn-authz/#authorization","title":"Authorization","text":"<p>With an access scheme that relies solely on authentication, any authenticated user would be given complete access to the registry. To better control access, zot supports identity-based repository-level access control (authorization) policies. The access control policy is a function of repository, user, and the action being performed on that repository.</p>"},{"location":"articles/authn-authz/#access-control-policies","title":"Access control policies","text":"<p>Five identity-based types of access control policies are supported:</p> Policy type Attribute Access allowed Default <code>defaultPolicy</code> The default policy specifies what actions are allowed if a user is authenticated but does match any user-specific policy. User-specific <code>users</code>, <code>actions</code> A user-specific policy specifies access and actions for explicitly named users. Group-specific <code>groups</code>, <code>actions</code> A group-specific policy specifies access and actions for explicitly named groups. Anonymous <code>anonymousPolicy</code> An anonymous policy specifies what an unauthenticated user is allowed to do. This is an appropriate policy when you want to grant open read-only access to one or more repositories. Metrics <code>metrics</code> The metrics policy is a access control policy which grants the privilege to read data from the metrics endpoint. Admin <code>adminPolicy</code> The admin policy is a global access control policy that grants privileges to perform actions on any repository. <p>Access control is organized by repositories, users, and their actions. Most users of a particular repository will have similar access control requirements and can be served by a repository-specific <code>defaultPolicy</code>. Should a user require an exception to the default policy, a user-specific or group-specific override policy can be configured. </p> <p>With an <code>anonymousPolicy</code>, a repository can allow anonymous actions which do not require user authentication. Finally, one or more users can be designated as administrators, to whom the global <code>adminPolicy</code> applies.</p> <p>A user's access to a particular repository is evaluated first by whether a user-specific policy exists, then by group-specific policies, and then (in order) by default and admin policies.</p> <p>A group-specific policy can be applied within any type of access policy, including default or admin policies. The group policy name can also be used with LDAP.</p>"},{"location":"articles/authn-authz/#configuring-access-control","title":"Configuring access control","text":"<p>User identity or group identity can be used as an authorization criterion for allowing actions on one or more repository paths. For specific users, you can choose to allow any combination of read, create, update, or delete actions on specific paths.</p> <p>When you define policies for specific repository paths, the paths can be specified explicitly or by using <code>glob</code> patterns with simple or recursive wildcards. When a repository path matches more than one path description, authorization is granted based on the policy of the longest (most specific) path matched. For example, if policies are defined for path descriptions <code>**</code> and <code>repos2/repo,</code> the <code>repos2/repo</code> path will match both <code>**</code> and <code>repos2/repo</code> descriptions. In this case, the <code>repos2/repo</code> policy will be applied because it is longer.</p> <p>Note that <code>**</code> effectively defines the default policy, as it matches any path not matched by any other per-repository policy. To override all other policies, you can specify a global admin policy.</p> <p> Always include the read action in any policy that you define. The create, update, and delete actions cannot be used without the read action.</p>"},{"location":"articles/authn-authz/#example-access-control-configuration","title":"Example: Access control configuration","text":"<p>Use the <code>accessControl</code> attribute in the configuration file to define a set of identity-based authorization policies, as shown in the following example.</p> <pre><code>\"http\": {\n...\n  \"accessControl\": {\n    \"groups\": {\n      \"group1\": {\n        \"users\": [\"bob\", \"mary\"]\n      },\n      \"group2\": {\n        \"users\": [\"alice\", \"mallory\", \"jim\"]\n      }\n    },\n    \"metrics\":{\n        \"users\": [\"john\"]\n    },\n    \"repositories\": {\n      \"**\": {\n        \"policies\": [{\n          \"users\": [\"charlie\"],\n          \"groups\": [\"group2\"],\n          \"actions\": [\"read\", \"create\", \"update\"]\n        }],\n        \"defaultPolicy\": [\"read\", \"create\"]\n      },\n      \"tmp/**\": {\n        \"anonymousPolicy\": [\"read\"],\n        \"defaultPolicy\": [\"read\", \"create\", \"update\"]\n      },\n      \"infra/*\": {\n        \"policies\": [{\n            \"users\": [\"alice\", \"bob\"],\n            \"actions\": [\"create\", \"read\", \"update\", \"delete\"]\n          },\n          {\n            \"users\": [\"mallory\"],\n            \"groups\": [\"group1\"],\n            \"actions\": [\"create\", \"read\"]\n          }\n        ],\n        \"defaultPolicy\": [\"read\"]\n      },\n      \"repos2/repo\": {\n        \"policies\": [{\n            \"users\": [\"bob\"],\n            \"actions\": [\"read\", \"create\"]\n          },\n          {\n            \"users\": [\"mallory\"],\n            \"actions\": [\"create\", \"read\"]\n          }\n        ],\n        \"defaultPolicy\": [\"read\"]\n      }\n    },\n    \"adminPolicy\": {\n      \"users\": [\"admin\"],\n      \"actions\": [\"read\", \"create\", \"update\", \"delete\"]\n    }\n  }\n</code></pre> <p>In this example, five policies are defined:</p> <ul> <li> <p>The default policy (<code>**</code>) gives all authenticated users the ability to read or create content, while giving user \"charlie\" and those in \"group2\" the additional ability to update content.</p> </li> <li> <p>The policy for <code>tmp/**</code> matches all repositories under <code>tmp</code> recursively and allows all authenticated users to read, create, or update content in those repositories. Unauthenticated users have read-only access to these repositories.</p> </li> <li> <p>The policy for <code>infra/*</code> matches all repositories directly under <code>infra.</code> Separate policies are defined for specific users, along with a default read-only policy for all other users.</p> </li> <li> <p>The policy for <code>repos2/repo</code> matches only that specific repository.</p> </li> <li> <p>An admin policy (<code>adminPolicy</code>) gives the user \"admin\" global authorization to read, create, update, or delete content in any repository, overriding all other policies.</p> </li> <li> <p>A metrics policy (<code>metrics</code>) gives the user \"john\" permissions to read data from the metrics endpoint for monitoring purposes.</p> </li> </ul> <p>  In case of LDAP groups, the group FQDN must be used in the zot configuration. For example <code>\"groups\": [\"cn=ldap-group,ou=Groups,dc=example,dc=org\"],</code>.</p> <p>  In releases prior to zot v2.0.0, authorization policies were defined directly under the <code>accessControl</code> key in the zot configuration file.  Beginning with v2.0.0, the set of authorization policies are now defined under a new <code>repositories</code> key.</p> <p></p>"},{"location":"articles/authn-authz/#social-login-using-openidoauth2","title":"Social login using OpenID/OAuth2","text":"<p>Social login is an authentication/authorization method in which your existing credentials for another site or service can be used to log in to a service such as zot. For example, you can log in to zot using your GitHub account credentials, and zot will contact GitHub to verify your identity using OAuth 2.0 and OpenID Connect (OIDC) protocols. </p> <p>Several social login providers are supported by zot:</p> <ul> <li>github</li> <li>google</li> <li>gitlab</li> <li>oidc (for example, dex)</li> </ul> <p>The following example shows the zot configuration for these providers:</p> <pre><code>{\n  \"http\": {\n    \"auth\": {\n      \"openid\": {\n        \"providers\": {\n          \"github\": {\n            \"clientid\": &lt;client_id&gt;,\n            \"clientsecret\": &lt;client_secret&gt;,\n            \"scopes\": [\"read:org\", \"user\", \"repo\"]\n          },\n          \"google\": {\n            \"issuer\": \"https://accounts.google.com\",\n            \"clientid\": &lt;client_id&gt;,\n            \"clientsecret\": &lt;client_secret&gt;,\n            \"scopes\": [\"openid\", \"email\"]\n          },\n          \"gitlab\": {\n            \"issuer\": \"https://gitlab.com\",\n            \"clientid\": &lt;client_id&gt;,\n            \"clientsecret\": &lt;client_secret&gt;,\n            \"scopes\": [\"openid\", \"read_api\", \"read_user\", \"profile\", \"email\"]\n          },\n          \"oidc\": {\n            \"issuer\": \"http://&lt;zot-server&gt;:5556/dex\",\n            \"clientid\": &lt;client_id&gt;,\n            \"clientsecret\": &lt;client_secret&gt;,\n            \"keypath\": \"\",\n            \"scopes\": [\"openid\", \"profile\", \"email\", \"groups\"]\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"articles/authn-authz/#using-google-github-or-gitlab","title":"Using Google, GitHub, or GitLab","text":"<p>A client logging into zot by social login must specify a supported OpenID/OAuth2 provider as a URL query parameter.  A client logging in using Google, GitHub, or GitLab must additionally specify a callback URL for redirection to a zot page after a successful authentication. </p> <p>The login URL using Google, GitHub, or GitLab uses the following format:</p> <pre><code>http://&lt;zot-server&gt;/auth/login?provider=&lt;provider&gt;&amp;callback_ui=&lt;zot-server&gt;/&lt;page&gt;\n</code></pre> <p>For example, a user logging in to the zot home page using GitHub as the authentication provider sends this URL:</p> <pre><code>http://zot.example.com:8080/auth/login?provider=github&amp;callback_ui=http://zot.example.com:8080/home\n</code></pre> <p>Based on the specified provider, zot redirects the login to a provider service with the following URL:</p> <pre><code>http://&lt;zot-server&gt;/zot/auth/callback/&lt;provider&gt;\n</code></pre> <p>For the GitHub authentication example:</p> <pre><code>http://zot.example.com:8080/zot/auth/callback/github\n</code></pre> <p> If your network policy doesn't allow inbound connections, the callback will not work and this authentication method will fail.</p>"},{"location":"articles/authn-authz/#using-dex","title":"Using dex","text":"<p>dex is an identity service that uses OpenID Connect (OIDC) to drive authentication for client apps, such as zot. While this section shows how to use dex with zot, zot supports other OIDC services as well.</p> <p>Like zot, dex uses a configuration file for setup. To specify zot as a client in dex, configure a <code>staticClients</code> entry in the dex configuration file with a zot callback, such as the following example in the dex configuration file:</p> <pre><code>staticClients:\n  - id: zot-client\n    redirectURIs:\n      - 'http://zot.example.com:8080/zot/auth/callback/oidc'\n    name: 'zot'\n    secret: ZXhhbXBsZS1hcHAtc2VjcmV0\n</code></pre> <p>In the zot configuration file, configure dex as an OpenID auth provider as in the following example:</p> <pre><code>  \"http\": {\n    \"auth\": {\n      \"openid\": {\n        \"providers\": {\n          \"oidc\": {\n            \"name\": \"Corporate SSO\",\n            \"issuer\": \"http://&lt;zot-server&gt;:5556/dex\",\n            \"clientid\": \"zot-client\",\n            \"clientsecret\": \"ZXhhbXBsZS1hcHAtc2VjcmV0\",\n            \"keypath\": \"\",\n            \"scopes\": [\"openid\", \"profile\", \"email\", \"groups\"]\n          }\n        }\n      }\n    }\n  }\n</code></pre> <p>A user logging in to zot using dex OpenID authentication sends a URL with dex as a URL query parameter, such as the following example:</p> <p><code>http://zot.example.com:8080/auth/login?provider=oidc</code></p> <p>For detailed information about configuring dex service, see the dex Getting Started documentation.</p>"},{"location":"articles/authn-authz/#using-openidoauth2-when-zot-is-behind-a-proxy-or-load-balancer","title":"Using OpenID/OAuth2 when zot is behind a proxy or load balancer","text":"<p>When the zot registry is running behind a proxy or load balancer, you must provide an external URL for OpenID/OAuth2 clients to redirect back to zot. This <code>externalUrl</code> attribute is the URL of the registry, as shown in this example:</p> <pre><code>  \"http\": {\n    \"address\": \"0.0.0.0\",\n    \"port\": \"8080\",\n    \"externalUrl\": \"https://zot.example.com\",\n    \"auth\": {\n      \"openid\": {\n        \"providers\": {\n          \"github\": {\n            \"clientid\": &lt;client_id&gt;,\n            \"clientsecret\": &lt;client_secret&gt;,\n            \"scopes\": [\"read:org\", \"user\", \"repo\"]\n          }\n        }\n      }\n    }\n  }\n</code></pre>"},{"location":"articles/benchmarking-with-zb/","title":"Benchmarking zot with zb","text":"<p> The zb tool is useful for benchmarking OCI registry workloads in scenarios such as the following:</p> <ul> <li>comparing configuration changes</li> <li>comparing software versions</li> <li>comparing hardware/deployment environments</li> <li>comparing with other registries</li> </ul> <p>With the zb tool, you can benchmark a zot registry or any other container image registry that conforms to the OCI Distribution Specification published by the Open Container Initiative (OCI).</p> <p> We recommend installing and benchmarking with zb when you install zot.</p>"},{"location":"articles/benchmarking-with-zb/#how-to-get-zb","title":"How to get zb","text":"<p>The zb project is hosted with zot on GitHub at project-zot. From GitHub, you can download the zb binary or you can build zb from the source. You can also directly run the released docker image.</p> <p></p>"},{"location":"articles/benchmarking-with-zb/#supported-platforms-and-architectures","title":"Supported platforms and architectures","text":"<p>zb is supported for the following operating systems and platform architectures:</p> OS ARCH Platform linux amd64 Intel-based Linux servers linux arm64 ARM-based servers and Raspberry Pi4 darwin amd64 Intel-based MacOS darwin arm64 ARM-based MacOS"},{"location":"articles/benchmarking-with-zb/#downloading-zb-binaries","title":"Downloading zb binaries","text":"<p>Download the executable binary for your server platform and architecture under \"Assets\" on the GitHub zot releases page.</p> <p>The binary image is named using the target platform and architecture from the Supported platforms and architectures table. For example, the binary for an Intel-based MacOS server is <code>zb-darwin-amd64</code>.</p>"},{"location":"articles/benchmarking-with-zb/#building-zb-from-source","title":"Building zb from source","text":"<p>To build the zb binary, copy or clone the zot project from GitHub and execute the <code>make bench</code> command in the <code>zot</code> directory. Use the same command options that you used to build zot, as shown:</p> <p><code>make OS=os ARCH=architecture bench</code></p> <p>For example, the following command builds zb for an Intel-based MacOS server:</p> <p><code>make OS=darwin ARCH=amd64 bench</code></p> <p>In this example, the resulting executable file is <code>zb-darwin-amd64</code> in the <code>zot/bin</code> directory.</p> <p> A sample Dockerfile for zb is available at Dockerfile-zb.</p>"},{"location":"articles/benchmarking-with-zb/#running-zb","title":"Running zb","text":"<p>The original filename of the executable file will reflect the build options, such as <code>zb-linux-amd64.</code> For convenience, you can rename the executable to simply <code>zb</code>.</p> <p> The instructions and examples in this guide use <code>zb</code> as the name of the executable file.</p>"},{"location":"articles/benchmarking-with-zb/#usage","title":"Usage","text":"<p>To view the usage and options of <code>zb</code>, run the command with the <code>--help</code> option:</p> <p><code>bin/zb --help</code></p> <p>Command output:</p> <pre><code>    Usage:\n      zb &lt;url&gt; [flags]\n\n    Flags:\n      -A, --auth-creds string \u00a0 \u00a0 \u00a0Use colon-separated BASIC auth creds\n      -c, --concurrency int \u00a0 \u00a0 \u00a0 \u00a0Number of multiple requests to make at a time (default 1)\n \u00a0    -h, --help \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 help for zb\n \u00a0    -o, --output-format string \u00a0 Output format of test results: stdout (default), json, ci-cd\n \u00a0    -r, --repo string \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Use specified repo on remote registry for test data\n \u00a0    -n, --requests int \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Number of requests to perform (default 1)\n \u00a0    -s, --src-cidr string \u00a0 \u00a0 \u00a0 \u00a0Use specified cidr to obtain ips to make requests from, src-ips and src-cidr are mutually exclusive\n \u00a0    -i, --src-ips string \u00a0 \u00a0 \u00a0 \u00a0 Use colon-separated ips to make requests from, src-ips and src-cidr are mutually exclusive\n \u00a0    -v, --version \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Show the version and exit\n \u00a0    -d, --working-dir string \u00a0 \u00a0 Use specified directory to store test data\n</code></pre>"},{"location":"articles/benchmarking-with-zb/#example","title":"Example","text":"<p>The following example executes a benchmark operation using zb.</p> <p><code>bin/zb -c 10 -s 127.0.10.0/24 -n 1000 http://localhost:8080</code></p> <p>You can also run the released docker image.</p> <p><code>docker run --net=host -it ghcr.io/project-zot/zb-linux-amd64:latest -c 10 -n 1000 -s 127.0.10.0/24 http://localhost:8080</code></p> <p>Command output:</p> <pre><code>    Registry URL: http://localhost:8080\n\n    Concurrency Level: 2\n    Total requests:    100\n    Working dir:\n\n    ========\n    Test name:            Get Catalog\n    Time taken for tests: 45.397205ms\n    Complete requests:    100\n    Failed requests:      0\n    Requests per second:  2202.7788\n\n    2xx responses: 100\n\n    min: 402.259\u00b5s\n    max: 3.295887ms\n    p50: 855.045\u00b5s\n    p75: 971.709\u00b5s\n    p90: 1.127389ms\n    p99: 3.295887ms\n\n    ========\n    Test name:            Push Monolith 1MB\n    Time taken for tests: 952.336383ms\n    Complete requests:    100\n    Failed requests:      0\n    Requests per second:  105.00491\n\n    2xx responses: 100\n\n    min: 11.125673ms\n    max: 26.375356ms\n    p50: 18.917253ms\n    p75: 21.753441ms\n    p90: 24.02137ms\n    p99: 26.375356ms\n\n    ...\n</code></pre>"},{"location":"articles/building-ci-cd-pipeline/","title":"Building an OCI-native Container Image CI/CD Pipeline","text":"<p> An OCI-native secure container image build/delivery pipeline using the following tools:</p> <ul> <li> <p><code>stacker</code> for building OCI images</p> </li> <li> <p><code>zot</code> as a vendor-neutral OCI image registry server</p> </li> <li> <p><code>skopeo</code> for performing repository interactions</p> </li> <li> <p><code>cosign</code> for container signing and verification</p> </li> <li> <p><code>cri-o</code> for deploying container images</p> </li> <li> <p><code>cosigned</code> for validating container images before deployment</p> </li> </ul> <p>The Open Container Initiative (OCI) is an open governance structure for the express purpose of creating open industry standards around container formats and runtimes.</p> <p>This document describes a step-by-step procedure towards achieving an OCI-native secure software supply chain using zot in collaboration with other open source tools. The following diagram shows a portion of the CI/CD pipeline.</p> <p></p>"},{"location":"articles/building-ci-cd-pipeline/#build-images","title":"Build images","text":"<p><code>stacker</code> is a standalone tool for building OCI images via a declarative <code>yaml</code> format. The output of the build process is a container image in an OCI layout.</p> <p>example: stacker build command</p> <pre><code>stacker build -f &lt;stackerfile.yaml&gt;\n</code></pre>"},{"location":"articles/building-ci-cd-pipeline/#image-registry","title":"Image registry","text":"<p>zot is a production-ready vendor-neutral OCI image registry server purely based on the OCI Distribution Specification. If <code>stacker</code> is used to build the OCI image, it can also be used to publish the built image to an OCI registry.</p> <p>example: stacker publish command</p> <pre><code>stacker publish --url &lt;url&gt; --username &lt;user&gt; --password &lt;password&gt;\n</code></pre> <p>Alternatively, you can use <code>skopeo</code>, a command line utility that performs various operations on container images and image repositories.</p> <p>example: skopeo copies an image to a registry</p> <pre><code>skopeo copy --format=oci oci:&lt;oci-dir&gt;/image:tag \\\n  docker://&lt;zot-server&gt;/image:tag\n</code></pre> Click here to view an example of pushing and pulling an image using skopeo. <p> </p>"},{"location":"articles/building-ci-cd-pipeline/#signing-images","title":"Signing images","text":"<p><code>cosign</code> is a tool that performs container signing, verification, and storage in an OCI registry.</p> <p>example: cosign generates keys and signs an image in the registry</p> <pre><code>cosign generate-key-pair\n\ncosign sign --key cosign.key &lt;zot-server&gt;/image:tag\n</code></pre> Click here to view an example of cosign operations. <p> </p>"},{"location":"articles/building-ci-cd-pipeline/#deploying-container-images","title":"Deploying container images","text":"<p><code>cri-o</code> is an implementation of the Kubernetes Container Runtime Interface (CRI) to enable using OCI compatible runtimes. It is a lightweight alternative to using Docker as the runtime for Kubernetes.</p> <p> zot is compatible with kubernetes/cri-o using <code>docker://</code> transport, which is the default.</p> <p>example: kubelet configuration file</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: example-pod\nspec:\n  containers:\n  - name: example-container\n    image: &lt;zot-server&gt;/image:tag\n</code></pre>"},{"location":"articles/building-ci-cd-pipeline/#container-image-verification","title":"Container image verification","text":"<p><code>cosigned</code> is an image admission controller that validates container images before deploying them.</p> <p>example: install cosigned using Helm</p> <pre><code>kubectl create namespace cosign-system\n\nkubectl create secret generic mysecret -n \\\n  cosign-system --from-file=cosign.pub=./cosign.pub\n\nhelm repo add sigstore https://sigstore.github.io/helm-charts\n\nhelm repo update\n\nhelm install cosigned -n cosign-system sigstore/cosigned \\\n  --devel --set cosign.secretKeyRef.name=mysecret\n</code></pre>"},{"location":"articles/clustering/","title":"zot Clustering","text":"<p> High availability of the zot registry is supported by the following features:</p> <ul> <li>Stateless zot instances to simplify scale out</li> <li>Shared remote storage</li> <li>Bare-metal and Kubernetes deployments</li> </ul> <p>To ensure high availability of the registry, zot supports a clustering scheme with stateless zot instances/replicas fronted by a load balancer and a shared remote backend storage. This scheme allows the registry service to remain available even if a few replicas fail or become unavailable. Load balancing across many zot replicas can also increase aggregate network throughput.</p> <p></p> <p> Beginning with zot release v2.1.0, you can design a highly scalable cluster that does not require configuring the load balancer to direct repository queries to specific zot instances within the cluster. See Scale-out clustering. Scale-out clustering is the preferred method if you are running v2.1.0 or later.</p> <p>Clustering is supported in both bare-metal and Kubernetes environments.</p> <p> The remote backend storage must be S3 API-compatible.</p>"},{"location":"articles/clustering/#bare-metal-deployment","title":"Bare-metal deployment","text":""},{"location":"articles/clustering/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>A highly-available load balancer such as HAProxy configured to direct traffic to zot replicas</p> </li> <li> <p>Multiple zot replicas as <code>systemd</code> services hosted on multiple hosts or VMs</p> </li> <li> <p>AWS S3 API-compatible remote backend storage</p> </li> </ul>"},{"location":"articles/clustering/#kubernetes-deployment","title":"Kubernetes deployment","text":""},{"location":"articles/clustering/#prerequisites_1","title":"Prerequisites","text":"<ul> <li> <p>A zot Kubernetes     Deployment     with required number of replicas</p> </li> <li> <p>AWS S3 API-compatible remote backend storage.</p> </li> <li> <p>A zot Kubernetes     Service</p> </li> <li> <p>A zot Kubernetes Ingress     Gateway     if the service needs to be exposed outside</p> </li> </ul>"},{"location":"articles/clustering/#implementing-stateless-zot","title":"Implementing stateless zot","text":"<p>zot maintains two types of durable state:</p> <ul> <li> <p>the actual image data itself</p> </li> <li> <p>the image metadata in the registry\u2019s cache</p> </li> </ul> <p>In a stateless clustering scheme, the image data is stored in the remote storage backend and the registry cache is disabled by turning off deduplication.</p>"},{"location":"articles/clustering/#ecosystem-tools","title":"Ecosystem tools","text":"<p>The OCI Distribution Specification imposes certain rules about the HTTP URI paths to which various ecosystem tools must conform. Consider these rules when setting the HTTP prefixes during load balancing and ingress gateway configuration.</p>"},{"location":"articles/clustering/#examples","title":"Examples","text":"<p>Clustering is supported by using multiple stateless zot replicas with shared S3 storage and an HAProxy (with sticky session) load balancing traffic to the replicas. Each replica is responsible for one or more repositories.</p>"},{"location":"articles/clustering/#haproxy-configuration","title":"HAProxy configuration","text":"Click here to view a sample HAProxy configuration. <pre><code>global\n        log /dev/log    local0\n        log /dev/log    local1 notice\n        chroot /var/lib/haproxy\n        maxconn 2000\n        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners\n        stats timeout 30s\n        user haproxy\n        group haproxy\n        daemon\n\n        # Default SSL material locations\n        ca-base /etc/ssl/certs\n        crt-base /etc/ssl/private\n\n        # See: https://ssl-config.mozilla.org/#server=haproxy&amp;server-version=2.0.3&amp;config=intermediate\n        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\n        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256\n        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets\n\ndefaults\n        log     global\n        mode    http\n        option  httplog\n        option  dontlognull\n        timeout connect 5000\n        timeout client  50000\n        timeout server  50000\n        errorfile 400 /etc/haproxy/errors/400.http\n        errorfile 403 /etc/haproxy/errors/403.http\n        errorfile 408 /etc/haproxy/errors/408.http\n        errorfile 500 /etc/haproxy/errors/500.http\n        errorfile 502 /etc/haproxy/errors/502.http\n        errorfile 503 /etc/haproxy/errors/503.http\n        errorfile 504 /etc/haproxy/errors/504.http\n\nfrontend zot\n    bind *:8080\n    mode http\n    use_backend zot-instance1 if { path_beg /v2/repo1/ }\n    use_backend zot-instance2 if { path_beg /v2/repo2/ }\n    use_backend zot-instance3 if { path_beg /v2/repo3/ }\n    default_backend zot-cluster\n\nbackend zot-cluster\n    mode http\n    balance roundrobin\n    cookie SERVER insert indirect nocache\n    server zot-server1 127.0.0.1:9000 check cookie zot-server1\n    server zot-server2 127.0.0.2:9000 check cookie zot-server2\n    server zot-server3 127.0.0.3:9000 check cookie zot-server3\n\nbackend zot-instance1\n    server zot-server1 127.0.0.1:9000 check maxconn 30\n\nbackend zot-instance2\n    server zot-server2 127.0.0.2:9000 check maxconn 30\n\nbackend zot-instance3\n    server zot-server3 127.0.0.3:9000 check maxconn 30\n</code></pre>"},{"location":"articles/clustering/#zot-s3-configuration-with-dynamodb","title":"zot S3 configuration with DynamoDB","text":"Click here to view a sample zot configuration for S3 and DynamoDB. <pre><code>{\n    \"distSpecVersion\": \"1.0.1-dev\",\n    \"storage\": {\n        \"rootDirectory\": \"/tmp/zot\",\n        \"dedupe\": false,\n        \"remoteCache\": true,\n        \"storageDriver\": {\n            \"name\": \"s3\",\n            \"rootdirectory\": \"/zot\",\n            \"region\": \"us-east-2\",\n            \"bucket\": \"zot-storage\",\n            \"secure\": true,\n            \"skipverify\": false\n        },\n        \"cacheDriver\": {\n            \"name\": \"dynamodb\",\n            \"endpoint\": \"http://localhost:4566\",\n            \"region\": \"us-east-2\",\n            \"tableName\": \"MainTable\"\n        }\n    },\n    \"http\": {\n        \"address\": \"127.0.0.1\",\n        \"port\": \"8080\"\n    },\n    \"log\": {\n        \"level\": \"debug\"\n    }\n}\n</code></pre>"},{"location":"articles/clustering/#zot-s3-configuration-with-redis","title":"zot S3 configuration with Redis","text":"<p>Multiple zot instances can share the same S3 <code>storageDriver</code> and Redis <code>cacheDriver</code> configurations. The Redis server, DB, and <code>keyprefix</code> must match for all zot instances.</p> <p>While the Redis <code>cacheDriver</code> implementation does support local storage, zot clustering with Redis is only supported for S3.</p> Click here to view a sample zot configuration for S3 and Redis. <pre><code>{\n    \"distSpecVersion\": \"1.0.1-dev\",\n    \"storage\": {\n        \"rootDirectory\": \"/tmp/zot\",\n        \"dedupe\": false,\n        \"remoteCache\": true,\n        \"storageDriver\": {\n            \"name\": \"s3\",\n            \"rootdirectory\": \"/zot\",\n            \"region\": \"us-east-2\",\n            \"bucket\": \"zot-storage\",\n            \"secure\": true,\n            \"skipverify\": false\n        },\n        \"cacheDriver\": {\n            \"name\": \"redis\",\n            \"url\": \"redis://host:6379\",\n            \"keyprefix\": \"zot\"\n        }\n    },\n    \"http\": {\n        \"address\": \"127.0.0.1\",\n        \"port\": \"8080\"\n    },\n    \"log\": {\n        \"level\": \"debug\"\n    }\n}\n</code></pre>"},{"location":"articles/containerd/","title":"containerd Mirroring From zot","text":"<p> containerd supports registry mirroring and zot can be used as an upstream registry to mirror from.</p> <p>If your images are in a repository named docker in the zot registry and you want containerd to pull and mirror images from this repository, then your containerd configuration would look like the following.</p>"},{"location":"articles/containerd/#containerd-v1x","title":"containerd v1.x","text":"<p>The registry mirror configuration is specified inline as the plugin.</p> <pre><code>version = 2\n\n[plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"docker.io\"]\nendpoint = ['https://&lt;my zot instance&gt;:8080/v2/docker']\n</code></pre> <p>Note that /v2 is required for this to work.</p>"},{"location":"articles/containerd/#containerd-v2x","title":"containerd v2.x","text":"<p>The registry mirror configuration has changed in v2.x and now follows a directory structure. The following example shows how zot can be used as the default mirror registry.</p> <pre><code>version = 3\n\n[plugins.\"io.containerd.cri.v1.images\".registry]\n  config_path = \"/etc/containerd/certs.d\"\n</code></pre> <pre><code>$ tree /etc/containerd/certs.d\n</code></pre> <pre><code>/etc/containerd/certs.d/\n\u2514\u2500\u2500 _default\n    \u2514\u2500\u2500 hosts.toml\n</code></pre> <pre><code>$ cat /etc/containerd/certs.d/_default/hosts.toml\n</code></pre> <pre><code># zot is running at localhost:8080\nserver = \"http://localhost:8080\"\n</code></pre> <p>More information about various mirror registry configuration options is available here.</p>"},{"location":"articles/events/","title":"Event Support for zot","text":"<p> Registry-significant events can be generated and pushed to either http or nats endpoints</p> <p>This example demonstrates how to enable and configure the events extension in zot. The events extension allows zot to emit registry events to external systems, such as message brokers or monitoring platforms. Currently, http and nats endpoints are supported.</p>"},{"location":"articles/events/#example-nats-endpoint","title":"Example: NATS endpoint","text":"<p>```json {   \"distSpecVersion\": \"1.1.1\",   \"storage\": {     \"rootDirectory\": \"/tmp/zot\"   },   \"http\": {     \"address\": \"127.0.0.1\",     \"port\": \"8080\"   },   \"log\": {     \"level\": \"debug\"   },   \"extensions\": {     \"events\": {       \"enable\": true,       \"sinks\": [{         \"type\": \"nats\",         \"address\": \"nats://127.0.0.1:4222\",         \"timeout\": \"10s\",         \"channel\": \"alerts\"       }]     }   } }</p>"},{"location":"articles/graphql/","title":"Using GraphQL for Enhanced Searches","text":"<p> A GraphQL backend server within zot's registry search engine provides efficient and enhanced search capabilities. You can submit a GraphQL structured query as an API call or you can use a browser to access the GraphQL Playground, an interactive graphical environment for GraphQL queries.  </p> <p></p>"},{"location":"articles/graphql/#how-to-use-graphql-for-search-queries","title":"How to use GraphQL for search queries","text":"<p>GraphQL is a query language for APIs. A GraphQL server, as implemented in zot's registry search engine, executes GraphQL queries that match schema recognized by the server. In response, the server returns a structure containing the requested information. The schema currently recognized by zot are those that correspond to the queries listed in What GraphQL queries are supported.</p> <p> To learn more about GraphQL, see these resources:</p> <ul> <li> <p>Introduction to GraphQL</p> </li> <li> <p>The Fullstack Tutorial for GraphQL</p> </li> </ul> <p>To perform a search, compose a GraphQL structured query for a specific search and deliver it to zot using one of the methods described in the following sections.</p> <p>For examples of GraphQL queries supported in zot, see Examples of zot searches using GraphQL.</p>"},{"location":"articles/graphql/#using-the-search-api-directly","title":"Using the search API directly","text":"<p>You can submit a GraphQL structured query as the HTML data payload in a direct API call using a shell tool such as cURL or Postman. GraphQL queries are sent to the zot <code>search</code> extension API:</p> <pre><code>/v2/_zot/ext/search\n</code></pre> <p>The following example submits a zot GraphQL query using cURL:</p> <pre><code>curl -X POST -H \"Content-Type: application/json\" --data '{ \"query\": \"{ ImageListForCVE (id:\\\"CVE-2002-1119\\\") { Results { Name Tags } } }\" }' http://localhost:8080/v2/_zot/ext/search\n</code></pre> <p>The reply to your query is returned as a JSON payload in the HTML response.</p>"},{"location":"articles/graphql/#using-the-graphql-playground","title":"Using the GraphQL Playground","text":"<p> The GraphQL Playground feature is available only in a <code>binary-debug</code> zot build or when the zot registry was built with the <code>debug</code> extension label.</p> <p>The GraphQL Playground is an interactive graphical web interface for GraphQL hosted by the zot registry server. </p> <p>The GraphQL Playground is reachable by a browser at the following zot API:</p> <pre><code>/v2/_zot/debug/graphql-playground#\n</code></pre> <p>For example, if your zot server is located at <code>http://localhost:8080</code>, the GraphQL Playground can be accessed by your browser at this URL:</p> <pre><code>http://localhost:8080/v2/_zot/debug/graphql-playground#\n</code></pre> <p>In the GraphQL Playground, you can construct and submit a query structure and you can view the query response in a graphical environment in the browser. You can also inspect the schema.</p> <p></p>"},{"location":"articles/graphql/#what-graphql-queries-are-supported","title":"What GraphQL queries are supported","text":"Supported queries graphQL query Input Output Description Search images by digest ImageListForDigest digest image list Searches all repositories in the registry and returns list of images that matches given digest (manifest, config or layers) Search images affected by a given CVE id CVEListForImage CVE id image list Searches the entire registry and returns list of images affected by given CVE List CVEs for a given image CVEListForImage image CVE list Scans given image and returns list of CVEs affecting the image List images not affected by a given CVE id ImagesListWithCVEFixed repository, CVE id image list Scans all images in a given repository and returns list of latest (by date) images not affected by the given CVE Latest image from all repos RepoListWithNewestImage none repo summary list Returns the latest image from all the repos in the registry List all images with expanded information for a given repository ExpandedRepoInfo repository repo info List expanded repo information for all images in repo, alongside a repo summary All images in repo ImageList repository image list Returns all images in the specified repo Global search GlobalSearch query image summary / repo summary / layer summary Will return what's requested in the query argument Derived image list DerivedImageList image image list Returns a list of images that depend on the image specified in the argument Base image list BaseImageList image image list Returns a list of images that the specified image depends on Get details of a specific image Image image image summary Returns details about a specific image Get referrers of a specific image Referrers repo, digest, type artifact manifests Returns a list of artifacts of given type referring to a specific repo and digests"},{"location":"articles/graphql/#examples-of-zot-searches-using-graphql","title":"Examples of zot searches using GraphQL","text":"<p> These examples show only the GraphQL query without details on how to send them to a server. See How to use GraphQL for search queries.</p> <p>The query structures shown in these examples request all fields allowed by the schema for the particular query type. The schema allows you to request a subset of the data, if desired, omitting any fields that you don't need.</p>"},{"location":"articles/graphql/#list-cves-of-given-image","title":"List CVEs of given image","text":"<p>Sample request</p> <pre><code>{\n  CVEListForImage(\n    image: \"alpine:3.17\"\n    requestedPage: {limit: 1, offset:1, sortBy: SEVERITY}\n  ) {\n    Tag\n    Page {\n      TotalCount\n      ItemCount\n    }\n    CVEList {\n      Id\n      Title\n      Description\n      Severity\n      PackageList {\n        Name\n        InstalledVersion\n        FixedVersion\n      }\n    }\n  }\n}\n</code></pre> <p>Sample response</p> <pre><code>{\n  \"data\": {\n    \"CVEListForImage\": {\n      \"Tag\": \"3.17\",\n      \"Page\": {\n        \"TotalCount\": 9,\n        \"ItemCount\": 1\n      },\n      \"CVEList\": [\n        {\n          \"Id\": \"CVE-2023-5363\",\n          \"Title\": \"openssl: Incorrect cipher key and IV length processing\",\n          \"Description\": \"Issue summary: A bug has been identified in the processing of key and\\ninitialisation vector (IV) lengths.  This can lead to potential truncation\\nor overruns during the initialisation of some symmetric ciphers.\\n\\nImpact summary: A truncation in the IV can result in non-uniqueness,\\nwhich could result in loss of confidentiality for some cipher modes.\\n\\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\\nthe key and IV have been established.  Any alterations to the key length,\\nvia the \\\"keylen\\\" parameter or the IV length, via the \\\"ivlen\\\" parameter,\\nwithin the OSSL_PARAM array will not take effect as intended, potentially\\ncausing truncation or overreading of these values.  The following ciphers\\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\\n\\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\\nloss of confidentiality.  For example, when following NIST's SP 800-38D\\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\\nGCM mode, truncation of the counter portion could lead to IV reuse.\\n\\nBoth truncations and overruns of the key and overruns of the IV will\\nproduce incorrect results and could, in some cases, trigger a memory\\nexception.  However, these issues are not currently assessed as security\\ncritical.\\n\\nChanging the key and/or IV lengths is not considered to be a common operation\\nand the vulnerable API was recently introduced. Furthermore it is likely that\\napplication developers will have spotted this problem during testing since\\ndecryption would fail unless both peers in the communication were similarly\\nvulnerable. For these reasons we expect the probability of an application being\\nvulnerable to this to be quite low. However if an application is vulnerable then\\nthis issue is considered very serious. For these reasons we have assessed this\\nissue as Moderate severity overall.\\n\\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\\n\\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this because\\nthe issue lies outside of the FIPS provider boundary.\\n\\nOpenSSL 3.1 and 3.0 are vulnerable to this issue.\",\n          \"Severity\": \"HIGH\",\n          \"PackageList\": [\n            {\n              \"Name\": \"libcrypto3\",\n              \"InstalledVersion\": \"3.0.8-r0\",\n              \"FixedVersion\": \"3.0.12-r0\"\n            },\n            {\n              \"Name\": \"libssl3\",\n              \"InstalledVersion\": \"3.0.8-r0\",\n              \"FixedVersion\": \"3.0.12-r0\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"articles/graphql/#search-images-affected-by-a-given-cve-id","title":"Search images affected by a given CVE id","text":"<p>Sample request</p> <pre><code>{\n  ImageListForCVE(id: \"CVE-2023-0464\") {\n    Results{\n      RepoName\n      Tag\n      Digest\n      LastUpdated\n      IsSigned\n      Size\n      Vendor\n      DownloadCount\n      Licenses\n      Title\n      Manifests {\n        Digest\n        ConfigDigest\n        Platform {\n          Os\n          Arch\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>Sample response</p> <pre><code>{\n  \"data\": {\n    \"ImageListForCVE\": {\n      \"Results\": [\n        {\n          \"RepoName\": \"alpine\",\n          \"Tag\": \"3.17\",\n          \"Digest\": \"sha256:75bfe77c8d5a76b4421cfcebbd62a28ae70d10147578d0cda45820e99b0ef1d8\",\n          \"LastUpdated\": \"2023-02-11T04:46:42.558343068Z\",\n          \"IsSigned\": true,\n          \"Size\": \"3375436\",\n          \"Vendor\": \"\",\n          \"DownloadCount\": 0,\n          \"Licenses\": \"\",\n          \"Title\": \"\",\n          \"Manifests\": [\n            {\n              \"Digest\": \"sha256:75bfe77c8d5a76b4421cfcebbd62a28ae70d10147578d0cda45820e99b0ef1d8\",\n              \"ConfigDigest\": \"sha256:6a2bcc1c7b4c9207f791a4512d7f2fa8fc2daeae58dbc51cb2797b05415f082a\",\n              \"Platform\": {\n                \"Os\": \"linux\",\n                \"Arch\": \"amd64\"\n              }\n            }\n          ]\n        },\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"articles/graphql/#list-images-not-affected-by-a-given-cve-id","title":"List images not affected by a given CVE id","text":"<p>Sample request</p> <pre><code>{\n  ImageListWithCVEFixed(id: \"CVE-2023-0464\", image: \"ubuntu\") {\n    Results {\n      RepoName\n      Tag\n      Digest\n      LastUpdated\n      Manifests {\n        Digest\n        ConfigDigest\n      }\n    }\n  }\n}\n</code></pre> <p>Sample response</p> <pre><code>{\n  \"data\": {\n    \"ImageListWithCVEFixed\": {\n      \"Results\": [\n        {\n          \"RepoName\": \"ubuntu\",\n          \"Tag\": \"kinetic\",\n          \"Digest\": \"sha256:1ac35e499e330f6520e80e91b29a55ff298077211f5ed66aff5cb357cca4a28f\",\n          \"LastUpdated\": \"2022-10-14T15:28:55.0263968Z\",\n          \"Manifests\": [\n            {\n              \"Digest\": \"sha256:1ac35e499e330f6520e80e91b29a55ff298077211f5ed66aff5cb357cca4a28f\",\n              \"ConfigDigest\": \"sha256:824c0269745923afceb9765ae24f5b331bb6fcf2a82f7eba98b3cfd543afb41e\"\n            }\n          ]\n        },\n        {\n          \"RepoName\": \"ubuntu\",\n          \"Tag\": \"kinetic-20220922\",\n          \"Digest\": \"sha256:79eae04a0e32878fef3f8c5f901c32f6704c4a80b7f3fd9d89629e15867acfff\",\n          \"LastUpdated\": \"2022-10-14T15:27:41.2144454Z\",\n          \"Manifests\": [\n            {\n              \"Digest\": \"sha256:79eae04a0e32878fef3f8c5f901c32f6704c4a80b7f3fd9d89629e15867acfff\",\n              \"ConfigDigest\": \"sha256:15c8dcf63970bb14ea36e41aa001b87d8d31e25a082bf6f659d12489d3e53d90\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"articles/graphql/#search-images-by-digest","title":"Search images by digest","text":"<p>Sample request</p> <pre><code>{\n  ImageListForDigest(\n    id: \"79eae04a0e32878fef3f8c5f901c32f6704c4a80b7f3fd9d89629e15867acfff\"\n  ) {\n    Results{\n      RepoName\n      Tag\n      Title\n    }\n  }\n}\n</code></pre> <p>Sample response</p> <pre><code>{\n  \"data\": {\n    \"ImageListForDigest\": {\n      \"Results\": [\n        {\n          \"RepoName\": \"ubuntu\",\n          \"Tag\": \"kinetic-20220922\",\n          \"Title\": \"ubuntu\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"articles/graphql/#list-the-latest-image-across-every-repository","title":"List the latest image across every repository","text":"<p>Sample request</p> <pre><code>{\n  RepoListWithNewestImage(requestedPage: {limit: 2, offset:0, sortBy: ALPHABETIC_ASC}) {\n    Page {\n      TotalCount\n      ItemCount\n    }\n    Results {\n      Name\n      LastUpdated\n      Size\n      Platforms {\n        Os\n        Arch\n      }\n      NewestImage {\n        Digest\n        Tag\n      }\n    }\n  }\n}\n</code></pre> <p>Sample response</p> <pre><code>{\n  \"data\": {\n    \"RepoListWithNewestImage\": {\n      \"Page\": {\n        \"TotalCount\": 30,\n        \"ItemCount\": 2\n      },\n      \"Results\": [\n        {\n          \"Name\": \"mariadb\",\n          \"LastUpdated\": \"2022-10-18T14:56:33.1993083+03:00\",\n          \"Size\": \"124116964\",\n          \"Platforms\": [\n            {\n              \"Os\": \"linux\",\n              \"Arch\": \"amd64\"\n            }\n          ],\n          \"NewestImage\": {\n            \"Digest\": \"sha256:49a299f5c4b1af5bc2aa6cf8e50ab5bad85db4d0095745369acfc1934ece99d0\",\n            \"Tag\": \"latest\"\n          }\n        },\n        {\n          \"Name\": \"tomcat\",\n          \"LastUpdated\": \"2022-10-18T14:55:13.8303866+03:00\",\n          \"Size\": \"311658063\",\n          \"Platforms\": [\n            {\n              \"Os\": \"linux\",\n              \"Arch\": \"amd64\"\n            }\n          ],\n          \"NewestImage\": {\n            \"Digest\": \"sha256:bbc5a3912b568fbfb5912beaf25054f1f407c32a53acae29f19ad97485731a78\",\n            \"Tag\": \"jre17\"\n          }\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"articles/graphql/#all-images-in-repo","title":"All images in repo","text":"<p>Sample request</p> <pre><code>{\n  ImageList (repo: \"ubuntu\") {\n    Results {\n      Tag\n      Digest\n      LastUpdated\n      Size\n    }\n  }\n}\n</code></pre> <p>Sample response</p> <pre><code>{\n  \"data\": {\n    \"ImageList\": {\n      \"Results\": [\n        {\n          \"Tag\": \"jammy\",\n          \"Digest\": \"sha256:f96fcb040c7ee00c037c758cf0ab40638e6ee89b03a9d639178fcbd0e7f96d27\",\n          \"LastUpdated\": \"2022-10-14T15:29:18.0325322Z\",\n          \"Size\": \"30472739\"\n        },\n        {\n          \"Tag\": \"jammy-20221003\",\n          \"Digest\": \"sha256:86681debca1719dff33f426a0f5c41792ebc52496c5d78a93b655b8b48fb71b2\",\n          \"LastUpdated\": \"2022-10-14T15:29:07.0004587Z\",\n          \"Size\": \"30472748\"\n        },\n        {\n          \"Tag\": \"kinetic\",\n          \"Digest\": \"sha256:1ac35e499e330f6520e80e91b29a55ff298077211f5ed66aff5cb357cca4a28f\",\n          \"LastUpdated\": \"2022-10-14T15:28:55.0263968Z\",\n          \"Size\": \"27498890\"\n        },\n        {\n          \"Tag\": \"kinetic-20220922\",\n          \"Digest\": \"sha256:79eae04a0e32878fef3f8c5f901c32f6704c4a80b7f3fd9d89629e15867acfff\",\n          \"LastUpdated\": \"2022-10-14T15:27:41.2144454Z\",\n          \"Size\": \"27498899\"\n        },\n        {\n          \"Tag\": \"latest\",\n          \"Digest\": \"sha256:9bc6d811431613bf2fd8bf3565b319af9998fc5c46304022b647c63e1165657c\",\n          \"LastUpdated\": \"2022-10-14T15:26:59.6707939Z\",\n          \"Size\": \"30472740\"\n        },\n        {\n          \"Tag\": \"rolling\",\n          \"Digest\": \"sha256:72e75626c5068b9d9a462c4fc80a29787d0cf61c8abc81bfd5ea69f6248d56fc\",\n          \"LastUpdated\": \"2022-10-14T15:27:21.2441356Z\",\n          \"Size\": \"30472741\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"articles/graphql/#list-all-images-with-expanded-information-for-a-given-repository","title":"List all images with expanded information for a given repository","text":"<p>Sample request</p> <pre><code>{\n  ExpandedRepoInfo(repo: \"ubuntu\") {\n    Images {\n      Tag\n      Digest\n    }\n    Summary {\n      LastUpdated\n      Size\n      NewestImage {\n        Tag\n        LastUpdated\n        Digest\n      }\n    }\n  }\n}\n</code></pre> <p>Sample response</p> <pre><code>{\n  \"data\": {\n    \"ExpandedRepoInfo\": {\n      \"Images\": [\n        {\n          \"Tag\": \"jammy\",\n          \"Digest\": \"sha256:f96fcb040c7ee00c037c758cf0ab40638e6ee89b03a9d639178fcbd0e7f96d27\"\n        },\n        {\n          \"Tag\": \"jammy-20221003\",\n          \"Digest\": \"sha256:86681debca1719dff33f426a0f5c41792ebc52496c5d78a93b655b8b48fb71b2\"\n        },\n        {\n          \"Tag\": \"kinetic\",\n          \"Digest\": \"sha256:1ac35e499e330f6520e80e91b29a55ff298077211f5ed66aff5cb357cca4a28f\"\n        },\n        {\n          \"Tag\": \"kinetic-20220922\",\n          \"Digest\": \"sha256:79eae04a0e32878fef3f8c5f901c32f6704c4a80b7f3fd9d89629e15867acfff\"\n        },\n        {\n          \"Tag\": \"rolling\",\n          \"Digest\": \"sha256:72e75626c5068b9d9a462c4fc80a29787d0cf61c8abc81bfd5ea69f6248d56fc\"\n        },\n        {\n          \"Tag\": \"latest\",\n          \"Digest\": \"sha256:9bc6d811431613bf2fd8bf3565b319af9998fc5c46304022b647c63e1165657c\"\n        }\n      ],\n      \"Summary\": {\n        \"LastUpdated\": \"2022-10-14T15:29:18.0325322Z\",\n        \"Size\": \"58146896\",\n        \"NewestImage\": {\n          \"Tag\": \"jammy\",\n          \"LastUpdated\": \"2022-10-14T15:29:18.0325322Z\",\n          \"Digest\": \"sha256:f96fcb040c7ee00c037c758cf0ab40638e6ee89b03a9d639178fcbd0e7f96d27\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"articles/graphql/#global-search","title":"Global search","text":"<p>Sample request</p> <pre><code>{\n  GlobalSearch(query: \"ubuntu:latest\") {\n    Page {\n      ItemCount\n      TotalCount\n    }\n    Images {\n      RepoName\n      Tag\n      LastUpdated\n      Manifests {\n        Digest\n        Layers {\n          Size\n          Digest\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>Sample response</p> <pre><code>{\n  \"data\": {\n    \"GlobalSearch\": {\n      \"Page\": {\n        \"ItemCount\": 1,\n        \"TotalCount\": 1\n      },\n      \"Images\": [\n        {\n          \"RepoName\": \"ubuntu\",\n          \"Tag\": \"latest\",\n          \"LastUpdated\": \"2022-10-14T15:26:59.6707939Z\",\n          \"Manifests\": [\n            {\n              \"Digest\": \"sha256:9bc6d811431613bf2fd8bf3565b319af9998fc5c46304022b647c63e1165657c\",\n              \"Layers\": [\n                {\n                  \"Size\": \"30428928\",\n                  \"Digest\": \"sha256:cf92e523b49ea3d1fae59f5f082437a5f96c244fda6697995920142ff31d59cf\"\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n</code></pre> <p>Sample request</p> <pre><code>{\n  GlobalSearch(query: \"\") {\n    Repos {\n      Name\n    }\n  }\n}\n</code></pre> <p>Sample response</p> <pre><code>{\n  \"data\": {\n    \"GlobalSearch\": {\n      \"Repos\": [\n        {\n          \"Name\": \"centos\"\n        },\n        {\n          \"Name\": \"ubuntu\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"articles/graphql/#search-derived-images","title":"Search derived images","text":"<p>Sample query</p> <pre><code>{\n  DerivedImageList(image: \"ubuntu:latest\", requestedPage: {offset: 0, limit: 10}) {\n    Page {\n      TotalCount\n      ItemCount\n    }\n    Results {\n      RepoName\n      Tag\n      LastUpdated\n    }\n  }\n}\n</code></pre> <p>Sample response</p> <pre><code>{\n  \"data\": {\n    \"DerivedImageList\": {\n      \"Page\": {\n        \"TotalCount\": 9,\n        \"ItemCount\": 9\n      },\n      \"Results\": [\n        {\n          \"RepoName\": \"mariadb\",\n          \"Tag\": \"latest\",\n          \"LastUpdated\": \"2022-10-18T14:56:33.1993083+03:00\"\n        },\n        {\n          \"RepoName\": \"maven\",\n          \"Tag\": \"latest\",\n          \"LastUpdated\": \"2022-10-14T18:30:12.0929807+03:00\"\n        },\n        {\n          \"RepoName\": \"tomcat\",\n          \"Tag\": \"latest\",\n          \"LastUpdated\": \"2022-10-18T14:50:09.7229959+03:00\"\n        },\n        {\n          \"RepoName\": \"tomcat\",\n          \"Tag\": \"jre17\",\n          \"LastUpdated\": \"2022-10-18T14:55:13.8303866+03:00\"\n        },\n        {\n          \"RepoName\": \"tomcat\",\n          \"Tag\": \"jre17-temurin\",\n          \"LastUpdated\": \"2022-10-18T14:54:46.4133521+03:00\"\n        },\n        {\n          \"RepoName\": \"tomcat\",\n          \"Tag\": \"jre17-temurin-jammy\",\n          \"LastUpdated\": \"2022-10-18T14:51:12.235475+03:00\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"articles/graphql/#search-base-images","title":"Search base images","text":"<p>Sample query</p> <pre><code>{\n  BaseImageList(image: \"mariadb:latest\", requestedPage: {offset: 0, limit: 10}) {\n    Page {\n      TotalCount\n      ItemCount\n    }\n    Results {\n      RepoName\n      Tag\n      LastUpdated\n    }\n  }\n}\n</code></pre> <p>Sample response</p> <pre><code>{\n  \"data\": {\n    \"BaseImageList\": {\n      \"Page\": {\n        \"TotalCount\": 4,\n        \"ItemCount\": 4\n      },\n      \"Results\": [\n        {\n          \"RepoName\": \"ubuntu\",\n          \"Tag\": \"jammy\",\n          \"LastUpdated\": \"2022-10-14T18:29:18.0325322+03:00\"\n        },\n        {\n          \"RepoName\": \"ubuntu\",\n          \"Tag\": \"jammy-20221003\",\n          \"LastUpdated\": \"2022-10-14T18:29:07.0004587+03:00\"\n        },\n        {\n          \"RepoName\": \"ubuntu\",\n          \"Tag\": \"latest\",\n          \"LastUpdated\": \"2022-10-14T18:26:59.6707939+03:00\"\n        },\n        {\n          \"RepoName\": \"ubuntu\",\n          \"Tag\": \"rolling\",\n          \"LastUpdated\": \"2022-10-14T18:27:21.2441356+03:00\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"articles/graphql/#get-details-of-a-specific-image","title":"Get details of a specific image","text":"<p>Sample query</p> <pre><code>{\n  Image(image: \"mariadb:latest\") {\n    RepoName\n    Tag\n    LastUpdated\n    Digest\n    Description\n  }\n}\n</code></pre> <p>Sample response</p> <pre><code>{\n  \"data\": {\n    \"Image\": {\n      \"RepoName\": \"mariadb\",\n      \"Tag\": \"latest\",\n      \"LastUpdated\": \"2022-10-18T14:56:33.1993083+03:00\",\n      \"Digest\": \"sha256:49a299f5c4b1af5bc2aa6cf8e50ab5bad85db4d0095745369acfc1934ece99d0\",\n      \"Description\": \"MariaDB Server is a high performing open source relational database, forked from MySQL.\"\n    }\n  }\n}\n</code></pre>"},{"location":"articles/graphql/#get-referrers-of-a-specific-image","title":"Get referrers of a specific image","text":"<p>Sample query</p> <pre><code>{\n  Referrers(\n    repo: \"golang\"\n    digest: \"sha256:fed08b0eaea00aab17f82ecbb78675919d216c72eea985581758191f694aeaf7\"\n    type: \"application/vnd.example.icecream.v1\"\n  ) {\n    MediaType\n    ArtifactType\n    Digest\n    Annotations {\n      Key\n      Value\n    }\n  }\n}\n</code></pre> <p>Sample response</p> <pre><code>{\n  \"data\": {\n    \"Referrers\": [\n      {\n        \"MediaType\": \"application/vnd.oci.artifact.manifest.v1+json\",\n        \"ArtifactType\": \"application/vnd.example.icecream.v1\",\n        \"Digest\": \"sha256:be7a3d01c35a2cf53c502e9dc50cdf36b15d9361c81c63bf319f1d5cbe44ab7c\",\n        \"Annotations\": [\n          {\n            \"Key\": \"format\",\n            \"Value\": \"oci\"\n          },\n          {\n            \"Key\": \"demo\",\n            \"Value\": \"true\"\n          }\n        ]\n      },\n      {\n        \"MediaType\": \"application/vnd.oci.artifact.manifest.v1+json\",\n        \"ArtifactType\": \"application/vnd.example.icecream.v1\",\n        \"Digest\": \"sha256:d9ad22f41d9cb9797c134401416eee2a70446cee1a8eb76fc6b191f4320dade2\",\n        \"Annotations\": [\n          {\n            \"Key\": \"demo\",\n            \"Value\": \"true\"\n          },\n          {\n            \"Key\": \"format\",\n            \"Value\": \"oci\"\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"articles/high-availability/","title":"Deploying a Highly Available zot Registry","text":"<p> A highly available zot registry can be easily implemented using zot's registry synchronization feature.</p> <p>In the zot configuration, the <code>sync</code> extension allows a zot instance to mirror another zot instance with various container image download policies, including on-demand and periodic downloads. You can use the zot <code>sync</code>  function combined with a load balancer such as HAProxy to implement a highly available registry.</p> <p>Two failover configurations are possible:</p> <ul> <li> <p>Active/standby</p> <p>Registry requests are sent by the load balancer to the active zot instance, while a standby instance mirrors the active. If the load balancer detects a failure of the active instance, it then sends requests to the standby instance.</p> </li> <li> <p>Active/active</p> <p>Registry requests are load-balanced between two zot instances, each of which mirrors the other.</p> </li> </ul> <p> The highly available zot registry described in this article differs from zot clustering. Although zot clustering provides a level of high availability, the instances share common storage, whose failure would affect all instances. In the method described in this article, each instance has its own storage, providing an additional level of safety.</p> <p>For details of configuring the <code>sync</code> extension, see OCI Registry Mirroring With zot.</p>"},{"location":"articles/high-availability/#configuring-an-activestandby-registry","title":"Configuring an active/standby registry","text":"<p>An active/standby zot registry can be implemented between two zot instances by configuring the <code>sync</code> extension in the standby instance to mirror the other instance.  In this scheme:</p> <ul> <li>a load balancer such as HAProxy is deployed for active/passive load balancing of the zot instances</li> <li>each zot instance is configured as a standalone registry with its own storage</li> <li>the standby zot instance has its <code>sync</code> extension enabled to periodically synchronize with (mirror) the active instance</li> </ul> <p>With periodic synchronization, a window of failure exists between synchronization actions. For example, if an image is posted to the active instance soon after the standby has synchronized with the active, and then the active fails, the standby will not have the new image. To minimize this exposure, we recommend keeping the synchronization period as small as practical.</p>"},{"location":"articles/high-availability/#configuring-an-activeactive-registry","title":"Configuring an active/active registry","text":"<p>An active/active zot registry can be implemented between two zot instances by configuring the <code>sync</code> extension in each instance to point to the other instance.  In this scheme:</p> <ul> <li>a load balancer such as HAProxy or a DNS-based routing scheme is deployed for load balancing between zot instances</li> <li>path-based routing must be implemented </li> <li>each zot instance is configured as a standalone registry with its own storage</li> <li>each zot instance has its <code>sync</code> extension enabled to periodically synchronize with the other instance</li> </ul> <p>With periodic synchronization, a window of failure exists between synchronization actions. For example, if an image is posted to instance A soon after instance B has synchronized with instance A, and then instance A fails, instance B will not have the new image.  To minimize this exposure, we recommend keeping the synchronization period as small as practical.</p>"},{"location":"articles/immutable-tags/","title":"Immutable Image Tags","text":"<p> Immutable image tag support is achieved by leveraging authorization policies.</p> <p>It is considered best practice to avoid changing the content once a software version has been released. While <code>zot</code> does not have an explicit configuration flag to make image tags immutable, the same effect can be achieved with authorization as follows.</p>"},{"location":"articles/immutable-tags/#immutable-for-all-users","title":"Immutable For All Users","text":"<p>By setting the <code>defaultPolicy</code> to \"read\" and \"create\" for a particular repository, images can be pushed (once) and pulled but further updates are rejected.</p> <pre><code>{\n...\n  \"repositories\": {\n    \"**\": {\n      \"defaultPolicy\": [\"read\", \"create\"]\n    }\n  }\n...\n}\n</code></pre>"},{"location":"articles/immutable-tags/#immutable-with-overrides","title":"Immutable With Overrides","text":"<p>As in the example above, with <code>defaultPolicy</code> set to \"read\" and \"create\" for a particular repository, images can be pushed (once) and pulled, but further updates are rejected. Exceptions can be made for some users, and user-specific policies can be added to allow \"update\" operations as shown below.</p> <pre><code>{\n...\n  \"repositories\": {\n    \"**\": {\n      \"policies\": [{\n        \"users\": [\"alice\", \"bob\"],\n        \"actions\": [\"read\", \"create\", \"update\"]\n      }],\n      \"defaultPolicy\": [\"read\", \"create\"]\n    }\n  }\n...\n}\n</code></pre>"},{"location":"articles/kind-deploy/","title":"Using <code>kind</code> for Deployment Testing","text":"<p> Use <code>kind</code> to try out zot deployment with Kubernetes.</p> <p>This article describes how to create a <code>kind</code> cluster that includes a local zot registry. </p>"},{"location":"articles/kind-deploy/#deploying-the-cluster-and-registry","title":"Deploying the cluster and registry","text":"<p>The procedure described installs a <code>kind</code> cluster with a zot registry at <code>localhost:5001</code> and then loads and runs a \"hello\" app to test the installation. Although the procedure is given as a series of steps, you can find a complete shell script to perform these steps at the end of this article.</p> <p> This article is based on Create A Cluster And Registry, which you can find on the <code>kind</code> website.</p>"},{"location":"articles/kind-deploy/#step-1-prepare-the-environment","title":"Step 1: Prepare the environment","text":"<p>The following packages must be installed:</p> <ul> <li><code>docker</code></li> <li><code>kubernetes</code></li> <li><code>kind</code></li> <li><code>containerd</code></li> <li><code>skopeo</code></li> </ul> <p>Execute the following shell commands to set environment variables.</p> <pre><code>set -o errexit\n\n# set no_proxy if applicable\nif [ ! -z \"${no_proxy}\" ]; then \n  echo \"Updating no_proxy environment variables\";\n  export no_proxy=${no_proxy},kind-registry;\n  export NO_PROXY=${no_proxy};\nfi\n</code></pre>"},{"location":"articles/kind-deploy/#step-2-create-a-registry-container","title":"Step 2: Create a registry container","text":"<p>Create a <code>kind-registry</code> container, pulling a zot binary from the GitHub Container Registry (ghcr.io).  </p> <p> This example pulls <code>zot-minimal-linux-amd64:latest</code>,  a minimal (no extensions) zot image for an AMD-based linux server. </p> <p>Other available images are described at the zot releases page in GitHub. You can also specify a release by replacing <code>latest</code> with an available release number.</p> <pre><code># create registry container unless it already exists\nreg_name='kind-registry'\nreg_port='5001'\nif [ \"$(docker inspect -f '{{.State.Running}}' \"${reg_name}\" 2&gt;/dev/null || true)\" != 'true' ]; then\n  docker run \\\n    -d --restart=always -p \"127.0.0.1:${reg_port}:5000\" --name \"${reg_name}\" \\\n    ghcr.io/project-zot/zot-minimal-linux-amd64:latest\nfi\n</code></pre>"},{"location":"articles/kind-deploy/#step-3-create-the-kind-cluster","title":"Step 3: Create the <code>kind</code> cluster","text":"<p>Create a cluster with the local registry enabled.</p> <pre><code># enable the local registry in containerd\ncat &lt;&lt;EOF | kind create cluster --config=-\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\ncontainerdConfigPatches:\n- |-\n  [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"localhost:${reg_port}\"]\n    endpoint = [\"http://${reg_name}:5000\"]\nEOF\n</code></pre>"},{"location":"articles/kind-deploy/#step-4-connect-the-registry-to-the-cluster-network","title":"Step 4:  Connect the registry to the cluster network","text":"<p>Connect the registry to the \"kind\" network so that it can communicate with other resources in the same network.</p> <pre><code># check whether already connected to the network\nif [ \"$(docker inspect -f='{{json .NetworkSettings.Networks.kind}}' \\\n\"${reg_name}\")\" = 'null' ]; then\n  docker network connect \"kind\" \"${reg_name}\"\nfi\n</code></pre>"},{"location":"articles/kind-deploy/#step-5-document-the-local-registry","title":"Step 5:  Document the local registry","text":"<p>Create a ConfigMap that specifies how to interact with the local registry. This ConfigMap follows the KEP-1755 Standard for communicating a local registry.</p> <pre><code>cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: local-registry-hosting\n  namespace: kube-public\ndata:\n  localRegistryHosting.v1: |\n    host: \"localhost:${reg_port}\"\n    help: \"https://kind.sigs.k8s.io/docs/user/local-registry/\"\nEOF\n</code></pre>"},{"location":"articles/kind-deploy/#step-6-deploy-and-test","title":"Step 6:  Deploy and test","text":"<p>Use <code>skopeo</code> to copy (pull) a \"hello\" app from the Google Container Registry (gcr.io) into the new zot registry. Using <code>kubectl</code>, deploy the app from the new local zot registry as \"hello-server\" and monitor the deployment for initial availability.</p> <pre><code># copy an image\nskopeo copy --format=oci --dest-tls-verify=false \\\ndocker://gcr.io/google-samples/hello-app:1.0 \\\ndocker://localhost:5001/hello-app:1.0\n\n# deploy the image\nkubectl create deployment hello-server --image=localhost:5001/hello-app:1.0\n\n# check for availability\necho \"Waiting for deployment/hello-server to be ready ...\"\nkubectl wait deployment -n default hello-server \\\n  --for condition=Available=True --timeout=90s\n</code></pre>"},{"location":"articles/kind-deploy/#clean-up","title":"Clean up","text":"<p>To clean up after testing, run the following commands to delete the <code>kind</code> cluster and registry.</p> <pre><code>kind delete cluster\ndocker stop kind-registry\ndocker rm kind-registry\n</code></pre> <p></p>"},{"location":"articles/kind-deploy/#reference-a-complete-script","title":"Reference: A complete script","text":"<p>The following script executes all of the preceding steps.</p> Click here to view the entire script <pre><code>#!/bin/sh\nset -o errexit\n\n# Reference: https://kind.sigs.k8s.io/docs/user/local-registry/\n\n# set no_proxy if applicable\nif [ ! -z \"${no_proxy}\" ]; then \n  echo \"Updating no_proxy env var\";\n  export no_proxy=${no_proxy},kind-registry;\n  export NO_PROXY=${no_proxy};\nfi\n\n# create registry container unless it already exists\nreg_name='kind-registry'\nreg_port='5001'\nif [ \"$(docker inspect -f '{{.State.Running}}' \"${reg_name}\" 2&gt;/dev/null || true)\" != 'true' ]; then\n  docker run \\\n    -d --restart=always -p \"127.0.0.1:${reg_port}:5000\" --name \"${reg_name}\" \\\n    ghcr.io/project-zot/zot-minimal-linux-amd64:latest\nfi\n\n# create a cluster with the local registry enabled in containerd\ncat &lt;&lt;EOF | kind create cluster --config=-\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\ncontainerdConfigPatches:\n- |-\n  [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"localhost:${reg_port}\"]\n    endpoint = [\"http://${reg_name}:5000\"]\nEOF\n\n# connect the registry to the cluster network if not already connected\nif [ \"$(docker inspect -f='{{json .NetworkSettings.Networks.kind}}' \"${reg_name}\")\" = 'null' ]; then\n  docker network connect \"kind\" \"${reg_name}\"\nfi\n\n# https://github.com/kubernetes/enhancements/tree/master/keps/sig-cluster-lifecycle/generic/1755-communicating-a-local-registry\n#\n# document the local registry\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: local-registry-hosting\n  namespace: kube-public\ndata:\n  localRegistryHosting.v1: |\n    host: \"localhost:${reg_port}\"\n    help: \"https://kind.sigs.k8s.io/docs/user/local-registry/\"\nEOF\n\n# copy an image\nskopeo copy --format=oci --dest-tls-verify=false docker://gcr.io/google-samples/hello-app:1.0 docker://localhost:5001/hello-app:1.0\n\n# deploy the image\nkubectl create deployment hello-server --image=localhost:5001/hello-app:1.0\n\n# check for availability\necho \"Waiting for deployment/hello-server to be ready ...\"\nkubectl wait deployment -n default hello-server --for condition=Available=True --timeout=90s\n\n# cleanup\necho \"Press a key to begin cleanup ...\"\nread KEYPRESS\nkind delete cluster\ndocker stop kind-registry\ndocker rm kind-registry\n</code></pre>"},{"location":"articles/mirroring/","title":"OCI Registry Mirroring With zot","text":"<p> A <code>zot</code> registry can mirror one or more upstream OCI registries, including popular cloud registries such as Docker Hub and Google Container Registry (gcr.io).</p> <p>A key use case for zot is to act as a mirror for upstream registries. If an upstream registry is OCI distribution-spec conformant for pulling images, you can use zot's <code>sync</code> feature to implement a downstream mirror, synchronizing OCI images and corresponding artifacts. Because synchronized images are stored in zot's local storage, registry mirroring allows for a fully distributed disconnected container image build pipeline. Container image operations terminate in local zot storage, which may reduce network latency and costs.</p> <p> Because zot is a OCI-only registry, any upstream image stored in the Docker image format is converted to OCI format when downloading to zot. In the conversion, some non-OCI attributes may be lost and the image digest will change. Pulling with @ will not work as expected. Signatures, for example, are removed due to the mismatch between the old and the new digests."},{"location":"articles/mirroring/#mirroring-modes","title":"Mirroring modes","text":"<p>For mirroring an upstream registry, two common use cases are a fully mirrored or a pull through (on-demand) cache registry.</p> <p>As with git, wherein every clone is a full repository, you can configure your local zot instance to be a fully mirrored OCI registry. For this mode, configure zot for synchronization by periodic polling, not on-demand. Zot copies and caches a full copy of every image on the upstream registry, updating the cache whenever polling discovers a change in content or image version at the upstream registry. </p> <p>For a pull through cache mirrored registry, configure zot for on-demand synchronization. When an image is first requested from the local zot registry, the image is downloaded from the upstream registry and cached in local storage. Subsequent requests for the same image are served from zot's cache. Images that have not been requested are not downloaded. If a polling interval is also configured, zot periodically polls the upstream registry for changes, updating any cached images if changes are detected. </p> <p>  Because Docker Hub rate-limits pulls and does not support catalog listing, do not use polled mirroring with Docker Hub. Use only on-demand mirroring with Docker Hub.</p>"},{"location":"articles/mirroring/#migrating-or-updating-a-registry-using-mirroring","title":"Migrating or updating a registry using mirroring","text":"<p>Mirroring zot using the <code>sync</code> feature allows you to easily migrate a registry. In situations such as the following, zot mirroring provides an easy solution.</p> <ul> <li> <p>Migrating an existing zot or non-zot registry to a new location. </p> <p>Provided that the source registry is OCI-compliant for image pulls, you can mirror the registry to a new zot registry, delete the old registry, and reroute network traffic to the new registry.</p> </li> <li> <p>Updating (or downgrading) a zot registry. </p> <p>To minimize downtime during an update, or to avoid any incompatibilities between zot releases that would preclude an in-place update, you can bring up a new zot registry with the desired release and then migrate from the existing registry.</p> </li> </ul> <p>To ensure a complete migration of the registry contents, set a polling interval in the configuration of the new zot registry and set <code>prefix</code> to <code>**</code>, as shown in this example: </p> <pre><code>  {\n    \"urls\": [\n        \"https://registry1:5000\"\n    ],\n    \"pollInterval\": \"12h\",\n    \"onDemand\": true,\n    \"content\": [\n        {\n            \"prefix\": \"**\"\n        }\n    ]\n  }\n</code></pre>"},{"location":"articles/mirroring/#basic-configuration-for-mirroring-with-sync","title":"Basic configuration for mirroring with sync","text":"<p>The <code>sync</code> feature of zot is an extension of the OCI-compliant registry implementation. You can configure the <code>sync</code> feature under the <code>extensions</code> section of the zot configuration file, as shown in this example:</p> <pre><code>  \"extensions\": {\n    \"sync\": {\n      \"credentialsFile\": \"./examples/sync-auth-filepath.json\",\n      \"registries\": [\n        {\n          \"urls\": [\n            \"https://registry1:5000\"\n          ],\n          \"onDemand\": false,\n          \"pollInterval\": \"6h\",\n          \"tlsVerify\": true,\n          \"certDir\": \"/home/user/certs\",\n          \"maxRetries\": 3,\n          \"retryDelay\": \"5m\", \n          \"onlySigned\": true,\n          \"content\": [\n            {\n              \"prefix\": \"/repo2/repo\",\n              \"tags\": {\n                \"regex\": \"4.*\",\n                \"semver\": true\n              }\n              \"destination\": \"/repo2\",\n              \"stripPrefix\": true\n            }\n          ]\n        }\n      ]\n    }\n  }\n</code></pre> <p>The following table lists the configurable attributes for the <code>sync</code> feature:</p> Attribute Description <p>credentialsFile</p> <p>The location of a local file containing credentials for other registries, as in the following example: <pre>{\u2003\u2003\"127.0.0.1:8080\": {\u2003\u2003\u2003\u2003\"username\": \"user\",\u2003\u2003\u2003\u2003\"password\": \"pass\"\u2003\u2003},\u2003\u2003\u2003\u2003\"registry2:5000\": {\u2003\u2003\u2003\u2003\"username\": \"user2\",\u2003\u2003\u2003\u2003\"password\": \"pass2\"\u2003\u2003}}</pre></p> <p>urls</p> <p>A list of one or more URLs to an upstream image registry. If the main URL fails, the sync process will try the next URLs in the listed order.</p> <p>onDemand</p> <ul> <li><p><code>false</code>: Pull all images not found in the local registry.</p></li> <li><p><code>true</code>: Pull any image not found in the local registry only when the image is requested by a user.</p></li> </ul> <p>pollInterval</p> <p>The period in seconds between polling of a remote registry. If no value is specified, no periodic polling will occur. If a value is set and the content attributes are configured, periodic synchronization is enabled and will run at the specified value.Note: Because Docker Hub rate-limits pulls and does not support catalog listing, do not use polled mirroring with Docker Hub. Use only onDemand mirroring with Docker Hub.</p> <p>tlsVerify</p> <ul> <li><p><code>false</code>: TLS will not be verified.</p></li> <li><p><code>true</code>: (Default) The TLS connection to the destination registry will be verified.</p></li> </ul> <p>certDir</p> <p>If a path is specified, use certificates (*.crt, *.cert, *.key files) at this path when connecting to the destination registry or daemon. If no path is specified, use the default certificates directory.</p> <p>maxRetries</p> <p>The maximum number of retries if an error occurs during either an on-demand or periodic synchronization. If no value is specified, no retries will occur.</p> <p>retryDelay</p> <p>The interval in seconds between retries. This attribute is mandatory when maxRetries is configured.</p> <p>onlySigned</p> <ul> <li><p><code>false</code>: Synchronize signed or unsigned images.</p></li> <li><p><code>true</code>: Synchronize only signed images (either notary or cosign).</p></li> </ul> <p>content</p> <p>The included attributes in this section specify which content will be pulled. If this section is not populated, periodic polling will not occur. The included attributes can also filter which on-demand images are pulled.</p> <p> prefix</p> <p>On the remote registry, the path from which images will be pulled. This path can be a string that exactly matches the remote path, or it can be a glob pattern. For example, the path can include a wildcard (*) or a recursive wildcard (**).</p> <p> tags</p> <p>The included attributes in this optional section specify how remote images will be selected for synchronization based on image tags.</p> <p> tags.regex</p> <p>Specifies a regular expression for matching image tags. Images whose tags do not match the expression are not pulled.</p> <p> tags.semver</p> <p>Specifies whether image tags are to be filtered by semantic versioning (semver) compliance.</p> <ul> <li><p><code>false</code>: Do not filter by semantic versioning.</p></li> <li><p><code>true</code>: Filter by semantic versioning.</p></li> </ul> <p> destination</p> <p>Specifies the local path in which pulled images are to be stored.</p> <p> stripPrefix</p> <p>Specifies whether the prefix path from the remote registry will be retained or replaced when the image is stored in the zot registry.</p> <ul> <li><p><code>false</code>: Retain the source prefix, append it to the destination path.</p></li> <li><p><code>true</code>: Remove the source prefix.</p> <p>Note: If the source prefix was specified with meta-characters (such as **), only the prefix segments that precede the meta-characters are removed. Any remaining path segments are appended to the destination path.</p> </li> </ul>"},{"location":"articles/mirroring/#configuration-examples-for-mirroring","title":"Configuration examples for mirroring","text":""},{"location":"articles/mirroring/#example-multiple-repositories-with-polled-mirroring","title":"Example: Multiple repositories with polled mirroring","text":"<p>The following is an example of sync configuration for mirroring multiple repositories with polled mirroring.</p> <pre><code>\"sync\": {\n  \"enable\": true,\n  \"credentialsFile\": \"./examples/sync-auth-filepath.json\",\n  \"registries\": [\n    {\n      \"urls\": [\"https://registry1:5000\"],\n      \"onDemand\": false,\n      \"pollInterval\": \"6h\",\n      \"tlsVerify\": true,\n      \"certDir\": \"/home/user/certs\",\n      \"maxRetries\": 3,\n      \"retryDelay\": \"5m\",\n      \"onlySigned\": true,\n      \"preserveDigest\": true,\n      \"content\": [\n        {\n          \"prefix\": \"/repo1/repo\",\n          \"tags\": {\n            \"regex\": \"4.*\",\n            \"semver\": true,\n            \"tags\": {\n                                \"excludeRegex\": \".*-(amd64|arm64)$\"\n                        }\n          }\n        },\n        {\n          \"prefix\": \"/repo2/repo\",\n          \"destination\": \"/repo2\",\n          \"stripPrefix\": true\n        },\n        {\n          \"prefix\": \"/repo3/repo\"\n        }\n      ]\n    }\n  }\n</code></pre> <p>The configuration in this example will result in the following behavior:</p> <ul> <li>Only signed images (notation and cosign) are synchronized.  </li> <li>The sync communication is secured using certificates in <code>certDir</code>.</li> <li>This registry synchronizes with upstream registry every 6 hours. </li> <li>This registry preserves upstream digests instead of converting them to OCI images.</li> <li>On-demand mirroring is disabled.</li> <li>Based on the content filtering options, this registry synchronizes these images:<ul> <li>From /repo1/repo, images with tags that begin with \"4.\" and are semver compliant but excluding some tag patterns Files are stored locally in /repo1/repo on localhost.</li> <li>From /repo2/repo, images with all tags. Because <code>stripPrefix</code> is enabled, files are stored locally in /repo2. For example, docker://upstream/repo2/repo:v1 is stored as docker://local/repo2:v1.</li> <li>From /repo3/repo, images with all tags. Files are stored locally in /repo3/repo.</li> </ul> </li> </ul>"},{"location":"articles/mirroring/#example-multiple-registries-with-on-demand-mirroring","title":"Example: Multiple registries with on-demand mirroring","text":"<p>The following is an example of sync configuration for mirroring multiple registries with on-demand mirroring.</p> <pre><code>{\n  \"distSpecVersion\": \"1.0.1\",\n  \"storage\": {\n    \"rootDirectory\": \"/tmp/zot\",\n    \"gc\": true\n  },\n  \"http\": {\n    \"address\": \"0.0.0.0\",\n    \"port\": \"8080\"\n  },\n  \"log\": {\n    \"level\": \"debug\"\n  },\n  \"extensions\": {\n    \"sync\": {\n      \"enable\": true,\n      \"registries\": [\n        {\n          \"urls\": [\"https://k8s.gcr.io\"],\n          \"content\": [\n            {\n              \"prefix\": \"**\", \n              \"destination\": \"/k8s-images\"\n            }\n          ],\n          \"onDemand\": true,\n          \"tlsVerify\": true\n        },\n        {\n          \"urls\": [\"https://docker.io/library\"],\n          \"content\": [\n            {\n              \"prefix\": \"**\", \n              \"destination\": \"/docker-images\"\n            }\n          ],\n          \"onDemand\": true,\n          \"tlsVerify\": true\n        }\n      ]\n    }\n  }\n}\n</code></pre> <p>With this zot configuration, the sync behavior is as follows:</p> <ol> <li> <p>This initial user request for content from the zot registry: <code>skopeo copy --src-tls-verify=false docker://localhost:8080/docker-images/alpine &lt;dest&gt;</code>causes zot to synchronize the content with the docker.io registry: <code>docker.io/library/alpine:latest</code>to the zot registry: <code>localhost:8080/docker-images/alpine:latest</code>before delivering the content to the requestor at <code>&lt;dest&gt;</code>.</p> </li> <li> <p>This initial user request for content from the zot registry: <code>skopeo copy --src-tls-verify=false docker://localhost:8080/k8s-images/kube-proxy:v1.19.2 &lt;dest&gt;</code>causes zot to synchronize the content with the gcr.io registry: <code>k8s.gcr.io/kube-proxy:v1.19.2</code> to the zot registry: <code>localhost:8080/k8s-images/kube-proxy:v1.19.2</code>before delivering the content to the requestor at <code>&lt;dest&gt;</code>.</p> </li> </ol> <p>You can use this command: <code>curl http://localhost:8080/v2/_catalog</code>to display the local repositories:</p> <pre><code>  {\n    \"repositories\":[\n      \"docker-images/alpine\",\n      \"k8s-images/kube-proxy\"\n    ]\n  }\n</code></pre>"},{"location":"articles/mirroring/#example-multiple-registries-with-mixed-mirroring-modes","title":"Example: Multiple registries with mixed mirroring modes","text":"<p>The following is an example of a zot configuration file for mirroring multiple upstream registries.</p> <pre><code>{\n  \"distSpecVersion\": \"1.1.0-dev\",\n  \"storage\": {\n    \"rootDirectory\": \"/tmp/zot\"\n  },\n  \"http\": {\n    \"address\": \"127.0.0.1\",\n    \"port\": \"8080\"\n  },\n  \"log\": {\n    \"level\": \"debug\"\n  },\n  \"extensions\": {\n    \"sync\": {\n      \"enable\": true,\n      \"credentialsFile\": \"./examples/sync-auth-filepath.json\",\n      \"registries\": [\n        {\n          \"urls\": [\n            \"https://registry1:5000\"\n          ],\n          \"onDemand\": false,\n          \"pollInterval\": \"6h\",\n          \"tlsVerify\": true,\n          \"certDir\": \"/home/user/certs\",\n          \"maxRetries\": 3,\n          \"retryDelay\": \"5m\",\n          \"onlySigned\": true,\n          \"content\": [\n            {\n              \"prefix\": \"/repo1/repo\",\n              \"tags\": {\n                \"regex\": \"4.*\",\n                \"semver\": true\n              }\n            },\n            {\n              \"prefix\": \"/repo1/repo\",\n              \"destination\": \"/repo\",\n              \"stripPrefix\": true\n            },\n            {\n              \"prefix\": \"/repo2/repo\"\n            }\n          ]\n        },\n        {\n          \"urls\": [\n            \"https://registry2:5000\",\n            \"https://registry3:5000\"\n          ],\n          \"pollInterval\": \"12h\",\n          \"tlsVerify\": false,\n          \"onDemand\": false,\n          \"content\": [\n            {\n              \"prefix\": \"/repo2\",\n              \"tags\": {\n                \"semver\": true\n              }\n            }\n          ]\n        },\n        {\n          \"urls\": [\n            \"https://docker.io/library\"\n          ],\n          \"onDemand\": true,\n          \"tlsVerify\": true,\n          \"maxRetries\": 6,\n          \"retryDelay\": \"5m\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"articles/mirroring/#example-support-for-subpaths-in-local-storage","title":"Example: Support for subpaths in local storage","text":"<p><pre><code>{\n  \"distSpecVersion\": \"1.0.1\",\n  \"storage\": {\n    \"subPaths\":{\n      \"/kube-proxy\":{\n        \"rootDirectory\": \"/tmp/kube-proxy\",\n        \"dedupe\": true,\n        \"gc\": true\n       }\n     },\n    \"rootDirectory\": \"/tmp/zot\",\n    \"gc\": true\n  },\n  \"http\": {\n    \"address\": \"0.0.0.0\",\n    \"port\": \"8080\"\n  },\n  \"log\": {\n    \"level\": \"debug\"\n  },\n  \"extensions\": {\n    \"sync\": {\n      \"enable\": true,\n      \"registries\": [\n        {\n          \"urls\": [\"https://k8s.gcr.io\"],\n          \"content\": [\n            {\n              \"destination\": \"/kube-proxy\", \n              \"prefix\": \"**\"\n            }\n          ],\n          \"onDemand\": true,\n          \"tlsVerify\": true,\n          \"maxRetries\": 2,\n          \"retryDelay\": \"5m\"\n        }\n      ]\n    }\n  }\n}\n</code></pre> With this zot configuration, the sync behavior is as follows:</p> <ul> <li>This user request for content from the zot registry: <code>skopeo copy --src-tls-verify=false docker://localhost:8080/kube-proxy/kube-proxy:v1.19.2 &lt;dest&gt;</code>causes zot to synchronize the content with this remote registry: <code>k8s.gcr.io/kube-proxy:v1.19.2</code>to the zot registry: <code>localhost:8080/kube-proxy/kube-proxy:v1.19.2</code>before delivering the content to the requestor at <code>&lt;dest&gt;</code>.</li> </ul> <p>You can use this command: <code>curl http://localhost:8080/v2/_catalog</code>to display the local repositories:</p> <pre><code>  {\n    \"repositories\":[\n      \"docker-images/alpine\",\n      \"k8s-images/kube-proxy\",\n      \"kube-proxy/kube-proxy\"\n    ]\n  }\n</code></pre> <p>In zot storage, the requested content is located here: <code>/tmp/zot/kube-proxy/kube-proxy/kube-proxy/</code>This subpath is created from the following path components:</p> <ul> <li><code>/tmp/zot</code> is the <code>rootDirectory</code> of the zot registry</li> <li><code>kube-proxy</code> is the <code>rootDirectory</code> of the storage subpath</li> <li><code>kube-proxy</code> is the sync <code>destination</code> parameter</li> <li><code>kube-proxy</code> is the repository name</li> </ul>"},{"location":"articles/mirroring/#example-support-for-aws-ecr","title":"Example: Support for AWS ECR","text":"<p>This is an example configuration demonstrating how to use the sync extension with Amazon ECR (Elastic Container Registry) credential helper. The configuration enables zot to synchronize container images from an ECR registry.</p> <pre><code>\"extensions\": {\n        \"sync\": {\n            \"credentialsFile\": \"\",\n            \"DownloadDir\": \"/tmp/zot\",\n            \"registries\": [\n                {\n                    \"urls\": [\n                        \"https://ACCOUNTID.dkr.ecr.REGION.amazonaws.com\"\n                    ],\n                    \"onDemand\": true,\n                    \"maxRetries\": 5,\n                    \"retryDelay\": \"2m\",\n                    \"credentialHelper\": \"ecr\"\n                }\n            ]\n        }\n    }\n</code></pre>"},{"location":"articles/monitoring/","title":"Monitoring the registry","text":"<p> zot supports a range of monitoring tools including logging, metrics, and benchmarking.</p> <p>The following sections describe how to configure logging and monitoring with zot. You can use zot's benchmarking tool to test your configuration and deployment, as described in Benchmarking zot with zb.</p>"},{"location":"articles/monitoring/#logging","title":"Logging","text":"<p>Logging for zot operations is configured with the <code>log</code> attribute in the configuration file, as shown in the following example.</p> <pre><code>\"log\":{\n  \"level\":\"debug\",\n  \"output\":\"/tmp/zot.log\",\n  \"audit\": \"/tmp/zot-audit.log\"\n}\n</code></pre> <p>The following table lists the configurable attributes.</p> Attribute Description <p><code>level</code></p> <p>The minimum level for logged events. The levels are: <code>panic,</code> <code>fatal,</code> <code>error,</code> <code>warn,</code> <code>info,</code> <code>debug,</code> and <code>trace.</code></p> <p><code>output</code></p> <p>The filesystem path for the log output file. The default is <code>stdout</code>.</p> <p><code>audit</code></p> <p>(Optional) If a filesystem path is specified for audit logging, an audit log is enabled and will be stored at the specified path.</p>"},{"location":"articles/monitoring/#metrics","title":"Metrics","text":"<p>The available methods for collecting metrics varies depending on whether your zot installation is a minimal (distribution-spec-only) image or a full image including extensions.</p>"},{"location":"articles/monitoring/#enabling-metrics-for-a-full-zot-image-with-extensions","title":"Enabling metrics for a full zot image with extensions","text":"<p>Add the <code>metrics</code> attribute under <code>extensions</code> in the configuration file to enable and configure metrics, as shown in the following example.</p> <pre><code>\"extensions\": {\n    \"metrics\": {\n        \"enable\": true,\n        \"prometheus\": {\n            \"path\": \"/metrics\"\n        }\n    }\n}\n</code></pre> <p>The following table lists the configurable attributes for metrics collection.</p> Attribute Description <code>enable</code> If this attribute is missing, metrics collection is enabled by default. Metrics collection can be disabled by setting this attribute to <code>false</code>. <code>prometheus</code> Attributes under <code>prometheus</code> contain configuration settings for the Prometheus node exporter. <code>path</code> The server path on which metrics will be exposed."},{"location":"articles/monitoring/#collecting-metrics-from-a-minimal-zot-image-using-a-node-exporter","title":"Collecting metrics from a minimal zot image using a node exporter","text":"<p>Although a minimal zot image does not contain a node exporter, it exposes internal metrics in a Prometheus format for collection by a separate node exporter tool such as zxp. The zot companion binary <code>zxp</code> is a node exporter that can be deployed with a minimal zot image in order to scrape metrics from the zot server.</p> <p>Metrics are automatically enabled in the zot server upon first scrape from the node exporter and the metrics are automatically disabled when the node exporter has not performed any scraping for some period. No extra zot configuration is needed for this behavior.</p> <p>You can download the zxp executable binary for your server platform and architecture under \"Assets\" on the GitHub zot releases page.</p> <p>The binary image is named using the target platform and architecture. For example, the binary for an Intel-based MacOS server is <code>zxp-darwin-amd64</code>. To configure the zxp example image, run this command:</p> <p><code>zxp-darwin-amd64 config zxp-config-file</code></p> <p> For convenience, you can rename the binary image file to simply <code>zxp.</code></p> <p> A sample Dockerfile for zxp is available at Dockerfile-zxp.</p> <p>The configuration file of zxp contains connection details for the zot server from which it will scrape metrics. The following JSON structure is an example of the <code>zxp-config-file</code> contents:</p> <pre><code>{\n    \"Server\": {\n        \"protocol\": \"http\",\n        \"host\": \"127.0.0.1\",\n        \"port\": \"8080\"\n    },\n    \"Exporter\": {\n        \"port\": \"8081\",\n        \"log\": {\n            \"level\": \"debug\"\n        }\n    }\n}\n</code></pre> <p> The zxp module does not have Prometheus integration.</p> <p>The zxp module is not needed with a full zot image.</p>"},{"location":"articles/monitoring/#authorization","title":"Authorization","text":"<p>The server supports configuring authorization for the endpoint used for metrics, in both the zot minimal image, and the image including the metrics extension. For more details see the authentication and authorization article.</p>"},{"location":"articles/pprofiling/","title":"Performance Profiling in zot","text":"<p> Use zot's built-in profiling tools to collect and analyze runtime performance.</p> <p>The profiling capabilities within zot allow a zot administrator to collect and export a range of diagnostic performance data such as CPU intensive function calls, memory allocations, and execution traces. The collected data can then be analyzed using Go tools and a variety of available visualization tools.</p> <p> If authentication is enabled, only a zot admin user can access the APIs for profiling.</p> <p> All examples in this article assume that the zot registry is running at <code>localhost:8080</code>.</p>"},{"location":"articles/pprofiling/#what-data-is-available","title":"What data is available?","text":"<p>The zot source code incorporates golang's pprof package of runtime analysis tools to collect data for the following performance-related profiles:</p> Profile Description allocs A sampling of all past memory allocations. block Stack traces that led to blocking on synchronization primitives. cmdline The command line invocation of the current program. goroutine Stack traces of all current goroutines. Use <code>debug=2</code> as a URL query parameter to export in the same format as an unrecovered panic. heap A sampling of memory allocations of live objects. You can specify the <code>gc</code> GET parameter to run GC before taking the heap sample. mutex Stack traces of holders of contended mutexes. profile CPU usage profile. You can specify the duration in the <code>seconds</code> URL query parameter. After receiving the profile file, use the <code>go tool pprof</code> command to investigate the profile. threadcreate Stack traces that led to the creation of new OS threads. trace A trace of execution of the current program. You can specify the duration in the <code>seconds</code> URL query parameter. After you get the trace file, use the <code>go tool trace</code> command to investigate the trace. <p>To return a current HTML-format profile list along with a count of currently available records for each profile, use the following API command: </p> <pre><code>/v2/_zot/pprof/\n</code></pre> <p> If authentication is enabled, only an admin user can access this API.</p>"},{"location":"articles/pprofiling/#how-do-i-export-profile-data","title":"How do I export profile data?","text":"<p>To collect and export any available profile, use the following API command format:</p> <pre><code>/v2/_zot/pprof/&lt;profile-type&gt;[?&lt;query-parameters&gt;]\n</code></pre> <p>The following example shows an API request for the CPU usage profile named <code>profile</code> using a collection window of 30 seconds:</p> <pre><code>$ curl -s http://localhost:8080/v2/_zot/pprof/profile?seconds=30 &gt; cpu.prof\n</code></pre> <p>This command example creates an output data file named \"cpu.prof\".</p> <ul> <li>The query parameter <code>?seconds=&lt;number&gt;</code> specifies the number of seconds to gather the profile data. If this parameter is not specified, the default is 30 seconds.</li> <li>In this example, the raw output data is redirected to a file named \"cpu.prof\". Alternatively, you can use <code>curl -O</code> to create a file with the default profile name (in this case, \"profile\"). If no output file is specified by either a cURL flag or an output redirection, the cURL command fails with \"Failure writing output to destination\". </li> <li>The command output file is in a machine-readable format that can be interpreted by performance analyzers.</li> </ul>"},{"location":"articles/pprofiling/#analyzing-the-cpu-usage-profile-using-go-tool-pprof","title":"Analyzing the CPU usage profile using <code>go tool pprof</code>","text":"<p>Go's pprof package provides a variety of presentation formats for analyzing runtime performance.</p> <p>For detailed information, see the pprof documentation.</p>"},{"location":"articles/pprofiling/#generating-a-pprof-web-presentation","title":"Generating a pprof web presentation","text":"<p>When an HTTP port is specified as a command flag, the <code>go tool pprof</code> command installs and opens a local web server that provides a web interface for viewing and analyzing the profile data.  This example opens a localhost page at port 9090 for viewing the CPU usage data captured in the profile file named \"cpu.prof\". </p> <pre><code>$ go tool pprof -http=:9090 cpu.prof\nServing web UI on http://localhost:9090\n</code></pre> <p>The pprof web view offers several options for viewing and interpreting the collected performance data.  Select VIEW to see the available options:</p> <p></p> <p>A Flame Graph can be very useful for analyzing CPU usage:</p> <p></p>"},{"location":"articles/pprofiling/#generating-a-graphic-image","title":"Generating a graphic image","text":"<p>The pprof package can generate graphic representations of profile data in many formats. This example generates a PNG file representing the CPU usage in the \"cpu.prof\" file.</p> <pre><code>$ go tool pprof -png cpu.prof\nGenerating report in profile001.png\n</code></pre> <p></p>"},{"location":"articles/pprofiling/#opening-a-pprof-interactive-session","title":"Opening a pprof interactive session","text":"<p>This example opens an interactive session with pprof and executes the pprof <code>top</code> command, which displays the top ten modules by CPU usage during the profiling capture window.</p> <pre><code>$ go tool pprof cpu.prof\nType: cpu\nTime: Sep 26, 2023 at 10:01am (PDT)\nDuration: 30s, Total samples = 10ms (  0.1%)\nEntering interactive mode (type \"help\" for commands, \"o\" for options)\n(pprof) top\nShowing nodes accounting for 10ms, 100% of 10ms total\n    flat  flat%   sum%        cum   cum%\n    10ms   100%   100%       10ms   100%  runtime.pthread_cond_signal\n        0     0%   100%       10ms   100%  runtime.findRunnable\n        0     0%   100%       10ms   100%  runtime.mcall\n        0     0%   100%       10ms   100%  runtime.notewakeup\n        0     0%   100%       10ms   100%  runtime.park_m\n        0     0%   100%       10ms   100%  runtime.runSafePointFn\n        0     0%   100%       10ms   100%  runtime.schedule\n        0     0%   100%       10ms   100%  runtime.semawakeup\n(pprof)\n</code></pre>"},{"location":"articles/pprofiling/#analyzing-the-trace-profile-using-go-tool-trace","title":"Analyzing the trace profile using <code>go tool trace</code>","text":"<p>You can collect trace data with the <code>trace</code> profile, as in this example:</p> <pre><code>  $ curl -s -v http://localhost:8080/v2/_zot/pprof/trace?seconds=30 &gt; trace.prof\n</code></pre> <p>Using the <code>go tool trace</code> package, you can analyze the trace data captured in the \"trace.prof\" example file:</p> <pre><code>$ go tool trace trace.prof\n2023/09/21 16:58:58 Parsing trace...\n2023/09/21 16:58:58 Splitting trace...\n2023/09/21 16:58:58 Opening browser. Trace viewer is listening on http://127.0.0.1:62606\n</code></pre> <p>The <code>go tool trace</code> command installs and opens a local web server that provides a web interface for viewing and analyzing the trace data.</p> <p>As an alternative, you can generate a pprof-like profile from the trace file using the following command:</p> <pre><code>$ go tool trace -pprof=[net|sync|syscall|sched] &lt;filename&gt;\n</code></pre> <p>For example:</p> <pre><code>$ go tool trace -pprof=net trace.prof\n</code></pre>"},{"location":"articles/retention/","title":"Configuring zot Tag Retention Policies","text":"<p> To optimize image storage, you can configure tag retention policies to remove images that are no longer needed. </p> <p>Tag retention policies in zot can specify how many tags of a given repository to retain or how long to retain certain tags.</p> <p>You can define tag retention policies that apply one or more of the following rules:</p> <ul> <li>Top &lt;n&gt; tags most recently pushed</li> <li>Top &lt;n&gt; tags most recently pulled</li> <li>Tags pushed in the past &lt;n&gt; hours</li> <li>Tags pulled in the past &lt;n&gt; hours</li> <li>Tags matching a regular expression (regex) pattern</li> </ul>"},{"location":"articles/retention/#configuring-retention-policies","title":"Configuring retention policies","text":"<p>Retention policies are configured in the <code>storage</code> section of the zot configuration file under the <code>retention</code> attribute.  One or more policies can be grouped under the <code>policies</code> attribute.  </p> <p>By default, if no retention policies are defined, all tags are retained.</p> <p> If at least one <code>keepTags</code> policy is defined for a repository, all tags not matching those policies are removed.  To avoid unintended removals, we recommend defining a default policy, as described in Configuration notes.</p>"},{"location":"articles/retention/#configuration-example","title":"Configuration example","text":"<p>The following example is a simple retention configuration with two policies:</p> <ul> <li>The first includes all available configuration attributes. </li> <li>The second acts as a default policy.</li> </ul> <p>simple policy example</p> <pre><code>  \"storage\": {\n    \"retention\": {\n      \"dryRun\": false,\n      \"delay\": \"24h\",\n      \"policies\": [\n        {\n          \"repositories\": [\"infra/*\", \"tmp/**\"],\n          \"deleteReferrers\": false,\n          \"deleteUntagged\": true,\n          \"keepTags\": [{\n            \"patterns\": [\"v2.*\", \".*-prod\"],\n            \"mostRecentlyPushedCount\": 10,\n            \"mostRecentlyPulledCount\": 10,\n            \"pulledWithin\": \"720h\",\n            \"pushedWithin\": \"720h\"\n          }]  \n        },\n        {\n          \"keepTags\": [{\n            \"patterns\": [\".*\"]\n          }]\n        }\n      ]\n    }\n  }\n</code></pre>"},{"location":"articles/retention/#configurable-attributes","title":"Configurable attributes","text":"<p>The following table lists the attributes available in the retention policy configuration.</p> Attribute Value Description dryRun boolean If <code>true</code>, will log a removal action without actually removing the image.  Default is <code>false</code>. delay time Remove untagged and referrers only if they are older than the specified &lt;time&gt; hours, such as 24h. policies list A list of policies. repositories list A list of glob patterns to match repositories. deleteReferrers boolean If true, delete manifests with a missing Subject.  Default is <code>false</code>. deleteUntagged boolean If true, delete untagged manifests.  Default is <code>true</code>. keepTags list Criteria for tags to retain always. mostRecentlyPushedCount count Retains the top &lt;count&gt; most recently pushed tags. mostRecentlyPulledCount count Retains the top &lt;count&gt; most recently pulled tags. pushedWithin time Retains the tags pushed during the last &lt;time&gt; hours, such as 24h. pulledWithin time Retains the tags pulled during the last &lt;time&gt; hours, such as 24h. patterns regex See Notes."},{"location":"articles/retention/#configuration-notes","title":"Configuration notes","text":"<ul> <li>All image retention and garbage collection processing is made per repository, not per groups of repositories. The count of retained images in one repository doesn't impact retention for another repository.</li> <li>A repository will apply the first policy it matches.</li> <li>If a repository matches no policy, the repository and all its tags are retained.  </li> <li>If at least one <code>keepTags</code> policy is defined for a repository, all tags not matching those policies are removed. </li> <li>If <code>keepTags</code> is present but empty, all tags are retained.</li> <li>In general, when multiple rules are configured, a tag is retained if it meets at least one rule.</li> <li>When multiple entries are configured under the same <code>keepTags</code> list, there is a logical OR applied between them.</li> <li>When a regex pattern is combined with one or more other rules inside a single <code>keepTags</code> entry, the rules apply only to those tags matching the regex. Given a <code>keepTags</code> entry, the retained tags are: <code>patterns</code> AND (<code>pulledWithin</code> OR <code>pushedWithin</code> OR <code>mostRecentlyPushedCount</code> OR <code>mostRecentlyPulledCount</code>).</li> <li>When you specify a regex pattern with no rules other than the default, all tags matching the pattern are retained.</li> <li>In the repositories list, a single asterisk (/*) matches all first-level items in the repository. A double asterisk (/**) matches all recursively.</li> </ul> <p> We recommend defining a default <code>keepTags</code> policy, such as the following example, as the last policy in the policy list. All tags that don't match the preceding policies will be retained by this default policy:</p> <p>default policy example</p> <pre><code>  {\n    \"keepTags\": [{                               \n        \"patterns\": [\".*\"]\n      }]\n  }\n</code></pre>"},{"location":"articles/retention/#complete-configuration-file-example","title":"Complete configuration file example","text":"<p>The following example shows the configuration of multiple retention policies in the context of a complete configuration file.</p> <pre><code>{\n  \"distSpecVersion\": \"1.1.0-dev\",\n  \"storage\": {\n    \"rootDirectory\": \"/tmp/zot\",\n    \"gc\": true,\n    \"gcDelay\": \"2h\",\n    \"gcInterval\": \"1h\",\n    \"retention\": {\n      \"dryRun\": false,\n      \"delay\": \"24h\",\n      \"policies\": [\n        {\n          \"repositories\": [\"infra/*\", \"prod/*\"],\n          \"deleteReferrers\": false,\n          \"keepTags\": [{\n            \"patterns\": [\"v2.*\", \".*-prod\"]\n          },\n          {\n            \"patterns\": [\"v3.*\", \".*-prod\"],\n            \"pulledWithin\": \"168h\"\n          }]\n        },\n        {\n          \"repositories\": [\"tmp/**\"],\n          \"deleteReferrers\": true,\n          \"deleteUntagged\": true,\n          \"keepTags\": [{\n            \"patterns\": [\"v1.*\"],\n            \"pulledWithin\": \"168h\",\n            \"pushedWithin\": \"168h\"\n          }]\n        },\n        {\n          \"repositories\": [\"**\"],\n          \"deleteReferrers\": true,\n          \"deleteUntagged\": true,\n          \"keepTags\": [{\n            \"mostRecentlyPushedCount\": 10,\n            \"mostRecentlyPulledCount\": 10,\n            \"pulledWithin\": \"720h\",\n            \"pushedWithin\": \"720h\"\n          }]\n        }\n      ]\n    },\n    \"subPaths\": {\n      \"/a\": {\n        \"rootDirectory\": \"/tmp/zot1\",\n        \"dedupe\": true,\n        \"retention\": {\n          \"policies\": [\n            {\n              \"repositories\": [\"a/infra/*\", \"a/prod/*\"],\n              \"deleteReferrers\": false\n            }\n          ]\n        }\n      }\n    }\n  },\n  \"http\": {\n    \"address\": \"127.0.0.1\",\n    \"port\": \"8080\"\n  },\n  \"log\": {\n    \"level\": \"debug\"\n  }\n}\n</code></pre> <p>Given the configuration example above, we can make the following observations.</p> <p>For repositories having names starting with <code>infra/</code> and <code>prod/</code>: - Artifacts referring to missing images will be retained. - Untagged images pushed more than 24h ago (<code>delay</code>) will be deleted by default, as <code>deleteUntagged</code> is not specified. - All tags matching regex pattern <code>v2.*</code> will be retained. - All tags matching regex pattern <code>.*-prod</code> will be retained, as they match the first <code>keepTags</code> entry, so their presence in the second entry is not necessary. - Tags matching regex pattern <code>v3.*</code> will not be deleted if they were pulled within <code>168h</code>. - All other tags will be deleted.</p> <p>For repositories having names starting with <code>tmp/</code>: - Artifacts pushed more than 24h ago (<code>delay</code>) referring to missing images will be deleted. - Untagged images pushed more than 24h ago (<code>delay</code>) will be deleted. - Tags matching regex pattern <code>v1.*</code> will not be deleted if they were pulled within <code>168h</code> or pushed within <code>168h</code>. - All other tags will be deleted.</p> <p>For repositories having names starting with <code>a/infra/</code> and <code>a/prod/</code>: - These repositories are under a separate subpath, with an entirely different retention configuration. - Artifacts referring to missing images will be retained. - Untagged images pushed more than 24h ago will be deleted by default, as <code>deleteUntagged</code> is not specified and the default value for <code>delay</code> is 24h.</p> <p>For the rest of repositories, all of them matching <code>**</code>: - Artifacts pushed more than 24h ago (<code>delay</code>) referring to missing images will be deleted. - Untagged images pushed more than 24h ago (<code>delay</code>) will be deleted. - Tags will be retained if they were pulled within <code>720h</code> or pushed within <code>720h</code> or among the 10 most recently pushed images or among the 10 most recently pulled images. - All other tags will be deleted.</p> <p> <code>subPaths</code> are a separate feature with use cases outside the scope of this article. Do NOT use <code>subPaths</code> just for the purpose of configuring retention.</p>"},{"location":"articles/scaleout/","title":"Scale-out clustering","text":"<p> A cluster of zot instances can be easily scaled with no repo-specific intelligence in the load balancing scheme, using:</p> <ul> <li>Stateless zot instances to simplify scale out</li> <li>Shared remote storage</li> <li>zot release v2.1.0 or later</li> </ul> <p>Beginning with zot release v2.1.0, a new \"scale-out\" architecture greatly reduces the configuration required when deploying large numbers of zot instances. As before, multiple identical zot instances run simultaneously using the same shared reliable storage, but with improved scale and performance in large deployments. A highly scalable cluster can be architected by automatically sharding based on repository name so that each zot instance is responsible for a subset of repositories.</p> <p>In a cloud deployment, the shared backend storage (such as AWS S3) and metadata storage (such as DynamoDB) can also be easily scaled along with the zot instances.</p> <p> For high availability clustering with earlier zot releases, see zot Clustering.</p>"},{"location":"articles/scaleout/#prerequisites","title":"Prerequisites","text":"<p>For easy scaling of instances (replicas), the following conditions must be met:</p> <ul> <li>All zot replicas must be running zot release v2.1.0 (or later) with identical configurations.</li> <li>All zot replicas in the cluster use remote storage at a single shared S3 backend. There is no local caching in the zot replicas.</li> <li>Each zot replica in the cluster has its own IP address, but all replicas use the same port number.</li> </ul>"},{"location":"articles/scaleout/#how-it-works","title":"How it works","text":"<p>Each repo is served by one zot replica, and that replica is solely responsible for serving all images of that repo. A repo in storage can be written to only by the zot replica responsible for that repo.</p> <p>When a zot replica in the cluster receives an image push or pull request for a repo, the receiving replica hashes the repo path and consults a hash table to determine which replica is responsible for the repo. </p> <ul> <li>If the hash indicates that another replica is responsible, the receiving replica forwards the request to the responsible replica and then acts as a proxy, returning the response to the requestor. </li> <li>If the hash indicates that the current (receiving) replica is responsible, the request is handled locally.</li> </ul> <p> For better resistance to collisions and preimage attacks, zot uses SipHash as the hashing algorithm.</p> <p>Either of the following two schemes can be used to reach the cluster.</p>"},{"location":"articles/scaleout/#using-a-single-entry-point-load-balancer","title":"Using a single entry point load balancer","text":"<p>When a single entry point load balancer such as HAProxy is deployed, the number of zot replicas can easily be expanded by simply adding the IP addresses of the new replicas in the load balancer configuration. </p> <p>When the load balancer receives an image push or pull request for a repo, it forwards the request to any replica in the cluster.  No repo-specific programming of the load balancer is needed because the load balancer does not need to know which replica owns which repo. The replicas themselves can determine this.  </p>"},{"location":"articles/scaleout/#using-dns-based-load-balancing","title":"Using DNS-based load balancing","text":"<p>Because the scale-out architecture greatly simplifies the role of the load balancer, it may be possible to eliminate the load balancer entirely. A scheme such as DNS-based routing can be implemented, exposing the zot replicas directly to the clients.</p>"},{"location":"articles/scaleout/#configuration-examples","title":"Configuration examples","text":"<p>In these examples, clustering is supported by using multiple stateless zot replicas with shared S3 storage and an HAProxy (with sticky session) load balancer forwarding traffic to the replicas.</p>"},{"location":"articles/scaleout/#cluster-member-configuration","title":"Cluster member configuration","text":"<p>In the replica configuration, each replica must have a list of its peers configured in the \"members\" section of the JSON structure. This is a list of reachable addresses or hostnames.  Each replica owns one of these addresses.</p> <p>The replica must also have a hash key for hashing the repo path of the image request and a TLS certificate for authenticating with its peers.</p> Click here to view a sample cluster configuration for each replica. See the \"cluster\" section in the JSON structure. <pre><code>{\n  \"distSpecVersion\": \"1.1.0\",\n  \"storage\": {\n    \"rootDirectory\": \"/tmp/zot\",\n    \"dedupe\": false,\n    \"remoteCache\": true,\n    \"storageDriver\": {\n      \"name\": \"s3\",\n      \"rootdirectory\": \"/zot\",\n      \"region\": \"us-east-1\",\n      \"regionendpoint\": \"localhost:4566\",\n      \"bucket\": \"zot-storage\",\n      \"secure\": false,\n      \"skipverify\": false\n    },\n    \"cacheDriver\": {\n      \"name\": \"dynamodb\",\n      \"endpoint\": \"http://localhost:4566\",\n      \"region\": \"us-east-1\",\n      \"cacheTablename\": \"ZotBlobTable\",\n      \"repoMetaTablename\": \"ZotRepoMetadataTable\",\n      \"imageMetaTablename\": \"ZotImageMetaTable\",\n      \"repoBlobsInfoTablename\": \"ZotRepoBlobsInfoTable\",\n      \"userDataTablename\": \"ZotUserDataTable\",\n      \"versionTablename\": \"ZotVersion\",\n      \"apiKeyTablename\": \"ZotApiKeyTable\"\n    }\n  },\n  \"http\": {\n    \"address\": \"0.0.0.0\",\n    \"port\": \"9000\",\n    \"tls\": {\n      \"cert\": \"test/data/server.cert\",\n      \"key\": \"test/data/server.key\"\n    }\n  },\n  \"log\": {\n    \"level\": \"debug\"\n  },\n  \"cluster\": {\n    \"members\": [\n      \"zot-server1:9000\",\n      \"zot-server2:9000\",\n      \"zot-server3:9000\"\n    ],\n    \"hashKey\": \"loremipsumdolors\",\n    \"tls\": {\n      \"cacert\": \"test/data/ca.crt\"\n    }  \n  }\n}\n</code></pre>"},{"location":"articles/scaleout/#haproxy-configuration","title":"HAProxy configuration","text":"<p>The HAProxy load balancer uses a simple round-robin balancing scheme and delivers a cookie to the requestor to maintain a sticky session connection to the assigned replica.</p> Click here to view a sample HAProxy configuration. <pre><code>global\n        log /dev/log    local0\n        log /dev/log    local1 notice\n        chroot /var/lib/haproxy\n        maxconn 2000\n        stats timeout 30s\n\ndefaults\n        log     global\n        mode    tcp\n        option  tcplog\n        option  dontlognull\n        timeout connect 5000\n        timeout client  50000\n        timeout server  50000\n\nfrontend zot\n    bind *:8080\n    default_backend zot-cluster\n\nbackend zot-cluster\n    mode http\n    balance roundrobin\n    cookie SERVER insert indirect nocache\n    server zot-server1 127.0.0.1:9000 check cookie zot-server1\n    server zot-server2 127.0.0.2:9000 check cookie zot-server2\n    server zot-server3 127.0.0.3:9000 check cookie zot-server3\n</code></pre>"},{"location":"articles/scaleout/#when-a-replica-fails","title":"When a replica fails","text":"<p>The scale-out clustering scheme described in this article is not self-healing when a replica fails. In case of a replica failure, only those repositories that are mapped to the failed replica are affected. If the error is not transient, the cluster must be resized and restarted to exclude that replica.</p> <p> With an HAProxy load balancer, we recommend implementing an HAProxy circuit breaker to monitor and protect the cluster.</p>"},{"location":"articles/scaleout/#cve-repository-in-a-zot-cluster-environment","title":"CVE repository in a zot cluster environment","text":"<p>CVE scanning is not supported for cloud deployments. In the scale-out clustering scheme described in this article, CVE scanning is disabled. In this case, we recommend implementing a CVE repository with a zot instance outside of the cluster using a local disk for storage and Trivy as the detection engine.</p>"},{"location":"articles/scaleout/#registry-sync","title":"Registry sync","text":"<p>The sync feature of zot, either on demand or periodic, is compatible with scale-out clustering. In this case, the repo names are hashed to a particular replica and only that replica will perform the sync.</p>"},{"location":"articles/security-posture/","title":"zot Security Posture","text":"<p> An overview of zot build-time and runtime security hardening features, including:</p> <ul> <li>Build-time hardening such as PIE-mode builds</li> <li>Minimal-build option for smaller attack surface</li> <li>Open Source Security Foundation best practices for CI/CD</li> <li>Non-root deployment</li> <li>Robust authentication/authorization options</li> </ul> <p>The zot project takes a defense-in-depth approach to security, applying industry-standard best practices at various stages. Recognizing that security hardening and product features are sometimes in conflict with each other, we also provide flexibility both at build and deployment time.</p>"},{"location":"articles/security-posture/#build-time-hardening","title":"Build-time hardening","text":"<p>The following are the steps taken during build-time.</p>"},{"location":"articles/security-posture/#pie-build-mode","title":"PIE build-mode","text":"<p>The zot binary is built with PIE build-mode enabled to take advantage of ASLR support in modern operating systems such as Linux ASLR. While zot is intended to be a long-running service (without frequent restarts), it prevents attackers from developing a generic attack that depends on predictable memory addresses across multiple zot deployments.</p>"},{"location":"articles/security-posture/#conditional-builds","title":"Conditional builds","text":"<p>Functionality in zot is broadly organized as a core Distribution Specification implementation and additional features as extensions. The rationale behind this approach is to minimize or control library dependencies that get included in the binary and consequently the attack surface.</p> <p>We currently build and release two image flavors:</p> <ul> <li> <p>minimal, which is a minimal Distribution Specification     conformant registry, and</p> </li> <li> <p>full, which incorporates the minimal build and all     extensions</p> </li> </ul> <p>The minimal flavor is for the security-minded and minimizes the number of dependencies and libraries. The full flavor is for the functionality-minded with the caveat that the attack surface of the binary is potentially broader. However by no means are these the only options. Our build (via the <code>Makefile</code>) provides the flexibility to pick and choose extensions in order to build a binary between minimal and full. For example,</p> <p><code>make EXTENSIONS=search binary</code></p> <p>produces a zot binary with only the search feature enabled.</p>"},{"location":"articles/security-posture/#cicd-pipeline","title":"CI/CD pipeline","text":"<p>zot CI/CD process attempts to align with the Open Source Security Foundation (OSSF) best practices guidelines to achieve high code quality.</p>"},{"location":"articles/security-posture/#code-reviews","title":"Code reviews","text":"<p>zot is an open source project and all code submissions are open and transparent. Every pull request (PR) submitted to the project repository must be reviewed by the code owners. We have additional CI/CD workflows monitoring for unreviewed commits.</p>"},{"location":"articles/security-posture/#cicd-checks","title":"CI/CD checks","text":"<p>All PRs must pass the full CI/CD pipeline checks including unit, functional, and integration tests, code quality and style checks, and performance regressions. In addition, all binaries produced are subjected to further security scans to detect any known vulnerabilities.</p>"},{"location":"articles/security-posture/#runtime-hardening","title":"Runtime hardening","text":"<p>The following steps can be taken to harden a zot deployment.</p>"},{"location":"articles/security-posture/#unprivileged-runtime-process","title":"Unprivileged runtime process","text":"<p>Running zot doesn\u2019t require root privileges. In fact, the recommended approach is to create a separate user/group ID for the zot process.</p>"},{"location":"articles/security-posture/#authentication","title":"Authentication","text":"<p>All interactions with zot are over HTTP APIs, and <code>htpasswd</code>-based local authentication, LDAP, mutual TLS, and token-based authentication mechanisms are supported. We strongly recommend enabling a suitable mechanism for your deployment use case in order to prevent unauthorized access. See the provided authentication examples.</p>"},{"location":"articles/security-posture/#access-control","title":"Access control","text":"<p>Following authentication, it is further possible to allow or deny actions by a user on a particular repository stored on the zot registry. See the provided access control examples.</p>"},{"location":"articles/security-posture/#vulnerability-scans","title":"Vulnerability scans","text":"<p>Apart from hardening the deployment itself, zot also supports security scanning of stored container images.</p>"},{"location":"articles/security-posture/#reporting-security-issues","title":"Reporting security issues","text":"<p>We understand that no software is perfect and in spite of our best efforts, security bugs may be found. Refer to our security policy for taking a responsible course of action when reporting security bugs.</p>"},{"location":"articles/storage/","title":"Storage Planning with zot","text":"<p> zot supports the following features to provide OCI standards-based, vendor-agnostic image storage:</p> <ul> <li>Local and remote file storage</li> <li>Inline deduplication and garbage collection</li> <li>Data scrubbing in background</li> </ul>"},{"location":"articles/storage/#storage-model","title":"Storage model","text":"<p>Data handling in zot revolves around two main principles: that data and APIs on the wire conform to the OCI Distribution Specification and that data on the disk conforms to the OCI Image Layout Specification. As a result, any client that is compliant with the Distribution Specification can read from or write to a zot registry. Furthermore, the actual storage is simply an OCI Image Layout. With only these two specification documents in hand, the entire data flow inside can be easily understood.</p> <p> zot does not implement, support, or require any vendor-specific protocols, including that of Docker.</p>"},{"location":"articles/storage/#hosting-an-oci-image-layout","title":"Hosting an OCI image layout","text":"<p>Because zot supports the OCI image layout, it can readily host and serve any directories holding a valid OCI image layout even when those directories have been created elsewhere. This property of zot is suitable for use cases in which container images are independently built, stored, and transferred, but later need to be served over the network.</p>"},{"location":"articles/storage/#storage-features","title":"Storage features","text":"<p>Exposing flexibility in storage capabilities is a key tenet for catering to the requirements of varied environments ranging from cloud to on-premises to IoT.</p>"},{"location":"articles/storage/#commit","title":"Commit","text":"<p>Most modern filesystems buffer and flush RAM data to disk after a delay. The purpose of this function is to improve performance at the cost of higher disk memory usage. In embedded devices such as Raspberry Pi, for example, where RAM may be very limited and at a premium, it is desirable to flush data to disk more frequently. The zot storage configuration exposes an option called <code>commit</code> which, when enabled, causes data writes to be committed to disk immediately. This option is disabled by default.</p>"},{"location":"articles/storage/#deduplication","title":"Deduplication","text":"<p>Deduplication is a storage space saving feature wherein only a single copy of specific content is maintained on disk while many different image manifests may hold references to that same content. The deduplication option (<code>dedupe</code>) is also available for supported cloud storage backends.</p> <p>Upon startup, zot enforces the <code>dedupe</code> status on the existing storage. If the <code>dedupe</code> status upon startup is <code>true</code>, zot deduplicates all blobs found in storage, both local and remote.  If the status upon startup is <code>false</code>, zot restores cloud storage blobs to their original state. There is no need for zot to restore local filesystem storage if hard links are used.</p>"},{"location":"articles/storage/#garbage-collection","title":"Garbage collection","text":"<p>After an image is deleted by deleting an image manifest, the corresponding blobs can be purged to free up space. However, since Distribution Specification APIs are not transactional between blob and manifest lifecycle, care must be taken so as not to put the storage in an inconsistent state. Garbage collection in zot is an inline feature meaning that it is not necessary to take the registry offline. See Configuring garbage collection for details. </p>"},{"location":"articles/storage/#scrub","title":"Scrub","text":"<p>The <code>scrub</code> function, available as an extension, makes it possible to ascertain data validity by computing hashes on blobs periodically and continuously so that any bit rot is caught and reported early.</p>"},{"location":"articles/storage/#storage-backends","title":"Storage backends","text":"<p>The following types of storage backends are supported.</p>"},{"location":"articles/storage/#local-filesystem","title":"Local filesystem","text":"<p>zot can store and serve files from one or more local directories. A minimum of one root directory is required for local hosting, but additional hosted directories can be added. When accessed by HTTP APIs, all directories can appear as a single data store.</p> <p> Remote filesystems that are mounted and accessible locally such as <code>NFS</code> or <code>fuse</code> are treated as local filesystems.</p>"},{"location":"articles/storage/#remote-filesystem","title":"Remote filesystem","text":"<p>zot can also store data remotely in the cloud, using the storage APIs of the cloud service. Currently, zot supports only the AWS s3 storage service.</p>"},{"location":"articles/storage/#example-configuration-for-remote-s3-storage","title":"Example: configuration for remote (s3) storage","text":"Click here to view a sample zot configuration for remote storage. <pre><code>{\n    \"distSpecVersion\": \"1.0.1-dev\",\n    \"storage\": {\n        \"rootDirectory\": \"/tmp/zot\",\n        \"dedupe\": true,\n        \"storageDriver\": {\n            \"name\": \"s3\",\n            \"rootdirectory\": \"/zot\",\n            \"region\": \"us-east-2\",\n            \"bucket\": \"zot-storage\",\n            \"secure\": true,\n            \"skipverify\": false\n        },\n        \"cacheDriver\": {\n            \"name\": \"dynamodb\",\n            \"endpoint\": \"http://localhost:4566\",\n            \"region\": \"us-east-2\",\n            \"tableName\": \"MainTable\"\n        },\n    },\n    \"http\": {\n        \"address\": \"127.0.0.1\",\n        \"port\": \"8080\"\n    },\n    \"log\": {\n        \"level\": \"debug\"\n    }\n}\n</code></pre>"},{"location":"articles/storage/#configuring-zot-storage","title":"Configuring zot storage","text":"<p>Filesystem storage is configured with the <code>storage</code> attribute in the zot configuration file, as shown in the following example.</p> <pre><code>    \"storage\":{\n        \"rootDirectory\":\"/tmp/zot\",\n        \"commit\": true,\n        \"dedupe\": true,\n        \"gc\": true,\n        \"gcDelay\": \"1h\",\n        \"gcInterval\": \"24h\"\n    }\n</code></pre>"},{"location":"articles/storage/#configurable-attributes","title":"Configurable attributes","text":"<p>The following table lists the attributes of the <code>storage</code> configuration.</p> Attribute Description <p><code>rootDirectory</code></p> <p>Location of the images stored in the server file system.</p> <p><code>commit</code></p> <p>For faster performance, data written by zot is retained in memory before being periodically committed to disk by the operating system. To eliminate this retention time and cause data to be written to disk immediately, set to <code>true</code>. This prevents data loss but reduces performance.</p> <p><code>dedupe</code></p> <p>If the server filesystem supports hard links, you can optimize storage space by enabling inline deduplication of layers and blobs that are shared among multiple container images. Deduplication is enabled by default. Set to <code>false</code> to disable deduplication.</p> <p><code>gc</code></p> <p>When an image is deleted, either by tag or by reference, orphaned blobs can lead to wasted storage. Garbage collection (gc) is enabled by default to reclaim this space. Set to <code>false</code> to disable garbage collection.</p> <p><code>gcDelay</code></p> <p>(Optional) If garbage collection is enabled, causes it to run once after the specified delay time. The default is 1 hour. Requires the <code>gc</code> attribute to be <code>true</code>.</p> <p><code>gcInterval</code></p> <p>(Optional) If garbage collection is enabled, causes periodic collection at the specified interval. Must be set based on use cases and user workloads. If no value is specified, there is no periodic collection. Requires the <code>gc</code> attribute to be <code>true</code>.</p> <p><code>subpaths</code></p> <p>You can store and serve images from multiple filesystems, each with their own repository paths and settings. The following example shows three subpaths.</p> <pre><code>\"storage\":{\n  \"subPaths\": {\n    \"/a\": {\n      \"rootDirectory\": \"/tmp/zot1\",\n      \"dedupe\": true,\n      \"gc\": true\n    },\n    \"/b\": {\n      \"rootDirectory\": \"/tmp/zot2\",\n      \"dedupe\": true\n    },\n    \"/c\": {\n      \"rootDirectory\": \"/tmp/zot3\",\n      \"dedupe\": false\n    }\n  }\n}</code></pre> <p><code>storageDriver</code></p> <p>(Remote storage only) Contains settings for a remote storage service. See Configuring remote storage with s3 for details.</p> <p><code>cacheDriver</code></p> <p>Specifies which database is used to store duplicate blobs when deduplication is enabled. See Cache drivers for details.</p> <p></p>"},{"location":"articles/storage/#configuring-garbage-collection","title":"Configuring garbage collection","text":"<p>The zot configuration model allows for enabling and disabling garbage collection (<code>gc</code>) and specifying a periodic interval (<code>gcInterval</code>) for collection. </p> <code>gc</code> <code>gcInterval</code> Result false n/a GC disabled omitted n/a GC enabled with 1 hour interval (default) true omitted GC enabled with 1 hour interval true 0 GC runs only once true &gt;0 GC enabled with specified interval <p>The configuration model also allows the configuration of a tunable delay (<code>gcDelay</code>), which can be set depending on client network speeds and the size of blobs. The <code>gcDelay</code> attribute causes collection to run once after the specified delay time.  This attribute has a default value of one hour (<code>1h</code>).</p> <p></p>"},{"location":"articles/storage/#configuring-remote-storage-with-s3","title":"Configuring remote storage with s3","text":"<p>To configure an Amazon Simple Storage Service (s3) bucket for zot, use the <code>storageDriver</code> attribute in the zot configuration file, as shown in the following example:</p> <pre><code>    \"storage\": {\n        \"rootDirectory\": \"/tmp/zot\",\n        \"storageDriver\": {\n            \"name\": \"s3\",\n            \"region\": \"us-east-2\",\n            \"bucket\": \"zot-storage\",\n            \"secure\": true,\n            \"skipverify\": false,\n            \"accesskey\": \"&lt;YOUR_ACCESS_KEY_ID&gt;\",\n            \"secretkey\": \"&lt;YOUR_SECRET_ACCESS_KEY&gt;\"\n        }\n    }\n</code></pre> <p>The following table lists the attributes of <code>storageDriver</code> when configuring s3 for remote storage:</p> Attribute Required Description name yes Name of storage driver. Only <code>s3</code> is supported for now. accesskey no Your AWS Access Key. If you use IAM roles, omit to fetch temporary credentials from IAM. secretkey no Your AWS Secret Key. If you use IAM roles, omit to fetch temporary credentials from IAM. region yes The AWS region in which your bucket exists. regionendpoint no Endpoint for S3 compatible storage services (Minio, etc). forcepathstyle no To enable path-style addressing when the value is set to true. The default is true. bucket yes The bucket name in which you want to store the registry\u2019s data. encrypt no Specifies whether the registry stores the image in encrypted format or not. A boolean value. The default is false. keyid no Optional KMS key ID to use for encryption (encrypt must be true, or this parameter is ignored). The default is none. secure no Indicates whether to use HTTPS instead of HTTP. A boolean value. The default is true. skipverify no Skips TLS verification when the value is set to true. The default is false. v4auth no Indicates whether the registry uses Version 4 of AWS\u2019s authentication. The default is true. chunksize no The S3 API requires multipart upload chunks to be at least 5MB. This value should be a number that is larger than 5 * 1024 * 1024. multipartcopychunksize no Default chunk size for all but the last S3 Multipart Upload part when copying stored objects. multipartcopymaxconcurrency no Max number of concurrent S3 Multipart Upload operations when copying stored objects. multipartcopythresholdsize no Default object size above which S3 Multipart Upload will be used when copying stored objects. rootdirectory no This is a prefix that is applied to all S3 keys to allow you to segment data in your bucket if necessary. storageclass no The S3 storage class applied to each registry file. The default is STANDARD. useragent no The User-Agent header value for S3 API operations. usedualstack no Use AWS dual-stack API endpoints. accelerate no Enable S3 Transfer Acceleration. objectacl no The S3 Canned ACL for objects. The default value is \u201cprivate\u201d. loglevel no The log level for the S3 client. The default value is off. <p>For more information, see the s3 storage driver docs.</p>"},{"location":"articles/storage/#s3-credentials","title":"s3 Credentials","text":"<p>In the s3 configuration file example, the s3 credentials were configured with the attributes <code>accesskey</code> and <code>secretkey.</code> As an alternative, you can omit these attributes from the configuration file and you can configure them using environment variables or a credential file.</p> <ul> <li> <p>Environment variables</p> <p>zot looks for credentials in the following environment variables:</p> <pre><code>AWS_ACCESS_KEY_ID\nAWS_SECRET_ACCESS_KEY\nAWS_SESSION_TOKEN (optional)\n</code></pre> </li> <li> <p>Credential file</p> <p>A credential file is a plaintext file that contains your access keys, as shown in the following example.</p> <pre><code>[default]\naws_access_key_id = &lt;YOUR_DEFAULT_ACCESS_KEY_ID&gt;\naws_secret_access_key = &lt;YOUR_DEFAULT_SECRET_ACCESS_KEY&gt;\n\n[test-account]\naws_access_key_id = &lt;YOUR_TEST_ACCESS_KEY_ID&gt;\naws_secret_access_key = &lt;YOUR_TEST_SECRET_ACCESS_KEY&gt;\n\n[prod-account]\n; work profile\naws_access_key_id = &lt;YOUR_PROD_ACCESS_KEY_ID&gt;\naws_secret_access_key = &lt;YOUR_PROD_SECRET_ACCESS_KEY&gt;\n</code></pre> <p>The <code>[default]</code> heading defines credentials for the default profile, which zot will use unless you configure it to use another profile. You can specify a profile using the <code>AWS_PROFILE</code> environment variable as in this example:</p> <pre><code>AWS_PROFILE=test-account\n</code></pre> <p>The credential file must be named <code>credentials.</code> The file must be located in the <code>.aws/</code> subdirectory in the home directory of the same server that is running your zot application.</p> </li> </ul> <p>For more details about specifying s3 credentials, see the AWS documentation.</p>"},{"location":"articles/storage/#s3-permissions-scopes","title":"S3 permissions scopes","text":"<p>The following AWS policy is required by zot for push and pull. </p> <p> Replace S3_BUCKET_NAME with the name of your s3 bucket.</p> <pre><code>[AWS CONFIGURATION]\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:ListBucket\",\n        \"s3:GetBucketLocation\",\n        \"s3:ListBucketMultipartUploads\"\n      ],\n      \"Resource\": \"arn:aws:s3:::&lt;S3_BUCKET_NAME&gt;\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n        \"s3:DeleteObject\",\n        \"s3:ListMultipartUploadParts\",\n        \"s3:AbortMultipartUpload\"\n      ],\n      \"Resource\": \"arn:aws:s3:::&lt;S3_BUCKET_NAME&gt;/*\"\n    }\n  ]\n}\n</code></pre> <p>For more details about configuring AWS policies, see the AWS documentation.</p> <p></p>"},{"location":"articles/storage/#cache-drivers","title":"Cache drivers","text":"<p>A cache driver is used to store duplicate blobs when <code>dedupe</code> is enabled.  zot supports database caching using BoltDB as the cache driver for local filesystems and DynamoDB and Redis for remote filesystems.</p>"},{"location":"articles/storage/#boltdb","title":"BoltDB","text":"<p>If you don't specify a cache driver, zot defaults to BoltDB.  BoltDB is stored either in zot's root directory or in the subpath root directory.</p> <pre><code>    \"storage\": {\n        \"rootDirectory\": \"/tmp/zot\",\n        \"dedupe\": true\n    }\n</code></pre> <p>In this example, BoltDB can be found at /tmp/zot/cache.db.</p> <p> Because BoltDB does not provide concurrent access for writes, multiple instances/replicas of zot are not supported with a BoltDB configuration.</p>"},{"location":"articles/storage/#dynamodb","title":"DynamoDB","text":"<p>To use DynamoDB as the cache driver, the following storage configuration must be present:</p> <ul> <li><code>dedupe</code> is enabled</li> <li><code>remoteCache</code> is enabled</li> <li><code>cacheDriver</code> attribute is configured as in the following example:</li> </ul> <pre><code>    \"storage\": {\n        \"rootDirectory\": \"/tmp/zot\",\n        \"dedupe\": true,\n        \"remoteCache\": true,\n        \"cacheDriver\": {\n            \"name\": \"dynamodb\",                  // driver name\n            \"endpoint\": \"http://localhost:4566\", // aws endpoint\n            \"region\": \"us-east-2\",               // aws region\n            \"cacheTablename\": \"ZotBlobTable\"     // table to store deduped blobs\n        }\n    },\n</code></pre> <p>The AWS GO SDK loads additional configuration and credentials values from your environment variables, shared credentials, and shared configuration files.</p> <p>If the search extension is enabled, additional parameters are required:</p> <pre><code>        \"cacheDriver\": {\n            \"name\": \"dynamodb\",\n            \"endpoint\": \"http://localhost:4566\",\n            \"region\": \"us-east-2\",\n            \"cacheTablename\": \"ZotBlobTable\",\n            // used by auth\n            \"userDataTablename\": \"ZotUserDataTable\",\n            \"apiKeyTablename\": \"ZotApiKeyDataTable\",\n            // used by search extension\n            \"repoMetaTablename\": \"ZotRepoMetadataTable\",\n            \"imageMetaTablename\": \"ZotImageMetaTable\",\n            \"repoBlobsInfoTablename\": \"ZotRepoBlobsInfoTable\",\n            \"versionTablename\": \"ZotVersion\"\n        }\n</code></pre>"},{"location":"articles/storage/#dynamodb-permission-scopes","title":"DynamoDB permission scopes","text":"<p>The following AWS policy is required by zot for caching blobs. </p> <p> Replace DYNAMODB_TABLE with the name of your table, which should be the value of <code>cacheTablename</code> in the zot configuration.  </p> <p>In this case, the AWS <code>Resource</code> value would be <code>arn:aws:dynamodb:*:*:table/ZotBlobTable</code></p> <pre><code>[AWS CONFIGURATION]\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"dynamodb:CreateTable\",\n        \"dynamodb:DescribeTable\",\n        \"dynamodb:DeleteTable\",\n        \"dynamodb:Scan\",\n        \"dynamodb:BatchGetItem\",\n        \"dynamodb:GetItem\",\n        \"dynamodb:UpdateItem\",\n        \"dynamodb:DeleteItem\"\n      ],\n      \"Resource\": \"arn:aws:dynamodb:*:*:table/&lt;DYNAMODB_TABLE&gt;\"\n    }\n  ]\n}\n</code></pre> <p>Note <code>dynamodb:DeleteTable</code> is used only in running the zot tests, should not be needed in production.</p> <p>For more details about configuring AWS DynamoDB, see the AWS documentation.</p>"},{"location":"articles/storage/#redis","title":"Redis","text":"<p>Redis is an alternative to BoltDB (which cannot be shared by multiple zot instances) and DynamoDB (which requires access to AWS).</p> <p>To use Redis as the cache driver, the following storage configuration must be present:</p> <ul> <li><code>remoteCache</code> is enabled</li> <li><code>cacheDriver</code> attribute is configured as in the following example:</li> </ul> <pre><code>    \"storage\": {\n        \"rootDirectory\": \"/tmp/zot\",\n        \"remoteCache\": true,\n        \"cacheDriver\": {\n            \"name\": \"redis\",\n            \"url\": \"redis://localhost:6379\",\n            \"keyprefix\": \"zot\"\n        }\n    },\n</code></pre> <p>The cache driver name <code>redis</code> selects the Redis driver implementation.</p> <p>The key <code>keyprefix</code> is a string prepended to all Redis keys created by this zot instance. If no string is specified, the default value is <code>zot</code>. If multiple zot instances share the same Redis database and storage, <code>keyprefix</code> should be the same in all their configurations. If multiple zot instances share the same Redis database, but have different storage locations containing different images, <code>keyprefix</code> should be different in all their configurations.</p> <p>The <code>url</code> string can contain query parameters for various settings, and it can be used for both Redis single instance and cluster configurations. More details on how <code>url</code> is parsed are available at: - https://github.com/redis/go-redis/blob/v9.7.0/options.go#L247 - https://github.com/redis/go-redis/blob/v9.7.0/osscluster.go#L144</p> <p>At this time the library we import for <code>url</code> parsing does not support Redis sentry. For this reason we also support passing the parameters individually as keys in the same <code>cacheDriver</code> map. If and only if the <code>url</code> setting is missing, the other parameters are read from <code>cacheDriver</code>. The keys are the same as the attributes that would otherwise be included in the <code>url</code>.</p> <p>In the case of a Redis Sentinel setup, you would need to add each key manually in the <code>cacheDriver</code> map and make sure to specify a <code>master_name</code> key, see https://github.com/redis/go-redis/blob/v9.7.0/universal.go#L240</p>"},{"location":"articles/storage/#redis-cluster-configuration","title":"Redis cluster configuration","text":"<p>The following storage configuration is for a Redis cluster:</p> <pre><code>    \"storage\": {\n        \"rootDirectory\": \"/tmp/zot\",\n        \"remoteCache\": true,\n        \"cacheDriver\": {\n            \"name\": \"redis\",\n            \"url\": \"redis://user:password@host1:6379?addr=host2:6379&amp;addr=host3:6379\",\n            \"keyprefix\": \"zot\"\n        }\n    }\n</code></pre>"},{"location":"articles/storage/#add-redis-configuration-parameters","title":"Add Redis configuration parameters","text":"<p>The following storage configuration contains all Redis parameters:</p> <pre><code>    \"storage\": {\n        \"rootDirectory\": \"/tmp/zot\",\n        \"remoteCache\": true,\n        \"cacheDriver\": {\n            \"name\": \"redis\",\n            \"keyprefix\": \"zot\",\n            \"addr\": [\"host1:6379\", \"host2:6379\", \"host3:6379\"],\n            \"client_name\": \"client\",\n            \"db\": 1,\n            \"protocol\": 3,\n            \"username\": \"user1\",\n            \"password\": \"pass1\",\n            \"sentinel_username\": \"user2\",\n            \"sentinel_password\": \"pass2\",\n            \"max_retries\": 3,\n            \"min_retry_backoff\": \"5s\",\n            \"max_retry_backoff\": \"5s\",\n            \"dial_timeout\": \"5s\",\n            \"read_timeout\": \"5s\",\n            \"write_timeout\": \"5s\",\n            \"context_timeout_enabled\": false,\n            \"pool_fifo\": false,\n            \"pool_size\": 3,\n            \"pool_timeout\": \"5s\",\n            \"min_idle_conns\": 1,\n            \"max_idle_conns\": 3,\n            \"max_active_conns\": 3,\n            \"conn_max_idle_time\": \"5s\",\n            \"conn_max_lifetime\": \"5s\",\n            \"max_redirects\": 3,\n            \"read_only\": false,\n            \"route_by_latency\": false,\n            \"route_randomly\": false,\n            \"master_name\": \"zotmeta\",\n            \"disable_identity\": false,\n            \"identity_suffix\": \"zotmeta\",\n            \"unstable_resp3\": false\n        },\n    }\n</code></pre> <p> setting all of the parameters above for the same use case does not make sense, as some parameters for single instance, cluster and sentry configurations exclude one another.</p>"},{"location":"articles/storage/#remote-storage-subpaths","title":"Remote storage subpaths","text":"<p>As in the case with local filesystem storage, you can use multiple remote storage locations using the <code>subpath</code> attribute, as in the following example.</p> <pre><code>\"subPaths\": {\n    \"/a\": {\n        \"rootDirectory\": \"/zot-a\",\n        \"storageDriver\": {\n            \"name\": \"s3\",\n            \"region\": \"us-east-2\",\n            \"bucket\": \"zot-storage\",\n            \"secure\": true,\n            \"skipverify\": false\n        }\n    },\n    \"/b\": {\n       .\n       .\n       .\n    }\n}\n</code></pre> <p>The <code>subPaths</code> feature ties together several separate storage filesystems and backends behind the same HTTP API interface. In the example above, both repository paths \"/a\" and \"/b\" are exposed to clients. Content on these two paths can be hosted completely separately by different storage services, locations, or filesystems, with no difference to the user interface and no perceptible difference to the user experience. This is useful if one wants to serve existing OCI images from different backends or if storage can be expanded only by using different backing stores.</p> <p> zot also supports different storage drivers for each subpath.</p>"},{"location":"articles/verifying-signatures/","title":"Verifying image signatures","text":"<p>Images stored in zot can be signed with a digital signature to verify the source and integrity of the image. The digital signature can be verified by zot using public keys or certificates uploaded by the user.</p> <p>To verify image signatures, zot supports the following tools:</p> <ul> <li>cosign</li> <li>notation</li> </ul>"},{"location":"articles/verifying-signatures/#enabling-image-signature-verification","title":"Enabling image signature verification","text":"<p>To enable image signature verification, add the <code>trust</code> attribute under <code>extensions</code> in the zot configuration file and enable one or more verification tools, as shown in the following example:</p> <pre><code>\"extensions\": {\n  \"trust\": {\n    \"enable\": true,\n    \"cosign\": true,\n    \"notation\": true\n  }\n}\n</code></pre> <p>The following table lists the configurable attributes of the <code>trust</code> extension.</p> Attribute Description <code>enable</code> If this attribute is missing, signature verification is disabled by default. Signature verification is enabled by including this attribute and setting it to <code>true</code>.  You must also enable at least one of the verification tools. <code>cosign</code> Set to <code>true</code> to enable signature verification using the <code>cosign</code> tool. <code>notation</code> Set to <code>true</code> to enable signature verification using the <code>notation</code> tool."},{"location":"articles/verifying-signatures/#what-is-needed-for-verifying-signatures","title":"What is needed for verifying signatures","text":"<p>To verify the validity of a signature for an image, zot makes use of two types of files:</p> <ul> <li> <p>A public key file that pairs with the private key used to sign an image with <code>cosign</code> </p> </li> <li> <p>A certificate file that is used to sign an image with <code>notation</code></p> </li> </ul> <p>Upload these files using an extension of the zot API, as shown in the following examples:</p> <ul> <li> <p>To upload a public key for cosign: </p> <p>API path <pre><code>/v2/_zot/ext/cosign\"\n</code></pre> Example request <pre><code>curl --data-binary @file.pub -X POST \"http://localhost:8080/v2/_zot/ext/cosign\"\n</code></pre> Result</p> <p>The uploaded file is stored in the <code>_cosign</code> directory under the <code>rootDir</code> specified in the zot configuration file or in the Secrets Manager.</p> </li> <li> <p>To upload a certificate for notation:</p> <p>API path <pre><code>/v2/_zot/ext/notation?truststoreType=ca\n</code></pre></p> <p>When uploading a certificate, you should specify the <code>truststoreType</code>. If the truststore is a certificate authority, the value is <code>ca</code>. This is the default if this attribute is omitted.</p> <p>Example request <pre><code>curl --data-binary @certificate.crt -X POST \"http://localhost:8080/v2/_zot/ext/notation?truststoreType=ca\"\n</code></pre> Result</p> <p>The uploaded file is stored in the  <code>_notation/truststore/x509/{truststoreType}/default</code> directory under the <code>rootDir</code> specified in the zot configuration file or in the Secrets Manager. </p> </li> </ul>"},{"location":"articles/verifying-signatures/#where-needed-files-are-stored","title":"Where needed files are stored","text":"<p>Uploaded public keys and certificates are stored in the local filesystem, in specific directories named <code>_cosign</code> and <code>_notation</code> under <code>$rootDir</code>, or in the Secrets Manager.</p> <ul> <li> <p>The <code>_cosign</code> directory contains uploaded public key files in the following structure:</p> <pre><code>_cosign\n\u251c\u2500\u2500 $publicKey1\n\u2514\u2500\u2500 $publicKey2\n</code></pre> </li> <li> <p>The <code>_notation</code> directory contains a set of files in the following structure:</p> <pre><code>_notation\n\u251c\u2500\u2500 trustpolicy.json\n\u2514\u2500\u2500 truststore\n    \u2514\u2500\u2500 x509\n        \u2514\u2500\u2500 $truststoreType\n            \u2514\u2500\u2500 default\n                \u2514\u2500\u2500 $certificate\n</code></pre> <p>In this directory, the <code>trustpolicy.json</code> file contains content that is updated automatically whenever a new certificate is added to a new truststore. This content cannot be changed by the user. An example of the <code>trustpolicy.json</code> file content is shown below:</p> <pre><code>{\n \"version\": \"1.0\",\n  \"trustPolicies\": [\n    {\n      \"name\": \"default-config\",\n      \"registryScopes\": [ \"*\" ],\n      \"signatureVerification\": {\n        \"level\" : \"strict\" \n      },\n      \"trustStores\": [\"ca:default\",\"signingAuthority:default\"],\n      \"trustedIdentities\": [\n        \"*\"\n      ]\n    }\n  ]\n}\n</code></pre> <ul> <li> <p>By default, the <code>trustpolicy.json</code> file sets the <code>signatureVerification.level</code> property to <code>strict</code>, which enforces all validations. For example, a signature is not trusted if its certificate has expired, even if the certificate verifies the signature.</p> </li> <li> <p>The <code>trustpolicy.json</code> file contains two default truststores, <code>ca:default</code> and <code>signingAuthority:default</code>. This list of truststores is not updated when a new certificate is uploaded.</p> </li> <li> <p>The content of the <code>trustStores</code> field will match the content of the <code>_notation/truststore</code> directory.</p> </li> </ul> </li> </ul>"},{"location":"articles/verifying-signatures/#how-signature-verification-works","title":"How signature verification works","text":"<p>Based on the uploaded files and the information about images stored in zot's database, signature verification is performed for all signed images. The verification result for each signed image is stored in the database and is visible from GraphQL. The stored information about a signature includes:</p> <ul> <li>The tool that was used to generate the signature, such as <code>cosign</code> or <code>notation</code></li> <li>The trustworthiness of the signature, such as whether a certificate or public key exists that can successfully verify the signature</li> <li> <p>The author of the signature, which can be either:</p> <ul> <li>The public key, for signatures generated using <code>cosign</code></li> <li>The subject of the certificate, for signatures generated using <code>notation</code></li> </ul> </li> </ul>"},{"location":"articles/verifying-signatures/#example-of-graphql-output","title":"Example of GraphQL output","text":"<p>Sample request</p> <pre><code>{\n  Image(image: \"busybox:latest\") {\n    Digest\n    IsSigned\n    Tag\n    SignatureInfo {\n        Tool\n        IsTrusted\n        Author\n    }\n  }\n}\n</code></pre> <p>Sample response</p> <pre><code>{\n  \"data\": {\n    \"Image\": {\n      \"Digest\":\"sha256:6c19fba547b87bde9a45df2f8563e0c61826d098dd30192a2c8b86da1e1a6360\",\n      \"IsSigned\": true,\n      \"Tag\": \"latest\",\n      \"SignatureInfo\":[\n        {\n          \"Tool\":\"cosign\",\n          \"IsTrusted\":false,\n          \"Author\":\"\"\n        },\n        {\n          \"Tool\":\"cosign\",\n          \"IsTrusted\":false,\n          \"Author\":\"\"\n        },\n        {\n          \"Tool\":\"cosign\",\n          \"IsTrusted\": true,\n          \"Author\":\"-----BEGIN PUBLIC KEY-----\\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE9pN+/hGcFlh4YYaNvZxNvuh8Qyhl\\npURz77qScOHe3DqdmiWiuqIseyhEdjEDwpL6fHRwu3a2Nd9wbKqm0la76w==\\n-----END PUBLIC KEY-----\\n\"\n        },\n        {\n          \"Tool\":\"notation\",\n          \"IsTrusted\": false,\n          \"Author\":\"CN=v4-test,O=Notary,L=Seattle,ST=WA,C=US\"\n        },\n        {\n          \"Tool\":\"notation\",\n          \"IsTrusted\": true,\n          \"Author\":\"CN=multipleSig,O=Notary,L=Seattle,ST=WA,C=US\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"articles/workflow/","title":"Software Provenance Workflow Using OCI Artifacts","text":"<p> This article demonstrates an end-to-end workflow for installing a zot registry, then pushing and signing an image and a related artifact, such as an SBOM.</p>"},{"location":"articles/workflow/#workflow","title":"Workflow","text":"<p>The following sections describe the step-by-step workflow. To view the steps combined into a single script, see Reference: Full workflow script.</p> <p>For the workflow examples, the zot registry is assumed to be installed and running at <code>localhost:8080</code>.</p>"},{"location":"articles/workflow/#step-1-download-the-client-tools","title":"Step 1: Download the client tools","text":"<p>This workflow uses the <code>regctl</code> registry client and the <code>cosign</code> image signing tool. As a first step, we download binaries for these tools in a tools directory. </p> <pre><code>TEST_TMPDIR=$(mktemp -d \"${PWD}/artifact-test-${1:+-$1}.XXXXXX\")\n\nTOOLSDIR=$(pwd)/hack/tools\nmkdir -p ${TOOLSDIR}/bin\n\nREGCLIENT=${TOOLSDIR}/bin/regctl\nREGCLIENT_VERSION=v0.5.1\ncurl -Lo ${REGCLIENT} https://github.com/regclient/regclient/releases/download/${REGCLIENT_VERSION}/regctl-linux-amd64\nchmod +x ${REGCLIENT}\n\nCOSIGN=${TOOLSDIR}/bin/cosign\nCOSIGN_VERSION=2.1.1\ncurl -Lo ${COSIGN} https://github.com/sigstore/cosign/releases/download/v${COSIGN_VERSION}/cosign-linux-amd64 \nchmod +x ${COSIGN}\n</code></pre>"},{"location":"articles/workflow/#step-2-deploy-an-oci-registry-with-referrers-support-zot","title":"Step 2: Deploy an OCI registry with referrers support (zot)","text":"<p>Next, we execute the following tasks to deploy an OCI registry:</p> <ul> <li>Copy a zot executable binary to the server.</li> <li>Create a basic configuration file for the zot server, specifying the local root directory, the network location, and the port number.</li> <li>Launch zot with the newly-created configuration file.</li> <li>Looping with a periodic cURL query, detect when zot is up and running.</li> </ul> <pre><code>ZOT=${TOOLSDIR}/bin/zot\nZOT_VERSION=2.0.0-rc6\ncurl -Lo ${ZOT} https://github.com/project-zot/zot/releases/download/v${ZOT_VERSION}/zot-linux-amd64-minimal\nchmod +x ${ZOT}\n\nZOT_HOST=localhost\nZOT_PORT=8080\n\n# function to start zot and test for readiness\nfunction zot_setup() {\ncat &gt; $TEST_TMPDIR/zot-config.json &lt;&lt; EOF\n{\n  \"distSpecVersion\": \"1.1.0-dev\",\n  \"storage\": {\n      \"rootDirectory\": \"$TEST_TMPDIR/zot\"\n  },\n  \"http\": {\n      \"address\": \"$ZOT_HOST\",\n      \"port\": \"$ZOT_PORT\"\n  },\n  \"log\": {\n      \"level\": \"error\"\n  }\n}\nEOF\n  # start zot as a background task\n  ${ZOT} serve $TEST_TMPDIR/zot-config.json &amp;\n  pid=$!\n        # wait until service is up\n  count=5\n  up=0\n  while [[ $count -gt 0 ]]; do\n    if [ ! -d /proc/$pid ]; then\n      echo \"zot failed to start or died\"\n      exit 1\n    fi\n    up=1\n    curl -f http://$ZOT_HOST:$ZOT_PORT/v2/ || up=0\n    if [ $up -eq 1 ]; then break; fi\n    sleep 1\n    count=$((count - 1))\n  done\n  if [ $up -eq 0 ]; then\n    echo \"Timed out waiting for zot\"\n    exit 1\n  fi\n  # setup an OCI client\n  ${REGCLIENT} registry set --tls=disabled $ZOT_HOST:$ZOT_PORT\n}\n\n# call the function to start zot\nzot_setup\n</code></pre>"},{"location":"articles/workflow/#step-3-copy-an-image-to-the-oci-registry","title":"Step 3: Copy an image to the OCI registry","text":"<p>This step copies a busybox container image into the registry.</p> <pre><code>skopeo copy --format=oci --dest-tls-verify=false docker://busybox:latest docker://${ZOT_HOST}:${ZOT_PORT}/busybox:latest\n</code></pre>"},{"location":"articles/workflow/#step-4-copy-a-related-artifact-to-the-oci-registry","title":"Step 4: Copy a related artifact to the OCI registry","text":"<p>This step creates a simple artifact file and associates it with the busybox image in the registry.</p> <pre><code>cat &gt; ${TEST_TMPDIR}/artifact.yaml &lt;&lt; EOF\nkey:\n  val: artifact\nEOF\n${REGCLIENT} artifact put --artifact-type application/yaml -f ${TEST_TMPDIR}/artifact.yaml --subject ${ZOT_HOST}:${ZOT_PORT}/busybox:latest\n</code></pre> <p>The <code>--subject</code> command flag associates the artifact file with the specified subject (in this case, the busybox image). If no subject is specified by the command, the artifact is considered independent and not associated with any existing image.</p>"},{"location":"articles/workflow/#step-5-display-the-artifact-tree","title":"Step 5: Display the artifact tree","text":"<p>This step prints the artifact tree of the busybox image.  The tree includes the artifact yaml file, showing the association of the artifact to the busybox image.</p> <p>These script commands define REF0 as the artifact that was uploaded referring to the first container image. </p> <pre><code>REF0=$(${REGCLIENT} artifact tree --format '{{jsonPretty .}}' localhost:8080/busybox:latest | jq .referrer[0].reference.Digest)\nREF0=\"${REF0:1:-1}\"\n</code></pre> <p>The following example shows the command and its output:</p> <pre><code>$ regctl artifact tree localhost:8080/busybox:latest\n\nRef: localhost:8080/busybox:latest  \nDigest: sha256:9172c5f692f2c65e4f773448503b21dba2de6454bd159905c4bf6d83176e4ea3\nReferrers:  \n   - sha256:9c0655368b10ca4b2ffe39e4dd261fb89df25a46ae92d6eb4e6e1792a451883e: application/yaml\n</code></pre> <p>The displayed artifact tree shows that the original image (<code>localhost:8080/busybox:latest</code>) has one direct referrer (<code>sha256:9c06...883e: application/yaml</code>), the artifact yaml file.</p>"},{"location":"articles/workflow/#step-6-sign-the-image-and-artifact","title":"Step 6: Sign the image and artifact","text":"<p>This step creates a key pair for cosign in a separate directory, then uses cosign to sign both the image and the artifact file. Both signatures, like the artifact file itself, are associated with the busybox image. </p> <pre><code># create a key pair in a different directory\npushd ${TEST_TMPDIR}\nCOSIGN_PASSWORD= ${COSIGN} generate-key-pair\npopd\n# sign the image\nCOSIGN_PASSWORD= COSIGN_OCI_EXPERIMENTAL=1 COSIGN_EXPERIMENTAL=1 ${COSIGN} sign -y --key ${TEST_TMPDIR}/cosign.key --registry-referrers-mode=oci-1-1 ${ZOT_HOST}:${ZOT_PORT}/busybox:latest\n# sign the artifact referring to the image\nCOSIGN_PASSWORD= COSIGN_OCI_EXPERIMENTAL=1 COSIGN_EXPERIMENTAL=1 ${COSIGN} sign -y --key ${TEST_TMPDIR}/cosign.key --registry-referrers-mode=oci-1-1 ${ZOT_HOST}:${ZOT_PORT}/busybox@${REF0}\n</code></pre>"},{"location":"articles/workflow/#step-7-display-the-artifact-tree","title":"Step 7: Display the artifact tree","text":"<p>This step again prints the artifact tree, which should now show the artifact and the two signatures, all associated to the busybox image.</p> <pre><code>${REGCLIENT} artifact tree localhost:8080/busybox:latest\n</code></pre> <p>The following example shows the command and its output:</p> <pre><code>$ regctl artifact tree localhost:8080/busybox:latest\n\nRef: localhost:8080/busybox:latest\nDigest: sha256:9172c5f692f2c65e4f773448503b21dba2de6454bd159905c4bf6d83176e4ea3\nReferrers:\n  - sha256:9c0655368b10ca4b2ffe39e4dd261fb89df25a46ae92d6eb4e6e1792a451883e: application/yaml\n    Referrers:\n      - sha256:06792b209137486442a2b804b2225c0014e3e238d363cdbea088bbd73207fb34: application/vnd.dev.cosign.artifact.sig.v1+json\n  - sha256:995b6a78bf04a7a9676dac76b4598ccb645c17e30b02f294de9fdfa2f28eb7b2: application/vnd.dev.cosign.artifact.sig.v1+json\n</code></pre> <p>The displayed artifact tree shows that the original image now has two direct referrers \u2014 the artifact and the cosign signature of the original image. In addition, there is a second-level referrer \u2014 the cosign signature of the artifact, which is a referrer of the artifact file.</p>"},{"location":"articles/workflow/#step-8-end-of-demonstration","title":"Step 8: End of demonstration","text":"<p>This step halts the zot registry server, ending the workflow demonstration.</p> <pre><code># function for stopping zot after demonstration\nfunction zot_teardown() {\n  killall zot\n}\n\n# stop zot\nzot_teardown\n</code></pre> <p></p>"},{"location":"articles/workflow/#reference-full-workflow-script","title":"Reference: Full workflow script","text":"<p>Expand the text box below to view the entire workflow as a single executable shell script.</p> <p> To copy the script to the clipboard, click the copy icon that appears in the upper right corner of the expanded text box.</p> Click here to view the all-in-one script <pre><code>#!/bin/bash -xe\n\nTEST_TMPDIR=$(mktemp -d \"${PWD}/artifact-test-${1:+-$1}.XXXXXX\")\n\nTOOLSDIR=$(pwd)/hack/tools\nmkdir -p ${TOOLSDIR}/bin\n\nREGCLIENT=${TOOLSDIR}/bin/regctl\nREGCLIENT_VERSION=v0.5.1\ncurl -Lo ${REGCLIENT} https://github.com/regclient/regclient/releases/download/${REGCLIENT_VERSION}/regctl-linux-amd64\nchmod +x ${REGCLIENT}\n\nCOSIGN=${TOOLSDIR}/bin/cosign\nCOSIGN_VERSION=2.1.1\ncurl -Lo ${COSIGN} https://github.com/sigstore/cosign/releases/download/v${COSIGN_VERSION}/cosign-linux-amd64 \nchmod +x ${COSIGN}\n\n# OCI registry\nZOT=${TOOLSDIR}/bin/zot\nZOT_VERSION=2.0.0-rc6\ncurl -Lo ${ZOT} https://github.com/project-zot/zot/releases/download/v${ZOT_VERSION}/zot-linux-amd64-minimal\nchmod +x ${ZOT}\n\nZOT_HOST=localhost\nZOT_PORT=8080\n\nfunction zot_setup() {\ncat &gt; $TEST_TMPDIR/zot-config.json &lt;&lt; EOF\n{\n  \"distSpecVersion\": \"1.1.0-dev\",\n  \"storage\": {\n      \"rootDirectory\": \"$TEST_TMPDIR/zot\"\n  },\n  \"http\": {\n      \"address\": \"$ZOT_HOST\",\n      \"port\": \"$ZOT_PORT\"\n  },\n  \"log\": {\n      \"level\": \"error\"\n  }\n}\nEOF\n# start as a background task\n${ZOT} serve $TEST_TMPDIR/zot-config.json &amp;\npid=$!\n        # wait until service is up\ncount=5\nup=0\nwhile [[ $count -gt 0 ]]; do\n    if [ ! -d /proc/$pid ]; then\n    echo \"zot failed to start or died\"\n    exit 1\n    fi\n    up=1\n    curl -f http://$ZOT_HOST:$ZOT_PORT/v2/ || up=0\n    if [ $up -eq 1 ]; then break; fi\n    sleep 1\n    count=$((count - 1))\ndone\nif [ $up -eq 0 ]; then\n    echo \"Timed out waiting for zot\"\n    exit 1\nfi\n# setup a OCI client\n${REGCLIENT} registry set --tls=disabled $ZOT_HOST:$ZOT_PORT\n}\n\n# function for stopping zot after demonstration\nfunction zot_teardown() {\nkillall zot\n}\n\n# call the function to start zot\nzot_setup\n\n# copy an image\nskopeo copy --format=oci --dest-tls-verify=false docker://busybox:latest docker://${ZOT_HOST}:${ZOT_PORT}/busybox:latest\n\n# copy an artifact referring to the above image\ncat &gt; ${TEST_TMPDIR}/artifact.yaml &lt;&lt; EOF\nkey:\nval: artifact\nEOF\n${REGCLIENT} artifact put --artifact-type application/yaml -f ${TEST_TMPDIR}/artifact.yaml --subject ${ZOT_HOST}:${ZOT_PORT}/busybox:latest\nREF0=$(${REGCLIENT} artifact tree --format '{{jsonPretty .}}' localhost:8080/busybox:latest | jq .referrer[0].reference.Digest)\nREF0=\"${REF0:1:-1}\"\n\n# create a key pair in a different directory\npushd ${TEST_TMPDIR}\nCOSIGN_PASSWORD= ${COSIGN} generate-key-pair\npopd\n# sign the image\nCOSIGN_PASSWORD= COSIGN_OCI_EXPERIMENTAL=1 COSIGN_EXPERIMENTAL=1 ${COSIGN} sign -y --key ${TEST_TMPDIR}/cosign.key --registry-referrers-mode=oci-1-1 ${ZOT_HOST}:${ZOT_PORT}/busybox:latest\n# sign the artifact referring to the image\nCOSIGN_PASSWORD= COSIGN_OCI_EXPERIMENTAL=1 COSIGN_EXPERIMENTAL=1 ${COSIGN} sign -y --key ${TEST_TMPDIR}/cosign.key --registry-referrers-mode=oci-1-1 ${ZOT_HOST}:${ZOT_PORT}/busybox@${REF0}\n\n# list the reference tree\n${REGCLIENT} artifact tree localhost:8080/busybox:latest\n\n# stop zot\nzot_teardown\n</code></pre>"},{"location":"developer-guide/api-reference/","title":"zot API Command Reference","text":"<p> This article describes the zot REST API commands, parameters, and responses.</p> <p>The information presented here is adapted from the interactive OpenAPI (formerly swagger) JSON file in the zot Github project.</p> <p>For instructions and examples of how to use the zot API, see Using the zot API.</p>"},{"location":"developer-guide/api-reference/#zotauthapikey","title":"/zot/auth/apikey","text":""},{"location":"developer-guide/api-reference/#delete-zotauthapikey","title":"DELETE <code>/zot/auth/apikey</code>","text":"<p>Revokes one current user API key based on given key ID</p> <p>Parameters</p> Name In Type Required Description id query string true api token id (UUID) <p>Example responses</p> <p>200 Response</p> <pre><code>\"string\"\n</code></pre> <p>Responses</p> Status Meaning Description Schema 200 OK ok string 400 Bad Request bad request string 401 Unauthorized unauthorized string 500 Internal Server Error internal server error string <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#get-zotauthapikey","title":"GET <code>/zot/auth/apikey</code>","text":"<p>Get list of all API keys for a logged in user</p> <p>Example responses</p> <p>200 Response</p> <pre><code>\"string\"\n</code></pre> <p>Responses</p> Status Meaning Description Schema 200 OK ok string 401 Unauthorized unauthorized string 500 Internal Server Error internal server error string <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#post-zotauthapikey","title":"POST <code>/zot/auth/apikey</code>","text":"<p>Can create an api key for a logged in user, based on the provided label and scopes.</p> <p>Body parameter</p> <pre><code>{\n  \"expirationDate\": \"string\",\n  \"label\": \"string\",\n  \"scopes\": [\n    \"string\"\n  ]\n}\n</code></pre> <p>Parameters</p> Name In Type Required Description body body api.APIKeyPayload true api token id (UUID) <p>Example responses</p> <p>201 Response</p> <pre><code>\"string\"\n</code></pre> <p>Responses</p> Status Meaning Description Schema 201 Created created string 400 Bad Request bad request string 401 Unauthorized unauthorized string 500 Internal Server Error internal server error string <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#zotauthlogout","title":"<code>/zot/auth/logout</code>","text":""},{"location":"developer-guide/api-reference/#post-zotauthlogout","title":"POST <code>/zot/auth/logout</code>","text":"<p>Logout by removing current session</p> <p>Example responses</p> <p>200 Response</p> <pre><code>\"string\"\n</code></pre> <p>Responses</p> Status Meaning Description Schema 200 OK ok\". string 500 Internal Server Error internal server error\". string <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#orasartifactsv1namemanifestsdigestreferrers","title":"<code>/oras/artifacts/v1/{name}/manifests/{digest}/referrers</code>","text":""},{"location":"developer-guide/api-reference/#get-orasartifactsv1namemanifestsdigestreferrers","title":"GET <code>/oras/artifacts/v1/{name}/manifests/{digest}/referrers</code>","text":"<p>Get references for an image given a digest and artifact type</p> <p>Parameters</p> Name In Type Required Description name path string true repository name digest path string true image digest artifactType query string true artifact type <p>Example responses</p> <p>200 Response</p> <pre><code>\"string\"\n</code></pre> <p>Responses</p> Status Meaning Description Schema 200 OK ok string 404 Not Found not found string 500 Internal Server Error internal server error string <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#v2","title":"<code>/v2/</code>","text":""},{"location":"developer-guide/api-reference/#get-v2","title":"GET <code>/v2/</code>","text":"<p>Check if this API version is supported</p> <p>Example responses</p> <p>200 Response</p> <pre><code>\"string\"\n</code></pre> <p>Responses</p> Status Meaning Description Schema 200 OK ok\". string <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#v2_catalog","title":"<code>/v2/_catalog</code>","text":""},{"location":"developer-guide/api-reference/#get-v2_catalog","title":"GET <code>/v2/_catalog</code>","text":"<p>List all image repositories</p> <p>Example responses</p> <p>200 Response</p> <pre><code>{\n  \"repositories\": [\n    \"string\"\n  ]\n}\n</code></pre> <p>Responses</p> Status Meaning Description Schema 200 OK OK api.RepositoryList 500 Internal Server Error internal server error string <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#v2_ociextdiscover","title":"<code>/v2/_oci/ext/discover</code>","text":""},{"location":"developer-guide/api-reference/#get-v2_ociextdiscover","title":"GET <code>/v2/_oci/ext/discover</code>","text":"<p>List all extensions present on registry</p> <p>Example responses</p> <p>200 Response</p> <pre><code>{\n  \"extensions\": [\n    {\n      \"description\": \"string\",\n      \"endpoints\": [\n        \"string\"\n      ],\n      \"name\": \"string\",\n      \"url\": \"string\"\n    }\n  ]\n}\n</code></pre> <p>Responses</p> Status Meaning Description Schema 200 OK OK api.ExtensionList <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#v2_zotextcosign","title":"<code>/v2/_zot/ext/cosign</code>","text":""},{"location":"developer-guide/api-reference/#post-v2_zotextcosign","title":"POST <code>/v2/_zot/ext/cosign</code>","text":"<p>Upload cosign public keys for verifying signatures</p> <p>Body parameter</p> <pre><code>string\n</code></pre> <p>Parameters</p> Name In Type Required Description body body string true Public key content <p>Example responses</p> <p>200 Response</p> <pre><code>\"string\"\n</code></pre> <p>Responses</p> Status Meaning Description Schema 200 OK ok string 400 Bad Request bad request\". string 500 Internal Server Error internal server error\". string <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#v2_zotextmgmt","title":"<code>/v2/_zot/ext/mgmt</code>","text":""},{"location":"developer-guide/api-reference/#get-v2_zotextmgmt","title":"GET <code>/v2/_zot/ext/mgmt</code>","text":"<p>Get current server configuration</p> <p>Parameters</p> Name In Type Required Description resource query string false specify resource <p>Enumerated Values</p> Parameter Value resource config <p>Example responses</p> <p>200 Response</p> <pre><code>{\n  \"binaryType\": \"string\",\n  \"distSpecVersion\": \"string\",\n  \"http\": {\n    \"auth\": {\n      \"bearer\": {\n        \"realm\": \"string\",\n        \"service\": \"string\"\n      },\n      \"htpasswd\": {\n        \"path\": \"string\"\n      },\n      \"ldap\": {\n        \"address\": \"string\"\n      },\n      \"openid\": {\n        \"providers\": {\n          \"property1\": {\n            \"name\": \"string\"\n          },\n          \"property2\": {\n            \"name\": \"string\"\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>Responses</p> Status Meaning Description Schema 200 OK OK extensions.StrippedConfig 500 Internal Server Error internal server error\". string <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#v2_zotextnotation","title":"<code>/v2/_zot/ext/notation</code>","text":""},{"location":"developer-guide/api-reference/#post-v2_zotextnotation","title":"POST <code>/v2/_zot/ext/notation</code>","text":"<p>Upload notation certificates for verifying signatures</p> <p>Body parameter</p> <pre><code>string\n</code></pre> <p>Parameters</p> Name In Type Required Description truststoreType query string false truststore type body body string true Certificate content <p>Example responses</p> <p>200 Response</p> <pre><code>\"string\"\n</code></pre> <p>Responses</p> Status Meaning Description Schema 200 OK ok string 400 Bad Request bad request\". string 500 Internal Server Error internal server error\". string <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#v2_zotextuserprefs","title":"<code>/v2/_zot/ext/userprefs</code>","text":""},{"location":"developer-guide/api-reference/#put-v2_zotextuserprefs","title":"PUT <code>/v2/_zot/ext/userprefs</code>","text":"<p>Add bookmarks/stars info</p> <p>Parameters</p> Name In Type Required Description action query string true specify action repo query string true repository name <p>Enumerated Values</p> Parameter Value action toggleBookmark action toggleStar <p>Example responses</p> <p>200 Response</p> <pre><code>\"string\"\n</code></pre> <p>Responses</p> Status Meaning Description Schema 200 OK ok string 400 Bad Request bad request\". string 403 Forbidden forbidden string 404 Not Found not found string 500 Internal Server Error internal server error string <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#v2nameblobsdigest","title":"<code>/v2/{name}/blobs/{digest}</code>","text":""},{"location":"developer-guide/api-reference/#delete-v2nameblobsdigest","title":"DELETE <code>/v2/{name}/blobs/{digest}</code>","text":"<p>Delete an image's blob/layer given a digest</p> <p>Parameters</p> Name In Type Required Description name path string true repository name digest path string true blob/layer digest <p>Example responses</p> <p>202 Response</p> <pre><code>\"string\"\n</code></pre> <p>Responses</p> Status Meaning Description Schema 202 Accepted accepted string <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#get-v2nameblobsdigest","title":"GET <code>/v2/{name}/blobs/{digest}</code>","text":"<p>Get an image's blob/layer given a digest</p> <p>Parameters</p> Name In Type Required Description name path string true repository name digest path string true blob/layer digest <p>Example responses</p> <p>200 Response</p> <p>Responses</p> Status Meaning Description Schema 200 OK OK api.ImageManifest <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#head-v2nameblobsdigest","title":"HEAD <code>/v2/{name}/blobs/{digest}</code>","text":"<p>Check an image's blob/layer given a digest</p> <p>Parameters</p> Name In Type Required Description name path string true repository name digest path string true blob/layer digest <p>Example responses</p> <p>200 Response</p> <pre><code>{\n  \"annotations\": {\n    \"property1\": \"string\",\n    \"property2\": \"string\"\n  },\n  \"artifactType\": \"string\",\n  \"config\": {\n    \"annotations\": {\n      \"property1\": \"string\",\n      \"property2\": \"string\"\n    },\n    \"artifactType\": \"string\",\n    \"data\": [\n      0\n    ],\n    \"digest\": \"string\",\n    \"mediaType\": \"string\",\n    \"platform\": {\n      \"architecture\": \"string\",\n      \"os\": \"string\",\n      \"os.features\": [\n        \"string\"\n      ],\n      \"os.version\": \"string\",\n      \"variant\": \"string\"\n    },\n    \"size\": 0,\n    \"urls\": [\n      \"string\"\n    ]\n  },\n  \"layers\": [\n    {\n      \"annotations\": {\n        \"property1\": \"string\",\n        \"property2\": \"string\"\n      },\n      \"artifactType\": \"string\",\n      \"data\": [\n        0\n      ],\n      \"digest\": \"string\",\n      \"mediaType\": \"string\",\n      \"platform\": {\n        \"architecture\": \"string\",\n        \"os\": \"string\",\n        \"os.features\": [\n          \"string\"\n        ],\n        \"os.version\": \"string\",\n        \"variant\": \"string\"\n      },\n      \"size\": 0,\n      \"urls\": [\n        \"string\"\n      ]\n    }\n  ],\n  \"mediaType\": \"string\",\n  \"schemaVersion\": 0,\n  \"subject\": {\n    \"annotations\": {\n      \"property1\": \"string\",\n      \"property2\": \"string\"\n    },\n    \"artifactType\": \"string\",\n    \"data\": [\n      0\n    ],\n    \"digest\": \"string\",\n    \"mediaType\": \"string\",\n    \"platform\": {\n      \"architecture\": \"string\",\n      \"os\": \"string\",\n      \"os.features\": [\n        \"string\"\n      ],\n      \"os.version\": \"string\",\n      \"variant\": \"string\"\n    },\n    \"size\": 0,\n    \"urls\": [\n      \"string\"\n    ]\n  }\n}\n</code></pre> <p>Responses</p> Status Meaning Description Schema 200 OK OK api.ImageManifest <p>Response Headers</p> Status Header Type Format Description 200 constants.DistContentDigestKey object none <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#v2nameblobsuploads","title":"<code>/v2/{name}/blobs/uploads</code>","text":""},{"location":"developer-guide/api-reference/#post-v2nameblobsuploads","title":"POST <code>/v2/{name}/blobs/uploads</code>","text":"<p>Create a new image blob/layer upload</p> <p>Parameters</p> Name In Type Required Description name path string true repository name <p>Example responses</p> <p>202 Response</p> <pre><code>\"string\"\n</code></pre> <p>Responses</p> Status Meaning Description Schema 202 Accepted accepted string 401 Unauthorized unauthorized string 404 Not Found not found string 500 Internal Server Error internal server error string <p>Response Headers</p> Status Header Type Format Description 202 Location string /v2/{name}/blobs/uploads/{session_id} 202 Range string 0-0 <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#v2nameblobsuploadssession_id","title":"<code>/v2/{name}/blobs/uploads/{session_id}</code>","text":""},{"location":"developer-guide/api-reference/#delete-v2nameblobsuploadssession_id","title":"DELETE <code>/v2/{name}/blobs/uploads/{session_id}</code>","text":"<p>Delete an image's blob/layer given a digest</p> <p>Parameters</p> Name In Type Required Description name path string true repository name session_id path string true upload session_id <p>Example responses</p> <p>200 Response</p> <pre><code>\"string\"\n</code></pre> <p>Responses</p> Status Meaning Description Schema 200 OK ok string 404 Not Found not found string 500 Internal Server Error internal server error string <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#get-v2nameblobsuploadssession_id","title":"GET <code>/v2/{name}/blobs/uploads/{session_id}</code>","text":"<p>*Get an image's blob/layer upload given a session_id</p> <p>Parameters</p> Name In Type Required Description name path string true repository name session_id path string true upload session_id <p>Example responses</p> <p>204 Response</p> <pre><code>\"string\"\n</code></pre> <p>Responses</p> Status Meaning Description Schema 204 No Content no content string 404 Not Found not found string 500 Internal Server Error internal server error string <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#patch-v2nameblobsuploadssession_id","title":"PATCH <code>/v2/{name}/blobs/uploads/{session_id}</code>","text":"<p>Resume an image's blob/layer upload given an session_id</p> <p>Parameters</p> Name In Type Required Description name path string true repository name session_id path string true upload session_id <p>Example responses</p> <p>202 Response</p> <pre><code>\"string\"\n</code></pre> <p>Responses</p> Status Meaning Description Schema 202 Accepted accepted string 400 Bad Request bad request string 404 Not Found not found string 416 Range Not Satisfiable range not satisfiable string 500 Internal Server Error internal server error string <p>Response Headers</p> Status Header Type Format Description 202 Location string /v2/{name}/blobs/uploads/{session_id} 202 Range string 0-128 <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#put-v2nameblobsuploadssession_id","title":"PUT <code>/v2/{name}/blobs/uploads/{session_id}</code>","text":"<p>Update and finish an image's blob/layer upload given a digest</p> <p>Parameters</p> Name In Type Required Description name path string true repository name session_id path string true upload session_id digest query string true blob/layer digest <p>Example responses</p> <p>201 Response</p> <pre><code>\"string\"\n</code></pre> <p>Responses</p> Status Meaning Description Schema 201 Created created string 404 Not Found not found string 500 Internal Server Error internal server error string <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#v2namemanifestsreference","title":"<code>/v2/{name}/manifests/{reference}</code>","text":""},{"location":"developer-guide/api-reference/#delete-v2namemanifestsreference","title":"DELETE <code>/v2/{name}/manifests/{reference}</code>","text":"<p>Delete an image's manifest given a reference or a digest</p> <p>Parameters</p> Name In Type Required Description name path string true repository name reference path string true image reference or digest <p>Example responses</p> <p>200 Response</p> <pre><code>\"string\"\n</code></pre> <p>Responses</p> Status Meaning Description Schema 200 OK ok string <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#get-v2namemanifestsreference","title":"GET <code>/v2/{name}/manifests/{reference}</code>","text":"<p>Get an image's manifest given a reference or a digest</p> <p>Parameters</p> Name In Type Required Description name path string true repository name reference path string true image reference or digest <p>Example responses</p> <p>200 Response</p> <pre><code>{\n  \"annotations\": {\n    \"property1\": \"string\",\n    \"property2\": \"string\"\n  },\n  \"artifactType\": \"string\",\n  \"config\": {\n    \"annotations\": {\n      \"property1\": \"string\",\n      \"property2\": \"string\"\n    },\n    \"artifactType\": \"string\",\n    \"data\": [\n      0\n    ],\n    \"digest\": \"string\",\n    \"mediaType\": \"string\",\n    \"platform\": {\n      \"architecture\": \"string\",\n      \"os\": \"string\",\n      \"os.features\": [\n        \"string\"\n      ],\n      \"os.version\": \"string\",\n      \"variant\": \"string\"\n    },\n    \"size\": 0,\n    \"urls\": [\n      \"string\"\n    ]\n  },\n  \"layers\": [\n    {\n      \"annotations\": {\n        \"property1\": \"string\",\n        \"property2\": \"string\"\n      },\n      \"artifactType\": \"string\",\n      \"data\": [\n        0\n      ],\n      \"digest\": \"string\",\n      \"mediaType\": \"string\",\n      \"platform\": {\n        \"architecture\": \"string\",\n        \"os\": \"string\",\n        \"os.features\": [\n          \"string\"\n        ],\n        \"os.version\": \"string\",\n        \"variant\": \"string\"\n      },\n      \"size\": 0,\n      \"urls\": [\n        \"string\"\n      ]\n    }\n  ],\n  \"mediaType\": \"string\",\n  \"schemaVersion\": 0,\n  \"subject\": {\n    \"annotations\": {\n      \"property1\": \"string\",\n      \"property2\": \"string\"\n    },\n    \"artifactType\": \"string\",\n    \"data\": [\n      0\n    ],\n    \"digest\": \"string\",\n    \"mediaType\": \"string\",\n    \"platform\": {\n      \"architecture\": \"string\",\n      \"os\": \"string\",\n      \"os.features\": [\n        \"string\"\n      ],\n      \"os.version\": \"string\",\n      \"variant\": \"string\"\n    },\n    \"size20\": 0,\n    \"urls\": [\n      \"string\"\n    ]\n  }\n}\n</code></pre> <p>Responses</p> Status Meaning Description Schema 200 OK OK api.ImageManifest 404 Not Found not found string 500 Internal Server Error internal server error string <p>Response Headers</p> Status Header Type Format Description 200 constants.DistContentDigestKey object none <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#head-v2namemanifestsreference","title":"HEAD <code>/v2/{name}/manifests/{reference}</code>","text":"<p>Check an image's manifest given a reference or a digest</p> <p>Parameters</p> Name In Type Required Description name path string true repository name reference path string true image reference or digest <p>Example responses</p> <p>200 Response</p> <pre><code>\"string\"\n</code></pre> <p>Responses</p> Status Meaning Description Schema 200 OK ok string 404 Not Found not found string 500 Internal Server Error internal server error\". string <p>Response Headers</p> Status Header Type Format Description 200 constants.DistContentDigestKey object none <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#put-v2namemanifestsreference","title":"PUT <code>/v2/{name}/manifests/{reference}</code>","text":"<p>Update an image's manifest given a reference or a digest</p> <p>Parameters</p> Name In Type Required Description name path string true repository name reference path string true image reference or digest <p>Example responses</p> <p>201 Response</p> <pre><code>\"string\"\n</code></pre> <p>Responses</p> Status Meaning Description Schema 201 Created created string 400 Bad Request bad request string 404 Not Found not found string 500 Internal Server Error internal server error string <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#v2namereferrersdigest","title":"<code>/v2/{name}/referrers/{digest}</code>","text":""},{"location":"developer-guide/api-reference/#get-v2namereferrersdigest","title":"GET <code>/v2/{name}/referrers/{digest}</code>","text":"<p>Get referrers given a digest</p> <p>Parameters</p> Name In Type Required Description name path string true repository name digest path string true digest artifactType query string false artifact type <p>Example responses</p> <p>200 Response</p> <pre><code>{\n  \"annotations\": {\n    \"property1\": \"string\",\n    \"property2\": \"string\"\n  },\n  \"artifactType\": \"string\",\n  \"manifests\": [\n    {\n      \"annotations\": {\n        \"property1\": \"string\",\n        \"property2\": \"string\"\n      },\n      \"artifactType\": \"string\",\n      \"data\": [\n        0\n      ],\n      \"digest\": \"string\",\n      \"mediaType\": \"string\",\n      \"platform\": {\n        \"architecture\": \"string\",\n        \"os\": \"string\",\n        \"os.features\": [\n          \"string\"\n        ],\n        \"os.version\": \"string\",\n        \"variant\": \"string\"\n      },\n      \"size\": 0,\n      \"urls\": [\n        \"string\"\n      ]\n    }\n  ],\n  \"mediaType\": \"string\",\n  \"schemaVersion\": 0,\n  \"subject\": {\n    \"annotations\": {\n      \"property1\": \"string\",\n      \"property2\": \"string\"\n    },\n    \"artifactType\": \"string\",\n    \"data\": [\n      0\n    ],\n    \"digest\": \"string\",\n    \"mediaType\": \"string\",\n    \"platform\": {\n      \"architecture\": \"string\",\n      \"os\": \"string\",\n      \"os.features\": [\n        \"string\"\n      ],\n      \"os.version\": \"string\",\n      \"variant\": \"string\"\n    },\n    \"size\": 0,\n    \"urls\": [\n      \"string\"\n    ]\n  }\n}\n</code></pre> <p>Responses</p> Status Meaning Description Schema 200 OK OK api.ImageIndex 404 Not Found not found string 500 Internal Server Error internal server error string <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-reference/#v2nametagslist","title":"<code>/v2/{name}/tags/list</code>","text":""},{"location":"developer-guide/api-reference/#get-v2nametagslist","title":"GET <code>/v2/{name}/tags/list</code>","text":"<p>List all image tags in a repository</p> <p>Parameters</p> Name In Type Required Description name path string true repository name n query integer true limit entries for pagination last query string true last tag value for pagination <p>Example responses</p> <p>200 Response</p> <pre><code>{\n  \"name\": \"string\",\n  \"tags\": [\n    \"string\"\n  ]\n}\n</code></pre> <p>Responses</p> Status Meaning Description Schema 200 OK OK common.ImageTags 400 Bad Request bad request\". string 404 Not Found not found string <p>This operation does not require authentication</p>"},{"location":"developer-guide/api-user-guide/","title":"Using the zot API","text":"<p> This document describes how to use the zot REST API and provides a number of examples. </p> <p>For comprehensive details of all zot API commands, see Viewing the complete zot API reference.</p> <p>The zot API implements the OCI Distribution endpoints along with additional endpoints for supported extensions. You can access the REST API at the same URL and port number used by the GUI and by datapath tools.</p> <p> The examples in this article assume that the zot registry is located at <code>localhost:8080</code>.</p>"},{"location":"developer-guide/api-user-guide/#supported-api-endpoints","title":"Supported API endpoints","text":"<p>The following is a list of zot API endpoints along with the conditions under which each endpoint is available.</p> <p> Some API endpoints are available only when a specific extension is enabled in the zot configuration file, or when an extension build label is specified in the <code>make</code> command (for example, <code>make binary EXTENSIONS=ui</code>), or both.</p> <p>For comprehensive details of the API endpoints, see Viewing the complete zot API reference.</p>"},{"location":"developer-guide/api-user-guide/#oci-endpoints","title":"OCI endpoints","text":"Endpoint Actions Description /v2/ GET OCI specification endpoints /v2/_catalog GET Lists repositories in a registry. /v2/_oci/ext/discover GET Discover extensions per the OCI specification /v2/{repo}/blobs/{digest} DELETE, GET, HEAD Lists or deletes an image's blob/layer given a digest /v2/{repo}/blobs/uploads POST Creates an image blob/layer upload /v2/{repo}/blobs/uploads/{session_id} DELETE, GET, PATCH, PUT Creates, lists, or deletes an image's blob/layer upload given a session_id /v2/{repo}/manifests/{reference} DELETE, GET, HEAD, PUT Creates, lists, or deletes references for an image /v2/{repo}/referrers/{digest} GET Lists referrers given a digest /v2/{repo}/tags/list GET List all image tags in a repository"},{"location":"developer-guide/api-user-guide/#zot-oci-extension-endpoints","title":"zot OCI extension endpoints","text":"Endpoint Actions Description Availability /v2/_zot/ext/mgmt GET Mgmt extension endpoints Enabled by using the <code>mgmt</code> build label and enabling the <code>search</code> extension in the configuration file. /v2/_zot/ext/notation POST With query parameters, uploads certificates for signature verification Enabled by using the <code>imagetrust</code> build label and enabling the <code>trust</code> extension with the <code>notation</code> option enabled. /v2/_zot/ext/search Enhanced search Enabled by using the <code>search</code> build label and enabling the <code>search</code> extension in the configuration file. /v2/_zot/ext/cosign POST Uploads keys for signature verification Enabled by using the <code>imagetrust</code> build label and enabling the <code>trust</code> extension with the <code>cosign</code> option enabled. /v2/_zot/ext/userprefs PUT User preferences endpoints Enabled by using the <code>userprefs</code> build label and enabling both the <code>search</code> and the <code>ui</code> extensions in the configuration file."},{"location":"developer-guide/api-user-guide/#zot-auth-endpoints","title":"zot auth endpoints","text":"Endpoint Actions Description Availability /zot/auth/apikey DELETE, GET, POST Creates, lists, or deletes API keys Available when API key authentication is enabled in the configuration file (<code>\"apikey\": true</code>). /zot/auth/login POST Opens an API session Available when authentication is available. This includes not only OpenID, but all session-based authentication. /zot/auth/logout POST Ends an API session Available when authentication is available. This includes not only OpenID, but all session-based authentication. /zot/auth/callback/\\&lt;provider&gt; POST Specifies a social authentication service provider for redirecting logins, such as Google or dex. Enabled when an OpenID authentication service provider is specified in the configuration file."},{"location":"developer-guide/api-user-guide/#other-zot-endpoints","title":"other zot endpoints","text":"Endpoint Actions Description Availability /v2/_zot/pprof/ GET Returns a current HTML-format profile list along with a count of currently available records for each profile. See Performance Profiling in zot for usage details. Always enabled. /v2/_zot/debug/graphql-playground# See Using GraphQL for details. Enabled only in a <code>binary-debug</code> zot build or when the zot registry has been built with the <code>debug</code> extension label."},{"location":"developer-guide/api-user-guide/#oras-endpoints","title":"ORAS endpoints","text":"Endpoint Actions Description Availability /oras/artifacts/v1/{repo}/  manifests/{digest}/referrers GET OCI Registry As Storage (ORAS) endpoints Always enabled."},{"location":"developer-guide/api-user-guide/#prometheus-endpoint","title":"prometheus endpoint","text":"Endpoint Actions Description Availability /metrics GET Returns extended metrics for monitoring by prometheus Enabled when the <code>metrics</code> extension is enabled in the configuration file."},{"location":"developer-guide/api-user-guide/#openapi-swagger-endpoints","title":"OpenAPI (swagger) endpoints","text":"<p> This endpoint is accessed with a browser. </p> Endpoint Action Description Availability /swagger/v2/ (browser) Displays an interactive OpenAPI (swagger) API reference. Enabled only in a <code>binary-debug</code> zot build or when the zot registry has been built with the <code>debug</code> extension label."},{"location":"developer-guide/api-user-guide/#api-authentication","title":"API authentication","text":"<p> If zot authentication is not configured, any user can access the zot API.</p> <p>When pushing and pulling images using API calls, your identity can be authenticated by either a password or an API key. </p> <p>With a valid password, you can specify your credentials in a cURL request as shown in this example:</p> <pre><code>curl -u &lt;user&gt;:&lt;password&gt; -X GET http://&lt;server&gt;/&lt;endpoint&gt;\n</code></pre> <p>An API key has advantages in situations where the primary zot authentication does not use the command line, such as a GUI login or social login. Also, you can reduce your security exposure by using an API key instead of your broader credentials, such as an LDAP username and password.</p>"},{"location":"developer-guide/api-user-guide/#using-api-keys","title":"Using API keys","text":""},{"location":"developer-guide/api-user-guide/#enabling-api-keys","title":"Enabling API keys","text":"<p>To enable the use of API keys, you must set the <code>apikey</code> attribute to <code>true</code> in the zot configuration file, as shown in the following example:</p> <pre><code>  \"http\": {\n    \"auth\": {\n      \"apikey\": true\n    }\n  }\n</code></pre>"},{"location":"developer-guide/api-user-guide/#creating-your-api-key","title":"Creating your API key","text":"<p>Before you can create or revoke an API key, you must first log in using a different authentication mechanism, such as logging in through the zot GUI. When you are logged in, you can create an API key for your identity using the following API command:</p> <pre><code>POST /zot/auth/apikey\n</code></pre> <p>cURL command example:</p> <pre><code>curl -u user:password -X POST http://localhost:8080/zot/auth/apikey -d '{\"label\": \"myAPIKEY\", \"scopes\": [\"repo1\", \"repo2\"], \"expirationDate\": \"2023-08-28T17:10:05+03:00\"}'\n</code></pre> <p> The scopes and expiration date in this example are optional. By default, an API key has the same permissions as the user who created it.</p> <p>Command output:</p> <pre><code>{\n  \"createdAt\":\"2023-08-28T17:09:59.2603515+03:00\",\n  \"expirationDate\":\"2023-08-28T17:10:05+03:00\",\n  \"isExpired\":false,\n  \"creatorUa\":\"curl/7.68.0\",\n  \"generatedBy\":\"manual\",\n  \"lastUsed\":\"0001-01-01T00:00:00Z\",\n  \"label\":\"myAPIKEY\",\n  \"scopes\": [\n    \"repo1\",\n    \"repo2\"\n  ],\n  \"uuid\":\"c931e635-a80d-4b52-b035-6b57be5f6e74\",\n  \"apiKey\":\"zak_ac55a8693d6b4370a2003fa9e10b3682\"\n}\n</code></pre> <p> The API key (<code>apiKey</code>) is shown to the user only in the command output when the key is created. It cannot be later retrieved from zot with any other command.</p>"},{"location":"developer-guide/api-user-guide/#using-your-api-key-in-an-api-command","title":"Using your API key in an API command","text":"<p>The API key replaces a password in the API command, as shown in the following cURL example:</p> <pre><code>curl -u user:zak_e77bcb9e9f634f1581756abbf9ecd269 http://localhost:8080/v2/_catalog\n</code></pre>"},{"location":"developer-guide/api-user-guide/#removing-your-api-key","title":"Removing your API key","text":"<p>When logged in, you can revoke your own API key with the following API command:</p> <pre><code>DELETE /zot/auth/apikey?id=$uuid\n</code></pre> <p>cURL command example:</p> <pre><code>curl -u user:password -X DELETE http://localhost:8080/v2/zot/auth/apikey?id=46a45ce7-5d92-498a-a9cb-9654b1da3da1\n</code></pre>"},{"location":"developer-guide/api-user-guide/#listing-your-current-api-keys","title":"Listing your current API keys","text":"<p>When logged in, you can display a list of your API keys with the following API command:</p> <pre><code>GET /zot/auth/apikey\n</code></pre> <p>cURL command example:</p> <pre><code>curl -u user:password -X GET http://localhost:8080/zot/auth/apikey\n</code></pre> <p>Command output:</p> <pre><code>{\n  \"apiKeys\": [\n    {\n      \"createdAt\": \"2023-05-05T15:39:28.420926+03:00\",\n      \"expirationDate\": \"0001-01-01T00:00:00Z\",\n      \"isExpired\": true,\n      \"creatorUa\": \"curl/7.68.0\",\n      \"generatedBy\": \"manual\",\n      \"lastUsed\": \"0001-01-01T00:00:00Z\",\n      \"label\": \"git\",\n      \"scopes\": [\n        \"repo1\",\n        \"repo2\"\n      ],\n      \"uuid\": \"46a45ce7-5d92-498a-a9cb-9654b1da3da1\"\n    },\n    {\n      \"createdAt\": \"2023-08-11T14:43:00.6459729+03:00\",\n      \"expirationDate\": \"2023-08-17T18:24:05+03:00\",\n      \"isExpired\": false,\n      \"creatorUa\": \"curl/7.68.0\",\n      \"generatedBy\": \"manual\",\n      \"lastUsed\": \"2023-08-11T14:43:47.5559998+03:00\",\n      \"label\": \"myAPIKEY\",\n      \"scopes\": null,\n      \"uuid\": \"294abf69-b62f-4e58-b214-dad2aec0bc52\"\n    }\n  ]\n}\n</code></pre> <p>This command output example shows an expired key and a current key for this user.</p> <p> The actual API key (<code>apiKey</code>) is not shown. The key is shown to the user only when it is created. </p>"},{"location":"developer-guide/api-user-guide/#api-examples","title":"API examples","text":"<p> The following examples assume that the zot registry is located at <code>localhost:8080</code>.</p>"},{"location":"developer-guide/api-user-guide/#listing-repositories","title":"Listing repositories","text":"<p>To get a list of all image repositories in the registry, use the following API endpoint:</p> <pre><code>GET /v2/_catalog\n</code></pre> <p>cURL command example:</p> <pre><code>curl -X GET http://localhost:8080/v2/_catalog\n</code></pre> <p>Command output:</p> <pre><code>{\n    \"repositories\": [\"alpine\", \"busybox\"]\n}\n</code></pre>"},{"location":"developer-guide/api-user-guide/#discovering-extension-endpoints","title":"Discovering extension endpoints","text":"<p>To list the installed and enabled zot extensions that can be accessed through the API, use the following OCI API endpoint:</p> <pre><code>GET /v2/_oci/ext/discover\n</code></pre> <p>cURL command example:</p> <pre><code>curl -X GET http://localhost:8080/v2/_oci/ext/discover\n</code></pre> <p>Command output:</p> <pre><code>{\n  \"extensions\": [\n  {\n    \"name\": \"_zot\",\n    \"url\": \"https://github.com/project-zot/zot/blob//pkg/extensions/_zot.md\",\n    \"description\": \"zot registry extensions\",\n    \"endpoints\": [\"/v2/_zot/ext/search\", \"/v2/_zot/ext/userprefs\", \"/v2/_zot/ext/mgmt\"]\n  }]\n}\n</code></pre>"},{"location":"developer-guide/api-user-guide/#uploading-a-certificate-for-notation","title":"Uploading a certificate for Notation","text":"<p>To upload a certificate for notation, use the following endpoint:</p> <pre><code>POST /v2/_zot/ext/notation\n</code></pre> <p>cURL command example:</p> <pre><code>curl --data-binary @certificate.crt -X POST \"http://localhost:8080/v2/_zot/ext/notation?truststoreType=ca\"\n</code></pre> <p></p>"},{"location":"developer-guide/api-user-guide/#viewing-the-complete-zot-api-reference","title":"Viewing the complete zot API reference","text":"<p>You can find comprehensive details of all zot API commands in either of the following locations:</p> <ul> <li> <p>As text descriptions in the zot API Command Reference in the zot documentation.</p> </li> <li> <p>As an interactive OpenAPI (swagger) JSON file in the zot Github project.</p> </li> </ul> <p>There are many ways to view a swagger file as an interactive document. If you have the <code>npm</code> package installed, for example, you can execute the following command:</p> <pre><code>  $ npx open-swagger-ui swagger.json\n</code></pre> <p>This command creates a local web server at <code>localhost:3355</code> where you can interact with the API reference using a browser.</p>"},{"location":"developer-guide/contributing/","title":"Contributing to zot Development","text":"<p> The zot project is built for developers by developers. The zot project welcomes the participation of the open source community in extending and improving zot. </p>"},{"location":"developer-guide/contributing/#submission-requirements","title":"Submission Requirements","text":"<p>Summary: All contributions must meet these requirements:</p> <ul> <li>Adhere to the Apache license</li> <li>Be submitted by a pull request (PR) from your fork</li> <li>Commits must have a  </li> </ul>"},{"location":"developer-guide/contributing/#license","title":"License","text":"<p>zot is released under the Apache License 2.0. All contributions must adhere to this license and must explicitly state adherence.</p>"},{"location":"developer-guide/contributing/#submitting-a-pull-request-pr","title":"Submitting a Pull Request (PR)","text":"<p>First, fork the zot project on GitHub and submit a commit to your fork. Then open a new pull request (PR) to the zot project. All pull requests must meet these requirements:</p> <ul> <li>License statement</li> </ul> <p>Either the commit message or the PR description must contain the following statement:</p> <p>\"By submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.\"</p> <ul> <li>Developer Certificate of Origin (DCO) and sign-off</li> </ul> <p>All commits require a Developer Certificate of Origin via the \"Signed-off-by:\" commit message and commit signatures using GPG keys. Include the <code>-s</code> flag in your <code>git commit</code> command.</p> <ul> <li>Commit message format</li> </ul> <p>The commit message must follow the Convention Commits format. The message must begin with a keyword that categorizes the commit, followed by a colon. Validation of a commit message is determined by this expression:</p> <p><code>\"^((build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\\(.+\\))?(!)?(: (.*\\s*)*))\"</code></p> <p>An example of a valid commit message is \"docs: Fixes a typo in module.md.\"</p> <p>In addition, any new PR requires a brief form to be completed by the submitter with details about the PR. Appropriate code owners are automatically identified and will be notified of the new PR.</p>"},{"location":"developer-guide/contributing/#cicd-checks","title":"CI/CD Checks","text":"<p>We take code quality very seriously. All PRs must pass various CI/CD checks that enforce code quality such as code coverage, security scanning, performance regressions, distribution spec conformance, ecosystem client tool compatibility, etc.</p>"},{"location":"developer-guide/contributing/#reporting-issues","title":"Reporting Issues","text":"<p>Issues are broadly classified as functional bugs and security issues. The latter is treated a little differently due to the sensitive nature.</p>"},{"location":"developer-guide/contributing/#filing-a-functional-issue","title":"Filing a Functional Issue","text":"<p>No software is perfect, and we expect users to find issues with the zot code base. First, check whether your issue has already been filed by someone else by performing  an issue search. If the issue is not found, file a new issue by clicking the New issue button on the zot/issues page and answering the questions. The more information that you can provide, the easier it becomes to triage the issue.</p>"},{"location":"developer-guide/contributing/#filing-a-security-issue","title":"Filing a Security Issue","text":"<p>Security issues are best filed by sending an email to <code>security@zotregistry.dev.</code> After 45 days, we will make the issue public and give credit to the original filer of the issue.</p>"},{"location":"developer-guide/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>The zot project follows the CNCF Code of Conduct.</p>"},{"location":"developer-guide/contributing/#reporting-conduct-incidents","title":"Reporting Conduct Incidents","text":"<p>To report a conduct-related incident occurring on the zot project, contact the zot project conduct committee by sending an email to <code>conduct@zotregistry.dev.</code> You can expect a response within three business days.</p>"},{"location":"developer-guide/extensions-dev/","title":"Developing New Extensions","text":"<p> You can add new functionality to the zot registry by developing extensions for integration into zot.</p> <p>The OCI Distribution Specification supports extending the functionality of an OCI-compliant registry implementation by adding extensions. Extensions are new APIs developed outside of the core OCI specs. Developers may propose their extensions to the OCI for possible future addition to the Distribution Specification.</p> <p> When planning the development of a new extension, be sure to familiarize yourself with the OCI documentation and guidelines for extensions.</p>"},{"location":"developer-guide/extensions-dev/#current-extensions","title":"Current extensions","text":"<p>The following extensions are currently available in the zot project: </p> <ul> <li>metrics</li> <li>sync</li> <li>search</li> <li>scrub</li> <li>lint</li> </ul> <p>You can examine the implementation of these extensions in the zot project extensions section. The operation and configuration of the current extensions is described in Configuring zot.</p>"},{"location":"developer-guide/extensions-dev/#guidelines-for-developing-new-extensions","title":"Guidelines for developing new extensions","text":"<ul> <li>Each file to be included in the binary for only a specific extension must contain the following syntax at the beginning of the file. For example, a file to be included in the build for extension foo must begin with the following lines:</li> </ul> <pre><code>  //go:build foo\n  // +build foo\n\n  package foo\n\n  ...\n</code></pre> <pre><code>- The first line (`//go:build foo`) is added automatically by the linter if not already present.\n\n- The second line and the third (blank) line are mandatory.\n</code></pre> <ul> <li> <p>For each file that contains functions specific to the extension, create a corresponding \"no-op\" file that contains exactly the same function names. In this file:</p> <ul> <li>Each function is a \"no-op,\" performing no action other than to return a \"success\" value if expected.</li> <li>We recommend naming this \"no-op\" file by appending <code>-disabled</code> to the name of the original file. For example, if the extension is implemented by <code>extension-foo.go</code>, the corresponding \"no-op\" file could be named <code>extension-foo-disabled.go</code>.</li> <li>The first two lines declare an \"anti-tag\" (for example, <code>!foo</code>). In the foo extension example, the \"no-op\" file will be included in binaries that don't implement the foo extension, but won't be included in binaries that implement the foo extension.  The foo example \"no-op\" file begins with the following lines:</li> </ul> </li> </ul> <p><pre><code>    //go:build !foo\n    // +build !foo\n\n    package foo\n\n    ...\n</code></pre>     See extension lint-disabled.go in the zot project for an example of a \"no-op\" file.</p> <ul> <li> <p>When developing a new extension, you should create a blackbox test in which a binary containing the new extension can be tested in a usage scenario. See the test/blackbox folder in the zot project for examples of extension tests.</p> <ul> <li>Create targets in <code>Makefile</code> for newly added blackbox tests. You should also add them as GitHub Workflows in .github/workflows/ecosystem-tools.yaml in the zot project.</li> </ul> </li> <li> <p>When configuring multiple extensions in the <code>extensions</code> section of the zot configuration file, list new extensions after the current extensions in the recommended order, such as:</p> <p>metrics, sync, search, scrub, lint, new_extension_1, new_extension_2, ...</p> </li> </ul>"},{"location":"developer-guide/extensions-dev/#building-zot-with-extensions","title":"Building zot with extensions","text":"<p>When you build the full zot image (for example, <code>make binary</code>), all extensions listed in the EXTENSIONS variable in <code>Makefile</code> are included in the build. When you've created a new extension, you must modify the EXTENSIONS variable in <code>Makefile</code> by adding the new extension. </p> <p>To build an image with only selected extensions, you can specify the desired extensions by declaring them in the build command:</p> <pre><code>make binary EXTENSIONS=extension1,extension2,extension3...\n</code></pre> <p>For example, to build with only sync and scrub, the command would be:</p> <pre><code>make binary EXTENSIONS=sync,scrub\n</code></pre>"},{"location":"developer-guide/onboarding/","title":"Onboarding zot for Development","text":"<p> zot is a production-ready, open-source, extensible OCI-native image registry, built for developers by developers.</p>"},{"location":"developer-guide/onboarding/#getting-started","title":"Getting Started","text":""},{"location":"developer-guide/onboarding/#supported-developer-platforms","title":"Supported Developer Platforms","text":"<p>Development is officially supported on <code>Linux</code> and <code>Apple MacOS</code> platforms. However, development should be possible on any platform that supports the <code>golang</code> toolchain.</p> OS ARCH Platform linux amd64 Intel-based Linux servers linux arm64 ARM-based servers and Raspberry Pi4 darwin amd64 Intel-based MacOS darwin arm64 ARM-based MacOS (Apple M1) <p>Supported platforms and architectures</p>"},{"location":"developer-guide/onboarding/#prerequisites","title":"Prerequisites","text":""},{"location":"developer-guide/onboarding/#install-golang","title":"Install golang","text":"<p>Follow the golang instructions to install the <code>golang</code> toolchain. After installation, make sure that the <code>path</code> environment variable or your IDE can find the toolchain.</p> <p> You must use a golang version of at least the minimum specified in go.mod or the build will fail.</p>"},{"location":"developer-guide/onboarding/#cloning-zot","title":"Cloning zot","text":"<p>The zot registry code base is hosted on GitHub at https://github.com/project-zot/zot.</p> <p>To clone the zot project, use this command:</p> <pre><code>$ git clone https://github.com/project-zot/zot.git\n</code></pre>"},{"location":"developer-guide/onboarding/#building-zot","title":"Building zot","text":"<p>To build zot, execute the <code>make</code> command in the zot directory using the following general syntax:</p> <p><code>$ make OS=os ARCH=architecture {binary | binary-minimal}</code></p> <ul> <li> <p>The operating system and architecture options are listed in the     Supported platforms and architectures     table. If an option is not specified, the defaults are <code>linux</code> and     <code>amd64</code>.</p> </li> <li> <p>The <code>binary</code> option builds the full zot binary image with all     extensions.</p> </li> <li> <p>The <code>binary-minimal</code> option builds the minimal distribution-spec     conformant zot binary image without extensions, reducing the attack     surface.</p> </li> </ul> <p>For example, to build a zot image with extensions for an Intel-based linux server, use the following command:</p> <pre><code>make OS=linux ARCH=amd64 binary\n</code></pre> <p>The <code>make</code> command builds an executable image in the <code>zot/bin</code> directory. The original filename of the zot executable image will indicate the build options. For example, the filename of an Intel-based linux minimal image is <code>zot-minimal-linux-amd64</code>.</p> Click here to view an example of the getting started process. <p> </p>"},{"location":"developer-guide/onboarding/#running-zot","title":"Running zot","text":"<p>The behavior of zot is controlled via configuration only. To launch the zot server, execute the following command:</p> <pre><code>$  bin/zot-linux-amd64 serve examples/config-minimal.json\n</code></pre>"},{"location":"developer-guide/onboarding/#debugging-zot","title":"Debugging zot","text":"<p>To produce a zot binary that includes extensive debugging information, build zot with the <code>binary-debug</code> option, as shown in this example:</p> <pre><code>make OS=linux ARCH=amd64 binary-debug\n</code></pre> <p>You can then attach and run a debugging tool such as Delve to the running zot process.</p> <p>Delve is a powerful open-source debugger for the Go programming language. Downloads and documentation for Delve are available on GitHub at https://github.com/go-delve/delve.</p>"},{"location":"developer-guide/onboarding/#performance-profiling","title":"Performance profiling","text":"<p>Performance profiling capabilities within zot allow a zot administrator to collect and export a range of diagnostic performance data such as CPU intensive function calls, memory allocations, and execution traces. The collected data can then be analyzed using Go tools and a variety of available visualization tools.</p> <p>For detailed information about performance profiling, see Performance Profiling in zot.</p>"},{"location":"developer-guide/onboarding/#code-organization","title":"Code Organization","text":"<p>The zot project codebase is organized as follows:</p> <pre><code>/\n- pkg/              # Source code for all libraries\n  - api/            # Source code for HTTP APIs\n    - config/       # Global configuration model\n  - storage/        # Source code for storage backends\n  - cli/            # Source code for command line interface (cli)\n  - common/         # Source code for common utility routines\n  - compliance/     # Source code for dist-spec conformance tests\n  - log/            # Source code for logging framework\n  - test/           # Internal test scripts/data\n  - extensions/     # Source code for all extensions\n    - config/\n    - sync/\n    - monitoring/\n    - sync/\n  - exporter/       # Source code for metrics exporter\n- cmd/              # Source code for binary main()s\n  - zot/            # Source code for zot binary\n  - zli/            # Source code for zot cli\n  - zb/             # Source code for zb, the dist-spec benchmarking tool\n- errors/           # Source code for error codes\n- examples/         # Configuration examples\n- swagger/          # Swagger integration\n- docs/             # Documentation\n</code></pre>"},{"location":"developer-guide/onboarding/#additional-state-in-zot","title":"Additional state in zot","text":"<p>In addition to the storage of repository images, zot stores data for various processes in local and remote storage and databases.  The following table shows the storage locations for different processes and types of data.</p> Data or Process Storage Location Description images local andAWS S3 Image blobs repository synchronization local/&lt;repo_name&gt;/.sync The sync operation temporarily copies the upstream blobs to: /&lt;repo_name&gt;/.sync/${UUID}/&lt;repo_name&gt;, then copies to /&lt;repo_name&gt; and deletes the temporary directory ${UUID} deduplication local/cache.db Cache for deduplication of files stored locally AWS DynamoDB Cache for deduplication of files stored in AWS CVE local/_trivy Database of Common Vulnerabilities and Exposures (CVE) information and scan results user sessions local/_sessions zot user session authentication (for zui) PKI authentication documents local/_cosign Private keys for signature verification using cosign local/_notation Certificates for signature verification using notation metadata local/repo.db Local storage of manifests, configurations, download counters, signature verification results AWS DynamoDB Cloud storage of manifests, configurations, download counters, signature verification results"},{"location":"general/architecture/","title":"Architecture","text":"<p> zot is an OCI-native container image registry. This document discusses the design goals, the overall architecture, and the design choices made in the implementation of the design goals.</p>"},{"location":"general/architecture/#design-goals","title":"Design Goals","text":""},{"location":"general/architecture/#oci-first","title":"OCI-first","text":"<ul> <li> <p>HTTP APIs strictly conforms to the OCI Distribution     Specification</p> <p>zot intends to be a production reference implementation for the OCI Distribution Specification. In fact, zot does not support any other vendor protocol or specification.</p> </li> <li> <p>Storage layout follows the OCI Image     Specification</p> <p>The default and only supported storage layout is the OCI Image Layout. The implications of this choice are that any OCI image layout can be served by zot and conversely, zot converts data on-the-wire into an OCI image layout.</p> </li> </ul>"},{"location":"general/architecture/#single-binary-model","title":"Single binary model","text":"<p>zot is a single binary image with all features included so that deployment is extremely simple in various environments, including bare-metal, cloud, and embedded devices. Behavior is controlled by a single configuration file.</p>"},{"location":"general/architecture/#enable-only-what-you-need","title":"Enable Only What You Need","text":"<p>A clear separation exists between (1) the core OCI-compliant HTTP APIs and storage functionality, and (2) other add-on features modeled as extensions. The extension features can be selectively enabled both at build-time and run-time.</p> <p>For more information, see \"Conditional Builds\" in zot's security posture document.</p>"},{"location":"general/architecture/#overall-architecture","title":"Overall Architecture","text":"<p>As shown in the following figure, the architecture of zot is organized as: </p> <p> zot-full = zot-minimal + extensions</p> <p></p> <p>The minimal build is the core OCI-compliant registry functionality as described by the OCI Distribution Specification. </p> <p>The full build adds features that are not a part of the Distribution Specification, but are allowed to be added as Extensions. </p>"},{"location":"general/architecture/#external-interaction","title":"External Interaction","text":"<p>External interaction with zot consists of the following two types:</p> <ul> <li> <p>Client-initiated data or meta-data queries</p> </li> <li> <p>Admin-initiated configuration</p> </li> </ul> <p>All client-side interaction occurs over HTTP APIs. The core data path queries are governed by the OCI Distribution Specification. All additional meta-data queries are handled based on the setting of the <code>search</code> extension:</p> <ul> <li> <p>If the <code>search</code> extension is enabled, enhanced registry searching     and filtering is supported, using graphQL. A database is maintained     by zot to efficiently answer complex queries on data stored in the     database.</p> </li> <li> <p>If the <code>search</code> extension is not enabled, basic queries are     supported using the core APIs. These queries are less efficient and     search actual storage, which is limited in content.</p> </li> </ul>"},{"location":"general/architecture/#configuration","title":"Configuration","text":"<p>A single configuration file governs zot instance behavior. An exception can be made for security concerns, wherein configuration items containing sensitive credentials can be stored in separate files referenced by the main configuration file. Using separate files allows stricter permissions to be enforced on those files if stored locally. Also, modeling as external files allows for storing Kubernetes Secrets.</p> <p>The configuration file is divided into sections for <code>http</code>, <code>storage</code>, <code>log</code>, and <code>extension</code>, governing the behavior of the respective components.</p>"},{"location":"general/architecture/#authentication-and-authorization","title":"Authentication and Authorization","text":"<p>A robust set of authentication and authorization options are supported natively in zot. These controls are enforced before access is allowed into the storage layer.</p> <p>For more information, see User Authentication and Authorization with zot.</p>"},{"location":"general/architecture/#storage-driver-support","title":"Storage Driver Support","text":"<p>zot supports any modern local filesystem. Remote filesystems, such as AWS S3 or any AWS S3-compatible storage system, are supported. Additional driver support is planned in the roadmap.</p> <p> Deduplication is supported for both local and remote filesystems, but deduplication requires a filesystem with hard-link support.</p> <p>For more information, see Storage Planning with zot.</p>"},{"location":"general/architecture/#security-scanning","title":"Security Scanning","text":"<p>zot integrates with the <code>trivy</code> security scanner to scan container images for vulnerabilities. The database is kept current by periodically downloading any vulnerability database updates at a configurable interval. The user remains agnostic of the actual scanner implementation, which may change over time.</p>"},{"location":"general/architecture/#extensions","title":"Extensions","text":"<p>Additional registry features that are not a part of the Distribution Specification are added as Extensions.  </p> <p> Extension features of zot are available only with a full zot image. They are not supported in a minimal zot image.</p> <p>For more information about zot's extensions, see Extensions.</p>"},{"location":"general/architecture/#background-tasks","title":"Background Tasks","text":"<p>Several periodic tasks occur in the registry, such as garbage collection, sync mirroring, and scrubbing. A task scheduler handles these tasks in the background, taking care not to degrade or interrupt foreground tasks running in the context of HTTP APIs.</p>"},{"location":"general/concepts/","title":"Concepts","text":""},{"location":"general/concepts/#what-is-zot","title":"What is zot?","text":"<p> zot is a production-ready, open-source, vendor-neutral container image registry server based purely on OCI standards.</p> <p>Two broad trends are changing how we build, distribute, and consume software. The first trend is the increasing adoption of container technologies. The second trend is that software solutions are being composed by combining elements from various sources rather than being built entirely from scratch. The latter trend raises the importance of software provenance and supply chain security. In both trends, zot intends to play an important role by providing a production-ready, open-source, vendor-neutral container image registry server based purely on OCI standards.</p>"},{"location":"general/concepts/#what-is-an-oci-image-registry","title":"What is an OCI image registry?","text":"<p>An OCI image registry is a server-based application that allows you to store, manage, and share container images. A developer uploads (pushes) an image to the registry for distribution. Users can then download (pull) the image to run on their systems. The OCI Distribution Specification, published by the Open Container Initiative (OCI), defines a standard API protocol for these and other image registry operations.</p> <p>An image registry can be a part of your continuous integration and continuous deployment (CI/CD) pipeline when you host zot on your public or private server. In its minimal form, you can also embed a zot registry in a product. In either case, zot provides a secure software supply chain for container images.</p>"},{"location":"general/concepts/#why-zot","title":"Why zot?","text":"<p> zot = OCI Distribution Specification + OCI Image Format</p> <p>At its heart, zot is a production-ready, vendor-neutral OCI image registry with images stored in the OCI image format and with the OCI distribution specification on-the-wire. zot is built for developers by developers, offering features such as minimal deployment using a single binary image, built-in authentication and authorization, and inline garbage collection and storage deduplication.</p> <p></p> <p>Some of the principal advantages of zot are:</p> <ul> <li> <p>Open source</p> </li> <li> <p>OCI standards-only both on-the-wire and on-disk</p> </li> <li> <p>Clear separation between core distribution spec and zot-specific     extensions</p> </li> <li> <p>Software supply chain security, including support for     cosign and     notation</p> </li> <li> <p>Security hardening</p> </li> <li> <p>Single binary with many features built-in</p> </li> <li> <p>Suitable for deployments in cloud, bare-metal, and embedded devices</p> </li> </ul> <p>zot fully conforms to the OCI Distribution Specification.</p> <p>The following table lists additional advantages of zot:</p> Distribution Spec conformance yes CNCF project accepted as a Sandbox Project License Apache 2.0 On-premises deployment yes OCI conformance* yes Single binary image* yes Minimal build* yes Storage Layout OCI v1 Image Layout Authentication built-in Authorization built-in Garbage collection inline Storage deduplication inline Cloud storage support yes Delete by tag yes Vulnerability scanning built-in Command line interface (cli) yes UI yes External contributions beta available Image signatures built-in <p> * The minimal build feature is the ability to build a minimal Distribution Spec compliant registry in order to reduce library dependencies and the possible attack surface.</p>"},{"location":"general/extensions/","title":"Extensions","text":"<p> Extensions provide additional registry features that are not a part of the Distribution Specification.</p> <p>The following extensions are currently available with zot:</p> <ul> <li>Search (enhanced)</li> <li>Sync</li> <li>Lint</li> <li>Scrub</li> <li>Trust</li> <li>Metrics</li> <li>Graphical user interface</li> <li>User preferences</li> </ul> <p> For detailed information about configuring zot extensions, see Configuring zot.</p>"},{"location":"general/extensions/#about-extensions","title":"About extensions","text":"<p>The OCI Distribution Specification supports extending the functionality of an OCI-compliant registry implementation by adding extensions. Extensions are new APIs developed outside of the core OCI specs. Developers may propose their extensions to the OCI for possible future addition to the Distribution Specification.</p> <p>Wherever applicable, extensions can be dynamically discovered using the extensions support of the OCI Distribution Specification.</p> <p> Extension features of zot are available only with a full zot image. They are excluded from the minimal zot image.</p>"},{"location":"general/extensions/#extensions-implemented-in-zot","title":"Extensions implemented in zot","text":"<p>The extensions implemented in zot include administrator-configured functionality and end-user features. </p> <p> Currently, search, trust, and userprefs are the only zot extensions operable by end users. Only these extensions are accessible through HTTP APIs and are discoverable using the OCI extensions mechanism.</p> <p>The following extensions are currently supported by zot:</p>"},{"location":"general/extensions/#search","title":"Search","text":"<p>One of the key functions of a container image registry (which is essentially a graph of blobs) is the ability to perform interesting image and graph traversal queries. The user interacts with the search extension via a graphQL endpoint. The schema is published with every release.</p> <p>Examples of queries are:</p> <ul> <li>\"Does an image exist?\"</li> <li>\"What is its size?\"</li> <li>\"Does an image depend on this image via its layers?\"</li> <li>\"What vulnerabilities exist in an image or its dependent images?\"</li> </ul>"},{"location":"general/extensions/#sync","title":"Sync","text":"<p>You can deploy a local mirror pointing to an upstream zot instance with various container image download policies, including on-demand and periodic downloads. The sync function is useful to avoid overwhelming the upstream instance, or if the upstream instance has rate-limited access.</p> <p> <code>docker.io</code> is supported as an upstream mirror.</p>"},{"location":"general/extensions/#lint","title":"Lint","text":"<p>The lint extension helps to avoid image compliance issues by enforcing certain policies about the image or the image metadata. Currently, lint can check an uploaded image to enforce the presence of required annotations such as the author or the license.</p>"},{"location":"general/extensions/#scrub","title":"Scrub","text":"<p>Although container images are content-addressable with their SHA256 checksums, and validations are performed during storage and retrieval, it is possible that bit-rot sets in when not in use. The scrub extension actively scans container images in the background to proactively detect errors.</p>"},{"location":"general/extensions/#trust","title":"Trust","text":"<p>Images stored in zot can be signed with a digital signature to verify the source and integrity of the image. The digital signature can be verified by zot using public keys or certificates uploaded by the user through the zot API. The trust extension enables and configures this function.</p>"},{"location":"general/extensions/#metrics","title":"Metrics","text":"<p>The metrics extension adds a node exporter, which is not present in the minimal build.</p>"},{"location":"general/extensions/#graphical-user-interface","title":"Graphical user interface","text":"<p>Using the zot graphical user interface (GUI), you can browse a zot registry for container images and artifacts. From the web interface, you can copy the shell commands for downloading an image using popular third-party tools such as docker, podman, and skopeo.</p>"},{"location":"general/extensions/#user-preferences","title":"User preferences","text":"<p>The userprefs extension provides an API endpoint for adding configurable user preferences for a repository. This custom extension, not a part of the OCI distribution, is accessible only by authenticated users of the registry. Unauthenticated users are denied access.</p> <p>The functions currently implemented by this extension include:</p> <ul> <li>Toggling the star (favorites) icon for a repository.</li> <li>Toggling the bookmark icon for a repository.</li> </ul> <p> For information about configuring zot extensions, see Configuring zot.</p>"},{"location":"general/features/","title":"Summary of Key Features","text":"<ul> <li>Conforms to OCI distribution spec APIs</li> <li>Uses OCI image layout for image storage<ul> <li>Can serve any OCI image layout as a registry </li> </ul> </li> <li>Single binary for all the features</li> <li>Doesn't require root privileges</li> <li>Clear separation between core dist-spec and zot-specific extensions</li> <li>Supports container image signatures - cosign and notation</li> <li>Supports helm charts</li> <li>Behavior controlled via configuration</li> <li>Binaries released for multiple operating systems and architectures</li> <li>Supports advanced image queries using search extension</li> <li>Supports image deletion by tag</li> <li>Currently suitable for on-premises deployments (e.g. colocated with Kubernetes)</li> <li>Compatible with ecosystem tools such as skopeo and cri-o</li> <li>Vulnerability scanning of images</li> <li>TLS support Authentication via:<ul> <li>TLS mutual authentication</li> <li>HTTP Basic (local htpasswd and LDAP)</li> <li>HTTP Bearer token</li> </ul> </li> <li>Supports Identity-Based Access Control</li> <li>Supports live modifications on the configuration file while zot is running (Authorization configuration only)</li> <li>Inline storage optimizations:<ul> <li>Automatic garbage collection of orphaned blobs</li> <li>Layer deduplication using hard links when content is identical</li> <li>Data scrubbing</li> </ul> </li> <li>Serve multiple storage paths (and backends) using a single zot server</li> <li>Pull and synchronize from other dist-spec conformant registries</li> <li>Supports rate limiting including per HTTP method</li> <li>Metrics with Prometheus<ul> <li>Using a node exporter in case of minimal zot</li> </ul> </li> <li>Swagger based documentation</li> <li>zli: command-line client support</li> <li>zb: a benchmarking tool for dist-spec conformant registries</li> <li>Released under  Apache 2.0 License</li> </ul>"},{"location":"general/glossary/","title":"Glossary","text":""},{"location":"general/glossary/#documentation-icons","title":"Documentation Icons","text":"Icon Description Note \u2014 A point of emphasis or caution. Tip \u2014 A helpful suggestion or a reference to additional material not covered in this document. Warning \u2014 A suggestion or advisory intended to avoid a loss of service or data."},{"location":"general/glossary/#definitions","title":"Definitions","text":"Term Description artifact A file of any kind produced during a container build process or associated with the operation of a container. For example, a Helm chart is an artifact that might be stored along with a container. CNCF As part of the Linux Foundation, the Cloud Native Computing Foundation provides support, oversight, and direction for open-source, cloud native projects. cosign <code>cosign</code> is a tool that performs container signing, verification, and storage in an OCI registry. cosigned <code>cosigned</code> is an image admission controller that validates container images before deploying them. cri-o <code>cri-o</code> is an implementation of the Kubernetes Container Runtime Interface (CRI) to enable using OCI compatible runtimes. It is a lightweight alternative to using Docker as the runtime for Kubernetes. deduplication A storage space saving feature wherein only a single copy of specific content is maintained on disk while many different image manifests may hold references to that same content. digest A hashed checksum, such as SHA-256, for verifying the integrity of the downloaded image. Distribution Specification The OCI Distribution Specification project defines an API protocol to facilitate and standardize the distribution of content. extensions Additional registry features (APIs) that are not a part of the Distribution Specification can be added as Extensions. helm chart A helm chart is a package of files that orchestrate the deployment of Kubernetes resources into a Kubernetes cluster. manifest An image manifest provides a configuration and set of layers for a single container image for a specific architecture and operating system. node exporter A software component that collects hardware and operating system level metrics exposed by the kernel. OCI The Open Container Initiative (OCI) is an open governance structure for the express purpose of creating open industry standards around container formats and runtimes. ORAS OCI Registry as Storage (ORAS) is a tool for distributing OCI artifacts across OCI registries. prometheus Prometheus is a node exporter that exposes a wide variety of hardware- and kernel-related metrics. referrer An image containing a non-nil subject field with a descriptor to the referred image. registry A service that stores and distributes container images and artifacts. repository A collection of images with the same name, differentiated by tags. skopeo <code>skopeo</code> is a command line utility that performs various operations on container images and image repositories. stacker <code>stacker</code> is a standalone tool for building OCI images via a declarative <code>yaml</code> format. The output of the build process is a container image in an OCI layout. tag A label applied to an image that distinguishes the image from other images in the same repository. A common example is a version tag. zb A benchmarking tool, available as a zot companion binary, for benchmarking a zot registry or any other container image registry that conforms to the OCI Distribution Specification. zli A zot companion binary that implements a set of command line commands for interacting with the zot registry server. zui A zot companion binary that implements a graphical user interface (GUI) for interacting with the zot registry server. zxp A node exporter, available as a zot companion binary,  that can be deployed with a minimal zot image in order to scrape metrics from the zot server."},{"location":"general/project/","title":"About the zot Project","text":""},{"location":"general/project/#project-repository","title":"Project Repository","text":"<p>The zot project is hosted on GitHub:</p> <p>project-zot/zot</p>"},{"location":"general/project/#sponsors","title":"Sponsors","text":"<p>Cisco Systems, Inc.</p>"},{"location":"general/project/#adopters","title":"Adopters","text":"<p>Cisco Systems, Inc.</p>"},{"location":"general/project/#presentations","title":"Presentations","text":"<p>OCI Weekly Discussion - Oct 2, 2019</p>"},{"location":"general/releases/","title":"Released Images for zot","text":"<p> This document describes the available zot images for the various supported hardware and software platforms, along with information about image variations, image locations, and image naming formats.</p> <p></p>"},{"location":"general/releases/#supported-platforms","title":"Supported platforms","text":"<p>zot is supported on Linux and Apple MacOS platforms with Intel or ARM processors.</p> <p>Table: Supported platforms and architectures</p> OS ARCH Platform linux amd64 Intel-based Linux servers linux arm64 ARM-based servers and Raspberry Pi4 darwin amd64 Intel-based MacOS darwin arm64 ARM-based MacOS (Apple M1) freebsd amd64 Intel-based FreeBSD<sup>*</sup> freebsd arm64 ARM-based FreeBSD<sup>*</sup> <p><sup> **NOTE:* While binary images are available for FreeBSD, building container images is not supported at this time."},{"location":"general/releases/#full-and-minimal-binary-images","title":"Full and minimal binary images","text":"<p>In addition to variations for specific platforms and architectures, binary images are also available in full and minimal flavors:</p> <ul> <li> <p>A full zot binary image is compiled with all extensions. Extensions include functions such as metrics, registry synchronization, search, and scrub.</p> </li> <li> <p>A minimal distribution-spec conformant zot binary image is compiled with only a minimal set of code and libraries, reducing the attack surface. This option might be optimal for a registry embedded in a shipping product.</p> </li> </ul>"},{"location":"general/releases/#binary-image-file-naming","title":"Binary image file naming","text":"<p>An executable binary image for zot is named using the target platform and architecture from the Supported platforms and architectures table. The general format of a binary image file name is one of these two:</p> <p><code>zot-&lt;os&gt;-&lt;architecture&gt;</code></p> <ul> <li>A full zot binary image with all extensions has a filename of the form <code>zot-&lt;os&gt;-&lt;architecture&gt;.</code> For example, the full binary image for an Intel-based linux server is <code>zot-linux-amd64</code>.</li> </ul> <p><code>zot-&lt;os&gt;-&lt;architecture&gt;-minimal</code></p> <ul> <li>A minimal distribution-spec conformant zot binary image has a filename of the form <code>zot-&lt;os&gt;-&lt;architecture&gt;-minimal</code>. For example, the minimal binary image for an Intel-based linux server is <code>zot-linux-amd64-minimal</code>.</li> </ul> <p> For convenience, you can rename the binary image file to simply <code>zot</code> after downloading.</p>"},{"location":"general/releases/#where-to-get-zot","title":"Where to get zot","text":"<p>You can download native executable binary images or container (Docker) images.</p>"},{"location":"general/releases/#getting-binary-images","title":"Getting binary images","text":"<p>The zot project is hosted on GitHub at project-zot.  </p> <p>To download a binary image, go to the zot releases and select a release. Go to the Assets section of the release page and download the binary for your platform and architecture.</p> <p>  You may need to use the <code>chmod</code> command to make the image executable.</p> <p>  When downloading a binary image for MacOS, download the darwin image.</p>"},{"location":"general/releases/#getting-container-images","title":"Getting container images","text":"<p>You can download a container image from <code>ghcr.io</code> by forming a URL with the desired image name, such as:</p> <pre><code>https://ghcr.io/project-zot/zot-&lt;os&gt;-&lt;architecture&gt;[-&lt;build&gt;]\n</code></pre> <p>If <code>&lt;build&gt;</code> is not specified, the default is <code>full</code>. For example, to download the minimal binary image for an Intel-based linux server. The URL is:</p> <pre><code>https://ghcr.io/project-zot/zot-linux-amd64-minimal\n</code></pre> <p>  When downloading a container image for MacOS, download the linux image, not the darwin image.</p>"},{"location":"general/releases/#licensing","title":"Licensing","text":"<p>zot is released under the Apache License 2.0.</p>"},{"location":"general/whats-new/","title":"What's New","text":""},{"location":"general/whats-new/#v213","title":"v2.1.3","text":""},{"location":"general/whats-new/#event-generation","title":"Event generation","text":"<p>zot can now generate registry-significant events that can be published to http or nats endpoints.</p>"},{"location":"general/whats-new/#improved-docker-support-in-ui","title":"Improved <code>docker</code> Support in UI","text":"<p>Native docker images are now correctly displayed in the Web UI.</p>"},{"location":"general/whats-new/#redis-driver-support","title":"Redis driver Support","text":"<p>Previous releases supported a local BoltDB or a remote DynamoDB database in order to store image and blob metadata. This release now includes support for Redis.</p>"},{"location":"general/whats-new/#aws-ecr-sync-support-with-temporary-token-authentication","title":"AWS ECR Sync Support With Temporary Token Authentication","text":"<p>(AWS ECR)[../articles/mirroring/#example-support-for-aws-ecr] can now be used as the upstream registry to mirror from and the configuration allows for an authentication helper.</p>"},{"location":"general/whats-new/#sync-exclude-regex","title":"Sync Exclude Regex","text":"<p>While mirroring from an upstream registry, it is now possible to exclude images with a regex pattern.</p>"},{"location":"general/whats-new/#windows-binaries","title":"Windows Binaries","text":"<p>Native Windows binaries (both amd64 and arm64) are now distributed with the release.</p>"},{"location":"general/whats-new/#bug-fixes","title":"Bug fixes","text":"<p>The following security issue has been fixed in this release.</p> <p><code>GHSA-c37v-3c8w-crq8/CVE-2025-48374</code></p>"},{"location":"general/whats-new/#v212","title":"v2.1.2","text":""},{"location":"general/whats-new/#compatibility-with-other-image-schema-types","title":"Compatibility with other image schema types","text":"<p>A new configuration setting allows you to store images using the schema Docker Manifest v2 Schema v2. With this setting enabled, zot makes no modifications to the image's manifest or digest. Such modifications would otherwise break the image's signature and attestations.</p>"},{"location":"general/whats-new/#bug-fixes_1","title":"Bug fixes","text":"<p>The following security issue has been fixed in this release.</p> <p><code>GHSA-c9p4-xwr9-rfhxi/CVE-2025-23208</code></p>"},{"location":"general/whats-new/#v210","title":"v2.1.0","text":""},{"location":"general/whats-new/#scale-out-cluster","title":"Scale-out cluster","text":"<p>You can build a scale-out cluster (proxy/shard based on repository name). Scale-out cluster is compatible with \"sync\" feature.</p>"},{"location":"general/whats-new/#bug-fixes_2","title":"Bug fixes","text":"<p>The following security issue has been fixed in this release.</p> <p><code>GHSA-55r9-5mx9-qq7r/CVE-2024-39897</code></p>"},{"location":"general/whats-new/#v204","title":"v2.0.4","text":"<p>This is a maintenance release with minor bug fixes.</p>"},{"location":"general/whats-new/#v203","title":"v2.0.3","text":"<p>This is a maintenance release with minor bug fixes.</p>"},{"location":"general/whats-new/#v202","title":"v2.0.2","text":""},{"location":"general/whats-new/#cve-query-enhancements","title":"CVE Query Enhancements","text":"<p>It is now possible to bisect CVEs (<code>zli cve diff</code>) between two image tags/versions in the same repository. Furthermore, a CVE query for a particular image tag can return a detailed description of CVEs.</p>"},{"location":"general/whats-new/#documentation-for-immutable-image-tags","title":"Documentation for \"Immutable Image Tags\"","text":"<p>A new article has been added to document how image tags can be made immutable.</p>"},{"location":"general/whats-new/#cross-repo-tag-search-in-ui","title":"Cross-repo tag search in UI","text":"<p>You can now search for a tag across all repos by starting your query as ':' in the UI, which will return all images that have that tag."},{"location":"general/whats-new/#support-for-oras-artifacts-removed","title":"Support for ORAS Artifacts removed","text":"<p>OCI distribution spec 1.1.0 has added support \"artifacts\" which is likely to gain wider adoption. ORAS artifacts are not widely used or supported.</p> <pre><code>:warning:  Support is removed starting from this version.\n</code></pre>"},{"location":"general/whats-new/#v201","title":"v2.0.1","text":""},{"location":"general/whats-new/#support-for-hot-reloading-of-ldap-credentials-file","title":"Support for hot reloading of LDAP credentials file","text":"<p>Since v2.0.0, LDAP credentials have been specified in a separate file. Starting with this version, the file is watched and changes applied without restarting zot.</p>"},{"location":"general/whats-new/#bugfixes-and-performance-improvements","title":"Bugfixes and performance improvements","text":"<p>Under some configurations, zot consumes significant CPU and memory resources. This has been fixed in this release.</p>"},{"location":"general/whats-new/#v200","title":"v2.0.0","text":""},{"location":"general/whats-new/#updated-oci-support","title":"Updated OCI support","text":"<ul> <li> <p>Support is added for OCI Distribution Spec v1.1.0-rc3 and OCI Image Spec v1.1.0-rc4. The OCI changes are summarized here.  These specifications allow arbitrary artifact types and references so that software supply chain use cases can be supported (SBOMs, signatures, etc). Currently, <code>oras</code> and <code>regclient</code> support this spec.</p> </li> <li> <p>For a demonstration of an end-to-end OCI artifacts workflow, see Software Provenance Workflow Using OCI Artifacts.</p> <p>  Support is deprecated for earlier OCI release candidates.</p> </li> </ul>"},{"location":"general/whats-new/#built-in-ui-support","title":"Built-in UI support","text":"<ul> <li>Using the new zot GUI, you can browse a zot registry for container images and artifacts. The web interface provides the shell commands for downloading an image using popular third-party tools such as docker, podman, and skopeo.</li> </ul>"},{"location":"general/whats-new/#support-for-social-logins","title":"Support for social logins","text":"<ul> <li>Support is added for OpenID authentication with GitHub, Google, and dex.</li> </ul>"},{"location":"general/whats-new/#group-policies-for-authorization","title":"Group policies for authorization","text":"<ul> <li> <p>When creating authorization policies, you can assign multiple users to a named group. A group-specific authorization policy can then be defined, specifying allowed access and actions for the group.</p> <p> Configuration syntax change: In the previous release, authorization policies were defined directly under the <code>accessControl</code> key in the zot configuration file.  With the new ability to create authorization groups, it becomes necessary to add a new <code>repositories</code> key below <code>accessControl</code>. Beginning with zot v2.0.0, the set of authorization policies are now defined under the <code>repositories</code> key.</p> </li> </ul>"},{"location":"general/whats-new/#signature-verification","title":"Signature verification","text":"<ul> <li>The validity of an image's signature can be verified by zot. Users can upload public keys or certificates to zot.</li> </ul>"},{"location":"general/whats-new/#ldap-credentials-stored-separately-from-configuration","title":"LDAP credentials stored separately from configuration","text":"<ul> <li> <p>The LDAP credentials are removed from zot's LDAP configuration and stored in a separate file. See zot's LDAP documentation.</p> <p> This LDAP configuration change is incompatible with previous zot releases. When upgrading, you must reconfigure your LDAP credentials if you use LDAP.</p> </li> </ul>"},{"location":"general/whats-new/#storage-deduplication-on-startup","title":"Storage deduplication on startup","text":"<ul> <li>Deduplication, a storage space saving feature, now runs or reverts at startup depending on whether the feature is enabled or disabled. You can trigger deduplication by enabling it and then restarting zot.</li> </ul>"},{"location":"general/whats-new/#retention-policies","title":"Retention policies","text":"<ul> <li>To optimize image storage, you can configure tag retention policies to remove images that are no longer needed.</li> </ul>"},{"location":"general/whats-new/#cve-scanning-support-for-image-indexes","title":"CVE scanning support for image indexes","text":"<ul> <li>The <code>trivy</code> backend now supports vulnerability scanning of image indexes. Previously, only images were scanned.</li> </ul>"},{"location":"general/whats-new/#bookmarks","title":"Bookmarks","text":"<ul> <li>In the zot GUI, you can bookmark an image so that it can be easily found later. Bookmarked images appear in search queries when the bookmarked option is enabled.</li> </ul>"},{"location":"general/whats-new/#ability-to-delete-tags-from-the-ui","title":"Ability to delete tags from the UI","text":""},{"location":"general/whats-new/#command-line-search","title":"Command line search","text":"<ul> <li>The <code>zli search</code> command allows smart searching for a repository by its name or for an image by its repo:tag.</li> </ul>"},{"location":"general/whats-new/#search-by-digest","title":"Search by digest","text":"<ul> <li>You can perform a global search for a digest (SHA hash) using either the UI or the CLI. This function is useful when an issue is found in a layer that is used by multiple images. In the UI Search box, for example, begin typing <code>sha256:</code> followed by a partial or complete digest value to see a dropdown list of images that contain the layer with the digest value.</li> </ul>"},{"location":"general/whats-new/#graphql-support-for-search","title":"GraphQL support for search","text":"<ul> <li>A GraphQL backend server within zot's registry search engine provides efficient and enhanced search capabilities. In addition to supporting direct GraphQL queries through the API, zot hosts the GraphQL Playground, which provides an interactive graphical environment for GraphQL queries. </li> </ul>"},{"location":"general/whats-new/#scheduling-of-background-tasks","title":"Scheduling of background tasks","text":"<ul> <li>You can adjust the background scheduler based on your deployment requirements for tasks that are handled in the background, such as garbage collection.  See Configuring zot.</li> </ul>"},{"location":"general/whats-new/#performance-profiling-for-troubleshooting","title":"Performance profiling for troubleshooting","text":"<ul> <li>You can use zot's built-in profiling tools to collect and analyze runtime performance data.</li> </ul>"},{"location":"general/whats-new/#binaries-for-freebsd","title":"Binaries for FreeBSD","text":"<ul> <li> <p>zot binary images are available for the FreeBSD operating system. Supported architectures are amd64 and arm64.</p> <p>  \u00a0zot container images for FreeBSD will be available in a future release.</p> </li> </ul>"},{"location":"general/whats-new/#v143","title":"v1.4.3","text":""},{"location":"general/whats-new/#remote-only-storage-support","title":"Remote-only Storage Support","text":"<ul> <li>The two types of state (images and image metadata) can both now be on remote storage so that zot process lifecycle and its storage can be managed and scaled independently.</li> </ul>"},{"location":"general/whats-new/#digest-collision-detection-during-image-deletion","title":"Digest Collision Detection During Image Deletion","text":"<ul> <li>When two or more image tags point to the same image digest and the image is deleted by digest causes data loss and dangling references. A new behavior-based policy called detectManifestCollision was added to prevent this.</li> </ul>"},{"location":"install-guides/install-guide-k8s/","title":"Installing zot with Kubernetes and Helm","text":"<p> Using Kubernetes with Helm charts for zot, you can easily deploy zot as an application in a Kubernetes cluster.</p>"},{"location":"install-guides/install-guide-k8s/#before-you-begin","title":"Before you begin","text":""},{"location":"install-guides/install-guide-k8s/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>kubectl must be installed and a Kubernetes cluster must be ready.</p> </li> <li> <p>Helm must be installed.</p> </li> </ul>"},{"location":"install-guides/install-guide-k8s/#supported-platforms","title":"Supported platforms","text":"<p>You can install zot on standard Linux platforms with Intel or ARM processors and with systemd installed.</p> OS ARCH Platform linux amd64 Intel-based Linux servers linux arm64 ARM-based servers and Raspberry Pi4 <p>Supported platforms and architectures</p>"},{"location":"install-guides/install-guide-k8s/#about-binary-images","title":"About binary images","text":"<p>Refer to Released Images for zot for information about available zot images along with information about image variations, image locations, and image naming formats.</p>"},{"location":"install-guides/install-guide-k8s/#installing-zot","title":"Installing zot","text":""},{"location":"install-guides/install-guide-k8s/#step-1-locate-the-helm-charts-in-a-remote-repository","title":"Step 1: Locate the Helm charts in a remote repository","text":"<ol> <li> <p>Specify a remote repository that contains the Helm charts for zot.     Give the repo a local name, such as project-zot, as in this     example:</p> <p><code>helm repo add project-zot http://zotregistry.dev/helm-charts</code></p> <pre><code>\"project-zot\" has been added to your repositories\n</code></pre> <p></p> <p>The Helm charts for zot are currently hosted in these publicly-accessible repositories: - zotregistry.dev - artifacthub.io </p> </li> <li> <p>Search the repository to see the Helm charts for zot installation.     Search using the keyword 'project-zot' or 'zot', as in this example:</p> <p><code>helm search repo project-zot</code></p> <pre><code>NAME             CHART VERSION  APP VERSION  DESCRIPTION\nproject-zot/zot  &lt;chart-version&gt;          v2.1.3       A Helm chart for Kubernetes\n</code></pre> <p></p> <p>The APP VERSION is the version/tag of the zot image used for the deployment.</p> </li> <li> <p>Update to the latest information of available charts from the chart     repository, as shown in this example:</p> <p><code>helm repo update project-zot</code></p> <pre><code>Hang tight while we grab the latest from your chart repositories...\n...Successfully got an update from the \"project-zot\" chart repository\nUpdate Complete. \u2388Happy Helming!\u2388\n</code></pre> </li> <li> <p>Display the default information of the Helm chart, as shown in this     example:</p> </li> </ol> <p><code>helm show all project-zot/zot</code></p> <pre><code>    apiVersion: v2\n    appVersion: v2.1.3\n    description: A Helm chart for Kubernetes\n    name: zot\n    type: application\n    version: &lt;chart-version&gt;\n\n    # Default values for zot.\n    # This is a YAML-formatted file.\n    # Declare variables to be passed into your templates.\n    replicaCount: 1\n    image:\n      repository: ghcr.io/project-zot/zot-linux-amd64\n      pullPolicy: IfNotPresent\n      tag: \"v2.1.3\"\n    serviceAccount:\n      create: true\n      annotations: {}\n      name: \"\"\n    service:\n      type: NodePort\n      port: 5000\n</code></pre>"},{"location":"install-guides/install-guide-k8s/#step-2-determine-any-needed-changes-from-the-helm-charts-defaults","title":"Step 2: Determine any needed changes from the Helm chart\u2019s defaults","text":"<p>Inspect the default information of the Helm chart, as shown in the previous step. In many cases, the default chart values may be acceptable. If your installation requires any non-default settings, you may be able to specify them during the installation. Not all chart values are configurable, but you can display those that are configurable using the command in the following example:</p> <p><code>helm show values project-zot/zot</code></p> <pre><code>  # Default values for zot.\n  # This is a YAML-formatted file.\n  # Declare variables to be passed into your templates.\n  replicaCount: 1\n  image:\n    repository: ghcr.io/project-zot/zot-linux-amd64\n    pullPolicy: IfNotPresent\n    tag: \"v2.1.3\"\n  serviceAccount:\n    create: true\n    annotations: {}\n    name: \"\"\n  service:\n    type: NodePort\n    port: 5000\n</code></pre> <p>The configurable settings in the chart are listed in the following table:</p> parameter description <p>replicaCount</p> <p>Desired number of replicas of the application</p> <p>image.repository</p> <p>Repository and image name for the application</p> <p>image.pullPolicy</p> <p>Whether to pull the image from the repository. If not specified, the policy depends on <code>image.tag</code>:</p> <ul> <li><p>If tag is <code>:latest</code> or no tag: <code>Always</code></p></li> <li><p>If tag is other than <code>:latest</code>: <code>IfNotPresent</code></p></li> </ul> <p>image.tag</p> <p>Identifies different versions the image. default is the chart <code>appVersion</code>.</p> <p>Examples: <code>:latest</code> (the default) or <code>:v2.1.3</code></p> <p>serviceAccount.create</p> <p>Specifies whether a service account should be created</p> <p>serviceAccount.annotations</p> <p>Annotations to add to the service account</p> <p>serviceAccount.name</p> <p>Name of the service account to use. If <code>name</code> is not set and <code>create</code> is true, a name is generated using the fullname template.</p> <p>service.type</p> <p>ClusterIP (default), NodePort, LoadBalancer, ExternalName, or Headless</p> <p>service.port</p> <p>Port number for calling the service</p> <p>strategy.type</p> <p>Kubernetes deployment strategy type. [More Info](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy) </p>"},{"location":"install-guides/install-guide-k8s/#customizing-the-helm-chart-using-set","title":"Customizing the Helm chart using 'set'","text":"<p>To override the default values in the chart, you can pass your custom values by adding the <code>--set</code> flag in the <code>helm install</code> command.</p> <p>For example, if your servers use an ARM processor instead of Intel, you must change the <code>image.repository</code> name from zot-linux-amd64 to zot-linux-arm64:</p> <p><code>--set image.repository=ghcr.io/project-zot/zot-linux-arm64</code></p> <p>You can change multiple settings with one <code>--set</code> statement. For example, you might want your installation to have more replicas or a different port number:</p> <p><code>--set replicaCount=2,service.port=5050</code></p>"},{"location":"install-guides/install-guide-k8s/#customizing-the-helm-chart-using-a-file","title":"Customizing the Helm chart using a file","text":"<p>You can also create a YAML file with your overrides and then add the new file by adding the <code>-f</code> flag to the <code>helm install</code> command. For example, to override the replica count and port number, the contents of your YAML file (for example, \"myfile.yaml\") would be:</p> <pre><code>replicaCount: 2\nservice:\n  port: 5050\n</code></pre> <p>and the following flag would be added to the <code>helm install</code> command:</p> <p><code>-f myfile.yaml</code></p>"},{"location":"install-guides/install-guide-k8s/#additional-information","title":"Additional information","text":"<p>See the Helm documentation for further information about modifying the Helm chart.</p>"},{"location":"install-guides/install-guide-k8s/#step-3-install-zot","title":"Step 3: Install zot","text":"<p>Install zot using the <code>helm install</code> command. The first example shows how to perform a default installation. The additional examples show different ways to modify the <code>helm install</code> command to override default settings in the Helm chart:</p> <p>Example 1: use default chart parameters</p> <p><code>helm install zot project-zot/zot</code></p> <pre><code>NAME: zot\nLAST DEPLOYED: Thu Aug 11 19:13:02 2022\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nNOTES:\n Get the application URL by running these commands:\n export NODE_PORT=$(kubectl get --namespace default -o jsonpath=\"{.spec.ports[0].nodePort}\" services zot)\n export NODE_IP=$(kubectl get nodes --namespace default -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n echo http://$NODE_IP:$NODE_PORT\n</code></pre> <p>Example 2: modify specific chart parameters with 'set'</p> <p><code>helm install --set replicaCount=2,service.port=5050 zot project-zot/zot</code></p> <p>Example 3: modify specific chart parameters with a file</p> <p><code>helm install -f myfile.yaml zot project-zot/zot</code></p> <p>Example 4: use a specific version of the Helm chart</p> <p><code>helm install zot project-zot/zot --version 0.1.0</code></p> <p>Example 5: link to a kubeconfig file</p> <p><code>helm install zot project-zot/zot --kubeconfig $HOME/.kube/config</code></p>"},{"location":"install-guides/install-guide-k8s/#after-the-installation","title":"After the installation","text":""},{"location":"install-guides/install-guide-k8s/#verify-the-installation","title":"Verify the installation","text":"<ol> <li> <p>List all releases that are either deployed or failed.</p> <p><code>helm list</code></p> <pre><code>NAME  NAMESPACE  REVISION  UPDATED    STATUS    CHART      APP VERSION\nzot   default    1         &lt;datetime&gt; deployed  &lt;chart-version&gt;  v2.1.3\n</code></pre> <p>This response indicates that zot is deployed.</p> </li> <li> <p>After making sure that your pods are up and running, execute the     following commands:</p> <pre><code>$ export NODE_PORT=$(kubectl get --namespace default -o jsonpath=\"{.spec.ports[0].nodePort}\" services zot)\n$ export NODE_IP=$(kubectl get nodes --namespace default -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n$ echo http://$NODE_IP:$NODE_PORT\n$ curl http://$NODE_IP:$NODE_PORT/v2/_catalog\n</code></pre> <p>The response should display the current contents of your zot repository, which should be empty immediately after installation:</p> <pre><code>{\"repositories\":[]}\n</code></pre> </li> </ol>"},{"location":"install-guides/install-guide-k8s/#edit-the-zot-configuration-file","title":"Edit the zot configuration file","text":"<p>The zot configuration file is a JSON or YAML file that contains all configuration settings for zot functions such as:</p> <ul> <li> <p>network</p> </li> <li> <p>storage</p> </li> <li> <p>authentication</p> </li> <li> <p>authorization</p> </li> <li> <p>logging</p> </li> <li> <p>metrics</p> </li> <li> <p>synchronization with other registries</p> </li> <li> <p>clustering</p> </li> </ul> <p>The Helm chart installs a minimal JSON configuration file as shown below:</p> <pre><code>{\n    \"storage\":\n    {\n        \"rootDirectory\": \"/var/lib/registry\"\n    },\n    \"http\":\n    {\n        \"address\": \"0.0.0.0\",\n        \"port\": \"5000\"\n    },\n    \"log\":\n    {\n        \"level\": \"debug\"\n    }\n}\n</code></pre> <p>The zot configuration file is located at <code>/etc/zot/config.json</code>.</p> <p>Refer to Configuring zot for complete information on configuring the zot server with the zot configuration file.</p>"},{"location":"install-guides/install-guide-k8s/#uninstalling-zot","title":"Uninstalling zot","text":"<p>Should you need to uninstall zot, use the <code>helm uninstall</code> command, as in this example:</p> <p><code>helm uninstall zot</code></p>"},{"location":"install-guides/install-guide-linux/","title":"Installing zot on Bare Metal Linux","text":"<p> Using an available executable zot image, you can easily deploy zot on a Linux server.</p>"},{"location":"install-guides/install-guide-linux/#before-you-begin","title":"Before you begin","text":""},{"location":"install-guides/install-guide-linux/#about-binary-images","title":"About binary images","text":"<p>Executable binary zot images are available for multiple platforms and architectures and with full or minimal implementations.</p> <p>Refer to Released Images for zot for information about available zot images along with information about image variations, image locations, and image naming formats.</p>"},{"location":"install-guides/install-guide-linux/#installation","title":"Installation","text":""},{"location":"install-guides/install-guide-linux/#step-1-get-zot","title":"Step 1: Get zot","text":"<p>Using <code>wget,</code> download the appropriate zot binary image for your platform from the zot GitHub project. Download the image to the`/usr/bin/` directory and rename it to <code>zot,</code> as in this example:</p> <pre><code>sudo wget -O /usr/bin/zot https://github.com/project-zot/zot/releases/download/v2.1.3/zot-linux-amd64\n</code></pre> <p>Then fix permissions to it:</p> <pre><code>sudo chmod +x /usr/bin/zot\nsudo chown root:root /usr/bin/zot\n</code></pre>"},{"location":"install-guides/install-guide-linux/#step-2-create-a-zot-configuration-file","title":"Step 2: Create a zot configuration file","text":"<p>Create a zot configuration file as <code>/etc/zot/config.json</code>.</p> <p>See Configuration file options for an example file with options and recommendations. You can find other configuration file examples in the zot GitHub project and in Configuring zot.</p>"},{"location":"install-guides/install-guide-linux/#step-3-configure-a-local-authentication-account","title":"Step 3: Configure a local authentication account","text":"<p>If you want to use local authentication with zot, create a <code>/etc/zot/htpasswd</code> file with an initial account entry using the <code>htpasswd</code> command as in this example:</p> <pre><code>htpasswd -bnB myUserName myPassword &gt; /etc/zot/htpasswd\n</code></pre> <p>To add additional local users, use the <code>&gt;&gt;</code> redirect as in this example:</p> <pre><code>htpasswd -bnB myUserName2 myPassword2 &gt;&gt; /etc/zot/htpasswd\n</code></pre>"},{"location":"install-guides/install-guide-linux/#step-4-define-the-zot-service","title":"Step 4: Define the zot service","text":"<p>Create a <code>/etc/systemd/system/zot.service</code> file to define the zot service in systemd. The following is an example service file for zot:</p> <pre><code>[Unit]\nDescription=OCI Distribution Registry\nDocumentation=https://zotregistry.dev/\nAfter=network.target auditd.service local-fs.target\n\n[Service]\nType=simple\nExecStart=/usr/bin/zot serve /etc/zot/config.json\nRestart=on-failure\nUser=zot\nGroup=zot\nLimitNOFILE=500000\nMemoryHigh=30G\nMemoryMax=32G\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p> Be sure to configure a dedicated non-root user ID as the User and Group in the zot service definition. The 'zot' user ID in this example is created in the next step.</p>"},{"location":"install-guides/install-guide-linux/#step-5-create-a-user-id-to-own-the-zot-service","title":"Step 5: Create a user ID to own the zot service","text":"<p>Create a non-root user ID to be the owner of the zot service and its resources.</p> <p>In this example, the user ID 'zot' is created with the <code>adduser</code> command, and resource ownership is assigned.</p> <pre><code>sudo adduser --no-create-home --disabled-password --gecos --disabled-login zot\n\nsudo mkdir -p /data/zot\nsudo chown -R zot:zot /data/zot\n\nsudo mkdir -p /var/log/zot\nsudo chown -R zot:zot /var/log/zot\n\nsudo chown -R root:root /etc/zot/\n</code></pre> <p>With the <code>adduser</code> options shown, the 'zot' user ID has no local directory. There is no ability to log into the zot user account, and the account has no finger information.</p>"},{"location":"install-guides/install-guide-linux/#step-6-start-zot","title":"Step 6: Start zot","text":"<p>Reload systemd config:</p> <pre><code>sudo systemctl daemon-reload\n</code></pre> <p>Enable and start the zot service with these commands:</p> <pre><code>sudo systemctl enable zot\nsudo systemctl start zot\n</code></pre> <p>Check if zot config is valid:</p> <pre><code>sudo -u zot zot verify /etc/zot/config.json\n</code></pre> <p>When the zot service has started, you can check its status with this command:</p> <pre><code>sudo systemctl status zot\n</code></pre>"},{"location":"install-guides/install-guide-linux/#after-the-installation","title":"After the installation","text":"<p>If your zot registry server is public facing, we recommend that you test your TLS configuration using a service such as the Qualys SSL Server Test.</p> <p>Refer to Configuring zot for further information about maintaining your zot registry server.</p> <p></p>"},{"location":"install-guides/install-guide-linux/#configuration-file-options-and-recommendations","title":"Configuration file options and recommendations","text":"<p>The following zot configuration file (<code>config.json</code>) can be used as a template for your own installation. You can modify this file to suit your own environment.</p> Click here to view the sample configuration file. <pre><code>{\n  \"distSpecVersion\":\"1.0.1\",\n  \"storage\":{\n    \"dedupe\": true,\n    \"gc\": true,\n    \"gcDelay\": \"1h\",\n    \"gcInterval\": \"6h\",\n    \"rootDirectory\":\"/data/zot/\"\n  },\n  \"http\": {\n    \"address\":\"0.0.0.0\",\n    \"port\":\"443\",\n    \"realm\":\"zot\",\n    \"tls\": {\n      \"cert\": \"/etc/letsencrypt/live/zothub.io/fullchain.pem\",\n      \"key\": \"/etc/letsencrypt/live/zothub.io/privkey.pem\"\n    },\n    \"auth\": {\n      \"htpasswd\": {\n        \"path\": \"/etc/zot/htpasswd\"\n      },\n      \"failDelay\": 5\n    }\n  },\n  \"log\":{\n    \"level\":\"debug\",\n    \"output\":\"/var/log/zot/zot.log\",\n    \"audit\":\"/var/log/zot/zot-audit.log\"\n  },\n  \"extensions\": {\n    \"search\": {\n      \"enable\": true,\n      \"cve\": {\n        \"updateInterval\": \"24h\"\n      }\n    },\n    \"sync\": {\n      \"enable\": false,\n      \"registries\": [\n        {\n          \"urls\": [\"https://mirror.gcr.io/library\"],\n          \"onDemand\": true,\n          \"maxRetries\": 3,\n          \"retryDelay\": \"5m\",\n          \"pollInterval\": \"6h\"\n        },\n        {\n          \"urls\": [\"https://docker.io/library\"],\n          \"onDemand\": true\n        }\n      ]\n    },\n    \"scrub\": {\n      \"interval\": \"24h\"\n    }\n  }\n}\n</code></pre> <p>Refer to Configuring zot for more details about configuration file options.</p>"},{"location":"install-guides/install-guide-linux/#tls-encryption","title":"TLS encryption","text":"<p>We recommend using a certificate authority such as Let\u2019s Encrypt that offers TLS encryption, as shown in this configuration example:</p> <pre><code>\"tls\": {\n  \"cert\": \"/etc/letsencrypt/live/zothub.io/fullchain.pem\",\n  \"key\": \"/etc/letsencrypt/live/zothub.io/privkey.pem\"\n}\n</code></pre>"},{"location":"install-guides/install-guide-linux/#registry-synchronization","title":"Registry synchronization","text":"<p>The example file enables registry synchronization with two other container registries. In the example, the zot server synchronizes with the Google and Docker container registries, as shown here:</p> <pre><code>\"sync\": {\n  \"enable\": false,\n  \"registries\": [\n    {\n      \"urls\": [\"https://mirror.gcr.io/library\"],\n      \"onDemand\": true,\n      \"maxRetries\": 3,\n      \"retryDelay\": \"5m\",\n      \"pollInterval\": \"6h\"\n    },\n    {\n      \"urls\": [\"https://docker.io/library\"],\n      \"onDemand\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"user-guides/user-guide-datapath/","title":"Push and Pull Image Content","text":"<p> zot is an OCI image registry that allows you to store, manage, and share container images.</p> <p>A zot registry can store and serve a variety of content, but the type of content may dictate your choice of a client tool.</p> <p>For various content types, this document shows examples of using a third-party client tool that supports the content. The following table shows which content and client tools are demonstrated.</p> Content Type Client OCI images skopeo OCI images regclient (<code>regctl</code>) OCI images crane OCI artifacts oras Helm charts helm <p> zot is compatible with kubernetes/cri-o using <code>docker://</code> transport, which is the default.</p> <p> In the following examples, the zot registry is located at <code>localhost</code>, using port number 5000.</p> <p></p>"},{"location":"user-guides/user-guide-datapath/#common-tasks-using-skopeo-for-oci-images","title":"Common tasks using skopeo for OCI images","text":"<p><code>skopeo</code> is a command line client that performs various operations on OCI container images and image repositories.</p> <p> For detailed information about using skopeo, see the skopeo man page.</p>"},{"location":"user-guides/user-guide-datapath/#push-an-oci-image","title":"Push an OCI image","text":"<p>This example pushes the latest container image for the <code>busybox</code> application to a zot registry.</p> <pre><code>$ skopeo --insecure-policy copy --dest-tls-verify=false --multi-arch=all \\\n   --format=oci docker://busybox:latest \\\n   docker://localhost:5000/busybox:latest\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#pull-an-oci-image","title":"Pull an OCI image","text":"<p>This example pulls the latest container image for the <code>busybox</code> application and stores the image to a local OCI-layout directory (<code>/oci/images</code>).</p> <pre><code>$ skopeo --insecure-policy copy --src-tls-verify=false --multi-arch=all \\\n   docker://localhost:5000/busybox:latest \\\n   oci:/oci/images:busybox:latest\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#pull-an-oci-image-to-a-private-docker-registry","title":"Pull an OCI image to a private docker registry","text":"<p>This example pulls the latest container image for the <code>busybox</code> application and stores the image to a local private docker registry.</p> <pre><code>$ skopeo --insecure-policy copy --src-tls-verify=false --multi-arch=all \\\n   docker://localhost:5000/busybox:latest \\\n   docker://localhost:5000/busybox:latest\n</code></pre> Click here to view an example of pushing and pulling an image using skopeo. <p> </p>"},{"location":"user-guides/user-guide-datapath/#authentication","title":"Authentication","text":"<p>In these examples, authentication is disabled for the source and destination. You can enable authentication by changing the command line options as follows:</p> <pre><code>--src-tls-verify=true\n--dest-tls-verify=true\n</code></pre> <p>You can also add credentials for authenticating with a source or destination repository:</p> <pre><code>--src-creds username:password\n--dest-creds username:password\n</code></pre> <p></p>"},{"location":"user-guides/user-guide-datapath/#common-tasks-using-regclient-for-oci-images","title":"Common tasks using regclient for OCI images","text":"<p>regclient is a client interface that performs various operations on OCI container images and image repositories. The command line interface for regclient is <code>regctl.</code></p> <p> For detailed information about <code>regctl</code> commands, see the regctl Documentation.</p>"},{"location":"user-guides/user-guide-datapath/#push-an-oci-image_1","title":"Push an OCI image","text":"<p>This example pushes version 1.20 of <code>golang</code> to a <code>tools</code> repository within the registry.</p> <pre><code>$ regctl registry set --tls=disabled localhost:5000\n$ regctl image copy ocidir://path/to/golang:1.20 localhost:5000/tools\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#pull-an-oci-image_1","title":"Pull an OCI image","text":"<p>This example pulls version 1.20 of <code>golang</code> to a local OCI-layout directory.</p> <pre><code>$ regctl image copy localhost:5000/tools ocidir://path/to/golang:1.20\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#list-all-repositories-in-registry","title":"List all repositories in registry","text":"<p>This example list all repositories in the registry.</p> <pre><code>$ regctl repo ls localhost:5000\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#list-tags","title":"List tags","text":"<p>This example lists all tags in the <code>tools</code> repository within the registry.</p> <pre><code>$ regctl tag ls localhost:5000/tools\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#pull-and-push-manifest","title":"Pull and push manifest","text":"<p>This example pulls and pushes the manifest in the <code>tools</code> repository within the registry.</p> <pre><code>$ regctl manifest get localhost:5000/tools --format=raw-body\n$ regctl manifest put localhost:5000/tools:1.0.0 \\\n--format oci --content-type application/vnd.oci.image.manifest.v1+json \\\n--format oci\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#authentication_1","title":"Authentication","text":"<p>In the preceding examples, TLS authentication with the zot registry was disabled by the following command:</p> <pre><code>$ regctl registry set --tls=disabled localhost:5000\n</code></pre> <p>This command allows <code>regctl</code> to accept an HTTP response from the zot server. If TLS authentication is enabled on the zot registry server, you can omit this command from your <code>regctl</code> session.</p> <p></p>"},{"location":"user-guides/user-guide-datapath/#common-tasks-using-oras-for-oci-artifacts","title":"Common tasks using oras for OCI artifacts","text":"<p>ORAS (OCI Registry As Storage) is a command line client for storing OCI artifacts on OCI repositories.</p> <p> For detailed information about the <code>oras</code> commands in these examples, see the ORAS CLI documentation.</p>"},{"location":"user-guides/user-guide-datapath/#push-an-artifact","title":"Push an artifact","text":"<p>This example pushes version 2 of an artifact file named <code>hello-artifact</code> to a zot registry.</p> <pre><code>$ oras push --plain-http localhost:5000/hello-artifact:v2 \\\n        --config config.json:application/vnd.acme.rocket.config.v1+json \\\n        artifact.txt:text/plain -d -v\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#pull-an-artifact","title":"Pull an artifact","text":"<p>This example pulls version 2 of an artifact file named <code>hello-artifact</code> from a zot registry.</p> <pre><code>$ oras pull --plain-http localhost:5000/hello-artifact:v2 -d -v\n</code></pre> Click here to view an example of pushing and pulling an artifact using oras. <p> </p>"},{"location":"user-guides/user-guide-datapath/#attach-a-reference","title":"Attach a reference","text":"<pre><code>$ echo '{\"artifact\": \"localhost:5000/hello-artifact:v2\", \"signature\": \"pat hancock\"}' &gt; signature.json\n\n$ oras attach \\\n  --artifact-type 'signature/example' \\\n  localhost:5000/hello-artifact:v2 \\\n  ./signature.json:application/json\n\n$ oras discover -o tree localhost:5000/hello-artifact:v2\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#authentication_2","title":"Authentication","text":"<p>To authenticate with the zot server, log in at the start of your session using the following command:</p> <pre><code>$ oras login -u myUsername -p myPassword localhost:5000\n</code></pre> <p>You can also add credentials in the push or pull commands as in this example:</p> <pre><code>$ oras pull -u myUsername -p myPassword localhost:5000/hello-artifact:v2 -d -v\n</code></pre> <p> For additional authentication options, including interactive credential entry and disabling TLS, see the ORAS authentication documentation.</p> <p></p>"},{"location":"user-guides/user-guide-datapath/#common-tasks-using-helm-for-helm-charts","title":"Common tasks using helm for helm charts","text":"<p>Helm is a package manager for Kubernetes. Among many other capabilities, helm can store and retrieve helm charts on OCI image repositories.</p> <p> For detailed information about the <code>helm</code> commands in these examples, see Commands for working with registries in the helm documentation.</p>"},{"location":"user-guides/user-guide-datapath/#push-a-helm-chart","title":"Push a helm chart","text":"<p>This example pushes version 1.2.3 of a zot helm chart to a <code>zot-chart</code> repository within the registry.</p> <pre><code>$ helm package path/to/helm-charts/charts/zot\n$ helm push zot-1.2.3.tgz oci://localhost:5000/zot-chart\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#pull-a-helm-chart","title":"Pull a helm chart","text":"<p>This example pulls version 1.2.3 of a zot helm chart from a <code>zot-chart</code> repository within the registry.</p> <pre><code>$ helm pull oci://localhost:5000/zot-chart/zot --version 1.2.3\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#authentication_3","title":"Authentication","text":"<p>To authenticate with the zot server, log in at the start of your session using the following command:</p> <pre><code>$ helm registry login -u myUsername localhost:5000\n</code></pre> <p>You will be prompted to manually enter a password.</p> <p></p>"},{"location":"user-guides/user-guide-datapath/#common-tasks-using-crane-for-oci-images","title":"Common tasks using crane for OCI images","text":"<p>crane is an open-source project that provides a command-line interface (CLI) for interacting with container registries, such as Docker Hub and Google Container Registry.</p> <p> For detailed information about <code>crane</code> commands, see the crane Documentation.</p>"},{"location":"user-guides/user-guide-datapath/#push-an-oci-image_2","title":"Push an OCI image","text":"<p>This example pushes the latest container image for the <code>alpine</code> application to a  registry.</p> <pre><code>$ crane --insecure push \\\n   oci/images/alpine:latest \\\n   localhost:5000/alpine:latest\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#pull-an-oci-image_2","title":"Pull an OCI image","text":"<p>This example pulls the latest container image for the <code>alpine</code> application and stores the image to a local OCI-layout directory (<code>/oci/images</code>).</p> <pre><code>$ crane --insecure pull \\\n   --format oci \\\n   localhost:5000/alpine:latest \\\n   oci/images/alpine:latest\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#copy-an-oci-image-to-a-private-docker-registry","title":"Copy an OCI image to a private docker registry","text":"<p>This example pulls the latest container image for the <code>alpine</code> application and stores the image to a local private docker registry.</p> <pre><code>$ crane --insecure copy \\\n   alpine:latest \\\n   localhost:5000/alpine:latest\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#list-tags_1","title":"List tags","text":"<p>This example lists all tags in the <code>alpine</code> image within the registry.</p> <pre><code>$ crane ls localhost:5000/alpine\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#find-the-digest-of-an-image","title":"Find the digest of an image","text":"<p>This example gets the digest of the <code>alpine</code> image within the registry.</p> <pre><code>$ crane digest localhost:5000/alpine:latest\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#authentication_4","title":"Authentication","text":"<p>To authenticate with the registry server, log in at the start of your session using the following command:</p> <pre><code>$ crane auth login -u myUsername localhost:5000\n</code></pre>"},{"location":"user-guides/user-guide-gui/","title":"Use the Web Interface to Find Images","text":"<p> Using a browser, you can browse a zot repository for container images and artifacts. The web interface also provides the commands for downloading an image using popular third-party tools.</p> <p>If a zot registry is built with the optional <code>zui</code> package, the registry has a web interface. </p>"},{"location":"user-guides/user-guide-gui/#access-the-registry","title":"Access the registry","text":"<p> Depending on the security configuration of the zot registry, you might need to authenticate before being given access.</p> <p>The initial page of the registry displays a sampling of the most popular images and recently updated images. To view all available images in the registry, click the <code>View all</code> link in the upper right of the page to go to the <code>/explore</code> page. </p> <p></p> <p> Wherever an image name appears, two icons follow the name, indicating the results of the vulnerability scan and the signature status. These icons are described in Icons and their meanings.</p>"},{"location":"user-guides/user-guide-gui/#find-an-image","title":"Find an image","text":"<p>To assist you in finding images specific to your requirements, the <code>/explore</code> page provides several sorting options along with faceted navigation in addition to a general search box.</p> <ul> <li> <p>Sorting criteria include relevance, most recently updated, alphabetical, and most downloaded.</p> </li> <li> <p>Navigation facets include operating system, CPU architecture, and signature status.</p> </li> </ul> <p></p> <p>When you locate the desired image, click its tile.</p> <p></p>"},{"location":"user-guides/user-guide-gui/#inspect-the-image-properties","title":"Inspect the image properties","text":"<p>The <code>OVERVIEW</code> tab of the initial image description page contains a brief description of the image along with several details, such as the repository URL, number of downloads, last published, size, and license type.</p> <p>Click the <code>TAGS</code> tab to view the available versions of the image.</p> <p></p> <p>Click the tag link of the desired version of the image. In the resulting page, you can view detailed information about the image, including its digest hash, and you can obtain a command to pull the image from the repository.</p> <p></p> <p>Tabs on this page provide the following information:</p> Tab Description LAYERS The build command and the digest hash USES A list of images used by this image USED BY A list of images that use this image VULNERABILITIES A list of known vulnerabilities <p>From the <code>LAYERS</code> tab, click <code>Details</code> to view an example of the image build command and the layer's digest hash.</p> <p></p>"},{"location":"user-guides/user-guide-gui/#pull-an-image","title":"Pull an image","text":"<p>After opening the tag link of the desired image, click the <code>Pull Image</code> drop-down list to display the available pull commands. Docker, podman, and skopeo image management tools are supported. </p> <p></p> <p>Select a tool and click the pages icon next to the command to copy the full command to your clipboard. An example of the pull command using podman is:</p> <p><code>podman pull zothub.io/c3/debian/base-amd64:bullseye</code></p> <p>Paste the pull command into your terminal to pull the image.</p> <p> For information about using image management tools to pull images, see Push and Pull Image Content.</p> <p></p>"},{"location":"user-guides/user-guide-gui/#adding-bookmarks","title":"Adding Bookmarks","text":"<p>To mark an image so that it can be easily found later, click the bookmark icon on the image page. Bookmarked images appear in search queries when the Bookmarked option is enabled.</p> <p>The bookmark icon before selection:</p> <p></p> <p>The bookmark icon after selection:</p> <p></p> <p></p>"},{"location":"user-guides/user-guide-gui/#icons-and-their-meanings","title":"Icons and their meanings","text":"<p>These icons appear next to the image name, indicating the results of the vulnerability scan and the signature status. </p> Icon Description A vulnerability scan of the image found no vulnerabilities A vulnerability scan of the image failed(See severity icon in VULNERABILITIES tab) Critical severity High severity Medium severity Low severity The image signature is verified The image signature is not verified The image is not bookmarked by the user The image is bookmarked by the user"},{"location":"user-guides/zli/","title":"Using the command line interface (zli)","text":"<p> zli: The command line tool for zot servers</p>"},{"location":"user-guides/zli/#what-is-zli","title":"What is zli?","text":"<p>zli is a binary that implements a set of command line commands for interacting with the zot registry server.</p> <p> We recommend installing zli when you install zot.</p>"},{"location":"user-guides/zli/#how-to-get-zli","title":"How to get zli","text":"<p>zli is hosted with zot on GitHub at project-zot. From GitHub, you can download the zli binary or you can build zli from the source.</p> <p></p>"},{"location":"user-guides/zli/#supported-platforms","title":"Supported platforms","text":"<p>zli is supported for the following operating systems and platform architectures:</p> OS ARCH Platform linux amd64 Intel-based Linux servers linux arm64 ARM-based servers and Raspberry Pi4 darwin amd64 Intel-based MacOS darwin arm64 ARM-based MacOS"},{"location":"user-guides/zli/#downloading-zli-binaries","title":"Downloading zli binaries","text":"<p>You can download the executable binary for your server platform and architecture under \"Assets\" on the GitHub zot releases page.</p> <p>The binary image is named using the OS and architecture from the Supported platforms table. For example, the binary for an Intel-based MacOS server is <code>zli-darwin-amd64.</code></p>"},{"location":"user-guides/zli/#building-zli-from-source","title":"Building zli from source","text":"<p>To build the zli binary, copy or clone the zot project from GitHub and execute the <code>make cli</code> command in the <code>zot</code> directory. Use the same command options that you used to build zot, as shown:</p> <p><code>make OS=os ARCH=architecture cli</code></p> <p>For example, the following command builds zli for an Intel-based MacOS server:</p> <pre><code>make OS=darwin ARCH=amd64 cli\n</code></pre> <p>In this example, the resulting executable file is <code>zli-darwin-amd64</code> in the <code>zot/bin</code> directory.</p>"},{"location":"user-guides/zli/#common-tasks-using-zli","title":"Common tasks using zli","text":"<p>This section includes examples of common zot server tasks using the zli command line interface. For a detailed listing of zli commands, see the zli Command Reference in this guide.</p> <p> The original filename of the zli executable file will reflect the build options, such as <code>zli-linux-amd64</code>. For convenience, you can rename the executable to simply <code>zli</code>. The instructions and examples in this guide use <code>zli</code> as the name of the executable file.</p>"},{"location":"user-guides/zli/#adding-a-zot-server-url","title":"Adding a zot server URL","text":"<p>You can modify the zot server configuration using the <code>zli config add</code> command. This example adds a zot server URL with an alias of <code>remote-zot</code>:</p> <pre><code>$ bin/zli config add remote-zot https://server-example:8080\n</code></pre> <p>Use the <code>zli config</code> command to list all configured URLs with their aliases:</p> <pre><code>$ bin/zli config -l\n\nremote-zot   https://server-example:8080\nlocal        http://localhost:8080\n</code></pre>"},{"location":"user-guides/zli/#listing-images","title":"Listing images","text":"<p>You can list all images hosted on a zot server using the <code>zli image list</code> command with the server\u2019s alias:</p> <pre><code>$ bin/zli image list --config local\n\nREPOSITORY        TAG       OS/ARCH         DIGEST      SIGNED      SIZE        \nalpine            latest    linux/amd64     3fc10231    false       84MB        \nbusybox           latest    linux/amd64     9172c5f6    false       2.2MB\n</code></pre> <p>You can also filter the image list to view a specific image by specifying the image name:</p> <pre><code>$ bin/zli image name busybox:latest --config local\n\nREPOSITORY        TAG       OS/ARCH         DIGEST      SIGNED      SIZE              \nbusybox           latest    linux/amd64     9172c5f6    false       2.2MB\n</code></pre>"},{"location":"user-guides/zli/#scanning-images-for-known-vulnerabilities","title":"Scanning images for known vulnerabilities","text":"<p>Using the <code>zli cve list</code> command, you can fetch the CVE (Common Vulnerabilities and Exposures) information for images hosted on the zot server. This example shows how to learn which images are affected by a specific CVE:</p> <pre><code>$ bin/zli cve affected CVE-2017-9935 --config remote-zot\n\nIMAGE NAME        TAG               DIGEST    SIZE\nc3/openjdk-dev    commit-5be4d92    ac3762e2  335MB\n</code></pre> <p>This example displays a list of all CVEs affecting a specific image:</p> <pre><code>$ bin/zli cve list c3/openjdk-dev:0.3.19 --config remote-zot\n\nID                SEVERITY  TITLE\nCVE-2015-8540     LOW       libpng: underflow read in png_check_keyword()\nCVE-2017-16826    LOW       binutils: Invalid memory access in the coff_s...\n</code></pre> <p>This example (--verbose) displays a list of all CVEs affecting a specific image with details:</p> <pre><code>$ bin/zli cve list c3/openjdk-dev:0.3.19 --config remote-zot --verbose\nLOW 2, UNKNOWN 1, TOTAL 3\n\nCVE-2015-8540\n...\n</code></pre> <p>Note that the details may display the package path in the image when the information is available.</p> <p>This example displays the detailed CVEs in JSON format:</p> <pre><code>$ bin/zli cve list c3/openjdk-dev:0.3.19 --config remote-zot -f json\n{\n  \"Tag\": \"0.3.19\",\n  \"CVEList\": [\n    {\n      \"Id\": \"CVE-2019-17006\",\n      \"Severity\": \"MEDIUM\",\n      \"Title\": \"nss: Check length of inputs for cryptographic primitives\",\n      \"Description\": \"A vulnerability was discovered in nss where input text length was not checked when using certain cryptographic primitives. This could lead to a heap-buffer overflow resulting in a crash and data leak. The highest threat is to confidentiality and integrity of data as well as system availability.\",\n      \"PackageList\": [\n        {\n          \"Name\": \"nss\",\n          \"InstalledVersion\": \"3.44.0-7.el7_7\",\n          \"FixedVersion\": \"Not Specified\"\n        },\n        {\n          \"Name\": \"nss-sysinit\",\n          \"InstalledVersion\": \"3.44.0-7.el7_7\",\n          \"FixedVersion\": \"Not Specified\"\n        },\n        {\n          \"Name\": \"nss-tools\",\n          \"InstalledVersion\": \"3.44.0-7.el7_7\",\n          \"FixedVersion\": \"Not Specified\"\n        }]\n    }]\n}\n</code></pre> <p>This example lists all images on a specific zot server that are affected by a specific CVE:</p> <pre><code>$ bin/zli cve affected --config remote-zot CVE-2017-9935 --repo c3/openjdk-dev\n\nIMAGE NAME        TAG               DIGEST    SIZE\nc3/openjdk-dev    commit-2674e8a    71046748  338MB\nc3/openjdk-dev    commit-bd5cc94    0ab7fc76\n</code></pre> <p>This example lists all images on a specific zot server where the CVE has been fixed:</p> <pre><code>$ bin/zli cve fixed c3/openjdk-dev CVE-2017-9935 --config remote-zot\n\nIMAGE NAME        TAG                       DIGEST    SIZE\nc3/openjdk-dev    commit-2674e8a-squashfs   b545b8ba  321MB\nc3/openjdk-dev    commit-d5024ec-squashfs   cd45f8cf  321MB\n</code></pre> <p>This example lists all CVEs that have been found in one image and not the other:</p> <pre><code>$ bin/zli cve diff c3/openjdk-dev:1.0.0 c3/openjdk-dev:2.0.0 --config remote-zot\n\nID                SEVERITY  TITLE\nCVE-2015-8540     LOW       libpng: underflow read in png_check_keyword()\nCVE-2017-16826    LOW       binutils: Invalid memory access in the coff_s...\n</code></pre> <p>For example, the above query lists all CVEs that have been found in   c3/openjdk-dev:1.0.0 but not in c3/openjdk-dev:2.0.0</p>"},{"location":"user-guides/zli/#listing-repositories","title":"Listing repositories","text":"<p>You can list all repositories hosted on a zot server using the <code>zli repo</code> command with the server\u2019s alias:</p> <pre><code>Searching... \ud83c\udf0d\n\nREPOSITORY NAME\nalpine\nbusybox\n</code></pre>"},{"location":"user-guides/zli/#searching-for-repositories-and-images","title":"Searching for repositories and images","text":"<p>You can locate repositories and images hosted on a zot server using the <code>zli search</code> command.</p> <ul> <li>To search for a repository, specify the full name with a colon or a partial name with no colon.</li> <li>To search for an image, specify the full repository name followed by the tag or a prefix of the tag.</li> </ul> <p>This example searches the zot registry named 'local' for a repository whose name contains the substring 'ng':</p> <pre><code>$ bin/zli search query ng --config local\n\nNAME            SIZE        LAST UPDATED                             DOWNLOADS   STARS\nnginx           794MB       2023-03-01 18:44:17.707690369 +0000 UTC  0           0\nmongo           232MB       2022-10-18 15:03:40.7646203 +0300 +0300  0           0\ngolang          1.1GB       2023-06-22 00:32:38.613354854 +0000 UTC  0           0\n</code></pre> <p>This example searches the zot registry named 'local' for a repository named 'nginx'. Because the repository name is followed by a colon, the search results must match the name exactly. </p> <pre><code>$ bin/zli search query nginx: --config local\n\nREPOSITORY  TAG          OS/ARCH         DIGEST      SIGNED      SIZE\nnginx       1.23.1       linux/amd64     d2ad9089    true        57MB\nnginx       latest       *               c724afdf    true        448MB\n                         linux/amd64     009c6fda    false       57MB\n                         linux/arm/v5    1d5d4f53    false       54MB\n                         linux/arm/v7    f809744c    false       50MB\n                         linux/arm64/v8  ebb807a9    false       56MB\n                         linux/386       19cf4b3c    false       59MB\n                         linux/mips64le  45ab60e6    false       55MB\n                         linux/ppc64le   89511bee    false       63MB\n                         linux/s390x     713b9329    false       55MB\nnginx       stable-perl  *               4383a0b8    true        534MB\n                         linux/amd64     308a37a0    false       68MB\n                         linux/arm/v5    0fb8fb71    false       64MB\n                         linux/arm/v7    6868f552    false       60MB\n                         linux/arm64/v8  aed72c86    false       66MB\n                         linux/386       5c7ed456    false       69MB\n                         linux/mips64le  546d2bae    false       65MB\n                         linux/ppc64le   7db02f5a    false       74MB\n                         linux/s390x     800fd86f    false       66MB\n</code></pre>"},{"location":"user-guides/zli/#sorting-the-output-of-a-zli-command","title":"Sorting the output of a zli command","text":"<p>For a zli command that can result in a lengthy output list, you can use the command flag <code>--sort-by &lt;option&gt;</code> to cause the output to be sorted by a specified property of the output data. The available sorting criteria vary for different commands, but examples of  sorting criteria options are described in the following table:</p> flag option criteria <code>alpha-asc</code> alphabetical, ascending <code>alpha-dsc</code> alphabetical, descending <code>relevance</code> quality of match <code>severity</code> severity of condition <code>update-time</code> timestamp <p>For a given command that results in an output list, you can see the available sorting criteria in the usage information returned by the <code>--help</code> flag.  For example, <code>bin/zli image name --help</code> returns usage information containing the following line under \"Flags\":</p> <p><code>--sort-by string   Options for sorting the output: [update-time, alpha-asc, alpha-dsc] (default \"alpha-asc\")</code></p> <p>According to this information, the list of image names returned by the <code>bin/zli image name</code> command can be sorted in order of alphabetical ascending, alphabetical descending, or the timestamp of the latest update of the image. The default sorting method for this command, if no <code>--sort-by</code> flag is present, is alphabetical ascending.</p> <p></p>"},{"location":"user-guides/zli/#command-reference","title":"Command reference","text":"<p>This section provides detailed usage information for basic first-level zli commands.  Many zli commands also support subcommands, which are listed as \"Available Commands\" in each command description.  For example, <code>zli search</code> can be extended with either the <code>query</code> or <code>subject</code> subcommand.  To see the detailed usage for each subcommand, type the command with the subcommand and append <code>--help</code>, such as <code>zli search query --help</code>.  The <code>zli search</code> description below includes the subcommand help as an example.</p>"},{"location":"user-guides/zli/#zli","title":"zli","text":"<pre><code>$ bin/zli --help\n\nUsage:\n  zli [flags]\n  zli [command]\n\nAvailable Commands:\n  completion  Generate the autocompletion script for the specified shell\n  config      Configure zot registry parameters for CLI\n  cve         Lookup CVEs in images hosted on the zot registry\n  help        Help about any command\n  image       List images hosted on the zot registry\n  repo        List all repositories\n  search      Search images and their tags\n\nFlags:\n  -h, --help      help for zli\n  -v, --version   show the version and exit\n\nUse \"zli [command] --help\" for more information about a command.\n</code></pre>"},{"location":"user-guides/zli/#zli-completion","title":"zli completion","text":"<p>This command generates the autocompletion script for <code>zli</code> for the specified shell. See each subcommand\u2019s help for details on how to use the generated script.</p> <pre><code>$ bin/zli completion --help\n\nUsage:\n  zli completion [command]\n\nAvailable Commands:\n  bash        Generate the autocompletion script for bash\n  fish        Generate the autocompletion script for fish\n  powershell  Generate the autocompletion script for powershell\n  zsh         Generate the autocompletion script for zsh\n\nFlags:\n  -h, --help   help for completion\n\nUse \"zli completion [command] --help\" for more information about a command.\n</code></pre> <p></p>"},{"location":"user-guides/zli/#zli-config","title":"zli config","text":"<p>This command configures zot registry parameters for CLI.</p> <pre><code>$ bin/zli config --help\n\nUsage:\n  zli config &lt;config-name&gt; [variable] [value] [flags]\n  zli config [command]\n\nExamples:\n  zli config add main https://zot-foo.com:8080\n  zli config --list\n  zli config main url\n  zli config main --list\n  zli config remove main\n\nAvailable Commands:\n  add         Add configuration for a zot registry\n  remove      Remove configuration for a zot registry\n\nFlags:\n  -h, --help    help for config\n  -l, --list    List configurations\n      --reset   Reset a variable value\n\nUse \"zli config [command] --help\" for more information about a command.\n\nUseful variables:\n  url       zot server URL\n  showspinner   show spinner while loading data [true/false]\n  verify-tls    enable TLS certificate verification of the server [default: true]\n</code></pre> <p></p>"},{"location":"user-guides/zli/#zli-cve","title":"zli cve","text":"<p>This command lists CVEs (Common Vulnerabilities and Exposures) of images hosted on the zot registry</p> <pre><code>$ ./zli cve --help\n\nUsage:\n  zli cve [command]\n\nAvailable Commands:\n  affected    List images affected by a CVE\n  fixed       List tags where a CVE is fixedRetryWithContext\n  list        List CVEs by REPO:TAG or REPO@DIGEST\n\nFlags:\n      --config string   Specify the registry configuration to use for connection\n      --debug           Show debug output\n  -f, --format string   Specify output format [text/json/yaml]\n  -h, --help            help for cve\n      --url string      Specify zot server URL if config-name is not mentioned\n  -u, --user string     User Credentials of zot server in \"username:password\" format\n      --verbose         Show verbose output\n\nUse \"zli cve [command] --help\" for more information about a command.\n\nRun 'zli config -h' for details on [config-name] argument\n</code></pre> <p></p>"},{"location":"user-guides/zli/#zli-image","title":"zli image","text":"<p>This command lists images hosted on the zot registry.</p> <pre><code>$ ./zli image --help\n\nUsage:\n  zli image [command]\n\nAvailable Commands:\n  base        List images that are base for the given image\n  cve         List all CVE's of the image\n  derived     List images that are derived from given image\n  digest      List images that contain a blob(manifest, config or layer) with the given digest\n  list        List all images\n  name        List image details by name\n\nFlags:\n      --config string   Specify the registry configuration to use for connection\n      --debug           Show debug output\n  -f, --format string   Specify output format [text/json/yaml]\n  -h, --help            help for image\n      --url string      Specify zot server URL if config-name is not mentioned\n  -u, --user string     User Credentials of zot server in \"username:password\" format\n      --verbose         Show verbose output\n\nUse \"zli image [command] --help\" for more information about a command.\n\nRun 'zli config -h' for details on [config-name] argument\n</code></pre> <p></p>"},{"location":"user-guides/zli/#zli-repo","title":"zli repo","text":"<p>This command lists all repositories in the zot registry.</p> <pre><code>$ ./zli repo --help\n\nUsage:\n  zli repo [command]\n\nAvailable Commands:\n  list        List all repositories\n\nFlags:\n      --config string   Specify the registry configuration to use for connection\n      --debug           Show debug output\n  -h, --help            help for repo\n      --url string      Specify zot server URL if config-name is not mentioned\n  -u, --user string     User Credentials of zot server in \"username:password\" format\n\nUse \"zli repo [command] --help\" for more information about a command.\n\nRun 'zli config -h' for details on [config-name] argument\n</code></pre> <p></p>"},{"location":"user-guides/zli/#zli-search","title":"zli search","text":"<p>The <code>search</code> command allows smart searching for a repository by its name or for an image by its repo:tag.</p> <pre><code>$ ./zli search --help\n\nSearch repos or images\n\nUsage:\n  zli search [command]\n\nAvailable Commands:\n  query       Fuzzy search for repos and their tags.\n  subject     List all referrers for this subject.\n\nFlags:\n      --config string   Specify the registry configuration to use for connection\n      --debug           Show debug output\n  -f, --format string   Specify output format [text/json/yaml]\n  -h, --help            help for search\n      --url string      Specify zot server URL if config-name is not mentioned\n  -u, --user string     User Credentials of zot server in \"username:password\" format\n      --verbose         Show verbose output\n\nUse \"zli search [command] --help\" for more information about a command.\n\nRun 'zli config -h' for details on [config-name] argument\n</code></pre>"},{"location":"user-guides/zli/#zli-search-query","title":"zli search query","text":"<pre><code>$ ./zli search query --help\n\nUsage:\n  zli search query [repo]|[repo:tag] [flags]\n\nExamples:\n# For repo search specify a substring of the repo name without the tag\n  zli search query \"test/repo\"\n\n# For image search specify the full repo name followed by the tag or a prefix of the tag.\n  zli search query \"test/repo:2.1.\"\n\nFlags:\n  -h, --help             help for query\n      --sort-by string   Options for sorting the output: [relevance, update-time, alpha-asc, alpha-dsc] (default \"relevance\")\n\nGlobal Flags:\n      --config string   Specify the registry configuration to use for connection\n      --debug           Show debug output\n  -f, --format string   Specify output format [text/json/yaml]\n      --url string      Specify zot server URL if config-name is not mentioned\n  -u, --user string     User Credentials of zot server in \"username:password\" format\n      --verbose         Show verbose output\n\nRun 'zli config -h' for details on [config-name] argument\n</code></pre>"},{"location":"user-guides/zli/#zli-search-subject","title":"zli search subject","text":"<pre><code>$ ./zli search subject --help\n\nList all referrers for this subject. The subject can be specified by tag(repo:tag) or by digest\" or (repo@digest)\n\nUsage:\n  zli search subject [repo:tag]|[repo@digest] [flags]\n\nExamples:\n# For referrers search specify the referred subject using it's full digest or tag:\n  zli search subject \"repo@sha256:f9a0981...\"\n  zli search subject \"repo:tag\"\n\nFlags:\n  -h, --help             help for subject\n      --sort-by string   Options for sorting the output: [update-time, alpha-asc, alpha-dsc] (default \"alpha-asc\")\n\nGlobal Flags:\n      --config string   Specify the registry configuration to use for connection\n      --debug           Show debug output\n  -f, --format string   Specify output format [text/json/yaml]\n      --url string      Specify zot server URL if config-name is not mentioned\n  -u, --user string     User Credentials of zot server in \"username:password\" format\n      --verbose         Show verbose output\n\nRun 'zli config -h' for details on [config-name] argument\n</code></pre>"}]}